Public Class frmChartSettings
    'This form is used to specify the chart settings.
#Region " Variable Declarations - All the variables used in this form and this application." '=================================================================================================

    Dim cboArea As New DataGridViewComboBoxColumn 'Used for selecting the ChartArea for a Series
    Dim cboType As New DataGridViewComboBoxColumn 'Used for selecting the Type of series to plot (Point, Line, Bar or Column)
    Dim cboXField As New DataGridViewComboBoxColumn 'Used for selecting the X coordinate Field to plot
    Dim cboYField As New DataGridViewComboBoxColumn 'Used for selecting the Y coordinate Field to plot

    'Discrete series variables
    Dim cboDiscArea As New DataGridViewComboBoxColumn 'Used for selecting the ChartArea for a Series
    Dim cboDiscType As New DataGridViewComboBoxColumn 'Used for selecting the Type of series to plot (Point, Line, Bar or Column)
    Dim cboDiscXField As New DataGridViewComboBoxColumn 'Used for selecting the X coordinate Field to plot
    Dim cboDiscYField As New DataGridViewComboBoxColumn 'Used for selecting the Y coordinate Field to plot

    'Public myParent As Form
    'Dim myChart As DataVisualization.Charting.Chart

    'Public frmParent As frmChart 'The parent chart form
    'Public myParent As frmChart 'The parent chart form
    Public myParent As frmChart 'The parent chart form

    'Public ChartForm As Object 'The Chart form that called this Chart Settings form.

    'Dim ChartInfo As Xml.Linq.XDocument 'Stores the chart information.
    'Dim TitleInfo As IEnumerable(Of XElement)
    'Dim SeriesInfo As IEnumerable(Of XElement)
    'Dim AreaInfo As IEnumerable(Of XElement)
    'Dim PointAnnotInfo As IEnumerable(Of XElement)
    'Dim AreaAnnotInfo As IEnumerable(Of XElement)

    'This is used for chart annotation:
    Dim SelectedDistrib As DistributionInfo 'This variable points to the selected distribution - either Main.Distribution.Distrib or Main.Distribution.MultiDistrib(DistribNo - 1)

    'Dim MouseUDef1Down As Boolean 'True if the mouse is down over pbUserDef1
    'Dim MouseUDef1PosNow As New Point 'Stores the current mouse position in pbUserDef1
    'Dim UDef1Info As New Graph1DInfo 'Stores and calculates information for a 1D graphical parameter adjustment. (This class is defined in frmAdjust.)

    'XRange criteria
    Private Enum XRange
        Continuous 'Use the Continuous distribution XRange
        Discrete   'Use the Discrete distribution XRange
        Common     'Use the XRange containing both Continuous and Discrete distribution data
        Both       'Use the XRange containing either Continuous or Discrete distribution data
    End Enum

    ''YRange criteria
    'Private Enum YRange
    '    All      'Use all the distributions to set the YRange
    '    Selected 'Use selected distributions to set the YRange
    'End Enum

#End Region 'Variable Declarations ------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Properties - All the properties used in this form and this application" '============================================================================================================

    Private _chartFormNo As Integer = -1 'The FormNo of the parent chart form.
    Public Property ChartFormNo As Integer
        Get
            Return _chartFormNo
        End Get
        Set(ByVal value As Integer)
            _chartFormNo = value
            'Debug.Print("FormNo = " & _formNo)
        End Set
    End Property

    'Private _dataSource As Object = Nothing 'DataSource links to the oject containing the Data to be analysed.
    Private _dataSource As DistributionModel = Nothing 'DataSource links to the oject containing the Data to be analysed.
    'Property DataSource As Object
    Property DataSource As DistributionModel
        Get
            Return _dataSource
        End Get
        'Set(value As Object)
        Set(value As DistributionModel)
            _dataSource = value

            cmbChartList.Items.Clear()
            For Each item In _dataSource.ChartList
                cmbChartList.Items.Add(item.Key)
            Next
        End Set
    End Property

    'Private _tableName As String = "" 'The name of the table containing the data to plot.
    'Property TableName As String
    '    Get
    '        Return _tableName
    '    End Get
    '    Set(value As String)
    '        _tableName = value
    '        If DataSource Is Nothing Then
    '            Main.Message.AddWarning("The data source is empty." & vbCrLf)
    '        Else
    '            If DataSource.Data.Tables.Contains(TableName) Then
    '                UpdateFieldList()

    '                If DataSource.Data.Tables.Contains(TableName) Then
    '                    'If DataSource.Data.Tables(TableName).Columns.Contains("PDF") Then chkPdf.Enabled = True : chkPdf.Checked = True Else chkPdf.Enabled = False : chkPdf.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("PDF_1") Then chkPdf.Enabled = True : chkPdf.Checked = True Else chkPdf.Enabled = False : chkPdf.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("PDFLn_1") Then chkPdfLn.Enabled = True Else chkPdfLn.Enabled = False : chkPdfLn.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("PMF_1") Then chkPmf.Enabled = True : chkPmf.Checked = True Else chkPmf.Enabled = False : chkPmf.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("PMFLn_1") Then chkPmfLn.Enabled = True Else chkPmfLn.Enabled = False : chkPmfLn.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("CDF_1") Then chkCdf.Enabled = True : chkCdf.Checked = True Else chkCdf.Enabled = False : chkCdf.Checked = False
    '                    'If DataSource.Data.Tables(TableName).Columns.Contains("RevCDF_1") Then chkRevCdf.Enabled = True : chkRevCdf.Checked = True Else chkRevCdf.Enabled = False : chkRevCdf.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("RevCDF_1") Then chkRevCdf.Enabled = True : chkRevCdf.Checked = False Else chkRevCdf.Enabled = False : chkRevCdf.Checked = False 'Leave chkRevCdf unchecked by default
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("InvCDF_1") Then chkInvCdf.Enabled = True : chkInvCdf.Checked = True Else chkInvCdf.Enabled = False : chkInvCdf.Checked = False
    '                    'If DataSource.Data.Tables(TableName).Columns.Contains("InvRevCDF_1") Then chkInvRevCdf.Enabled = True : chkInvRevCdf.Checked = True Else chkInvRevCdf.Enabled = False : chkInvRevCdf.Checked = False
    '                    If DataSource.Data.Tables(TableName).Columns.Contains("InvRevCDF_1") Then chkInvRevCdf.Enabled = True : chkInvRevCdf.Checked = False Else chkInvRevCdf.Enabled = False : chkInvRevCdf.Checked = False 'Leave chkInvRevCdf unchecked by default
    '                Else
    '                    chkPdf.Enabled = False
    '                    chkPdfLn.Enabled = False
    '                    chkPmf.Enabled = False
    '                    chkPmfLn.Enabled = False
    '                    chkCdf.Enabled = False
    '                    chkInvCdf.Enabled = False
    '                End If
    '            Else
    '                Main.Message.AddWarning("A table named " & TableName & " was not found." & vbCrLf)
    '            End If
    '        End If
    '    End Set
    'End Property

    Private _contTableName As String = "" 'The name of the table containing the Continuous data to plot.
    Property ContTableName As String
        Get
            Return _contTableName
        End Get
        Set(value As String)
            _contTableName = value
            UpdateContFieldList()
            UpdateValidChartTypes()
            If DataSource.Data.Tables.Contains(ContTableName) Then
                'UpdateContFieldList()
                'UpdateValidChartTypes()

                'If DataSource.Data.Tables.Contains(ContTableName) Then
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("PDF_1") Then chkPdf.Enabled = True : chkPdf.Checked = True Else chkPdf.Enabled = False : chkPdf.Checked = False
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("PDFLn_1") Then chkPdfLn.Enabled = True Else chkPdfLn.Enabled = False : chkPdfLn.Checked = False
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("CDF_1") Then chkCdf.Enabled = True : chkCdf.Checked = True Else chkCdf.Enabled = False : chkCdf.Checked = False
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("RevCDF_1") Then chkRevCdf.Enabled = True : chkRevCdf.Checked = False Else chkRevCdf.Enabled = False : chkRevCdf.Checked = False 'Leave chkRevCdf unchecked by default
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("InvCDF_1") Then chkInvCdf.Enabled = True : chkInvCdf.Checked = True Else chkInvCdf.Enabled = False : chkInvCdf.Checked = False
                '    If DataSource.Data.Tables(ContTableName).Columns.Contains("InvRevCDF_1") Then chkInvRevCdf.Enabled = True : chkInvRevCdf.Checked = False Else chkInvRevCdf.Enabled = False : chkInvRevCdf.Checked = False 'Leave chkInvRevCdf unchecked by default
                'Else
                '    chkPdf.Enabled = False
                '    chkPdfLn.Enabled = False
                '    chkPmf.Enabled = False
                '    chkPmfLn.Enabled = False
                '    chkCdf.Enabled = False
                '    chkInvCdf.Enabled = False
                'End If
            Else
                Main.Message.AddWarning("A table named " & ContTableName & " was not found." & vbCrLf)
            End If
        End Set
    End Property

    Private _discTableName As String = "" 'The name of the table containing the Discrete data to plot.
    Property DiscTableName As String
        Get
            Return _discTableName
        End Get
        Set(value As String)
            _discTableName = value
            UpdateDiscFieldList()
            UpdateValidChartTypes()
            If DataSource.Data.Tables.Contains(DiscTableName) Then
                'UpdateDiscFieldList()
                'UpdateValidChartTypes()

                'If DataSource.Data.Tables.Contains(DiscTableName) Then
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("PMF_1") Then chkPmf.Enabled = True : chkPmf.Checked = True Else chkPmf.Enabled = False : chkPmf.Checked = False
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("PMFLn_1") Then chkPmfLn.Enabled = True Else chkPmfLn.Enabled = False : chkPmfLn.Checked = False
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("CDF_1") Then chkCdf.Enabled = True : chkCdf.Checked = True Else chkCdf.Enabled = False : chkCdf.Checked = False
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("RevCDF_1") Then chkRevCdf.Enabled = True : chkRevCdf.Checked = False Else chkRevCdf.Enabled = False : chkRevCdf.Checked = False 'Leave chkRevCdf unchecked by default
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("InvCDF_1") Then chkInvCdf.Enabled = True : chkInvCdf.Checked = True Else chkInvCdf.Enabled = False : chkInvCdf.Checked = False
                '    If DataSource.Data.Tables(DiscTableName).Columns.Contains("InvRevCDF_1") Then chkInvRevCdf.Enabled = True : chkInvRevCdf.Checked = False Else chkInvRevCdf.Enabled = False : chkInvRevCdf.Checked = False 'Leave chkInvRevCdf unchecked by default
                'Else
                '    chkPdf.Enabled = False
                '    chkPdfLn.Enabled = False
                '    chkPmf.Enabled = False
                '    chkPmfLn.Enabled = False
                '    chkCdf.Enabled = False
                '    chkInvCdf.Enabled = False
                'End If
            Else
                Main.Message.AddWarning("A table named " & DiscTableName & " was not found." & vbCrLf)
            End If
        End Set
    End Property


    Private _chartName As String = "" 'The name of the selected chart 
    Property ChartName As String
        Get
            Return _chartName
        End Get
        Set(value As String)
            If _chartName = value Then
                'The Chart Name has not changed.
            Else
                _chartName = value
                cmbChartList.SelectedIndex = cmbChartList.FindStringExact(ChartName)

                If _dataSource.ChartList.ContainsKey(_chartName) Then
                    Dim ChartXml As System.Xml.Linq.XDocument = _dataSource.ChartList(ChartName)
                    txtChartDescr.Text = ChartXml.<ChartSettings>.<Description>.Value
                    SelectChart(ChartName)
                    Modified = False
                    'UpdateAnnotationTabSettings()
                    'UpdateAnnotationDisplaySettings()
                    'Main.Message.Add("10 Chart1.ChartAreas.Count = " & frmParent.Chart1.ChartAreas.Count & vbCrLf)
                End If
            End If
        End Set
    End Property

    Private _titleNo As Integer = -1 'The selected Title number in the Chart title collection.
    Property TitleNo As Integer
        Get
            Return _titleNo
        End Get
        Set(value As Integer)
            _titleNo = value
            txtTitlesRecordNo.Text = _titleNo + 1
        End Set
    End Property

    Private _seriesNo As Integer = -1  'The selected Series number in the Chart series collection.
    Property SeriesNo As Integer
        Get
            Return _seriesNo
        End Get
        Set(value As Integer)
            _seriesNo = value
        End Set
    End Property

    Private _areaNo As Integer = -1  'The selected Area number in the Chart area collection.

    Property AreaNo As Integer
        Get
            Return _areaNo
        End Get
        Set(value As Integer)
            _areaNo = value
            txtAreaRecordNo.Text = _areaNo + 1
            'Main.Message.Add("AreaNo = " & AreaNo & vbCrLf)
        End Set
    End Property

    Private _modified As Boolean = False 'If True, the chart has been modified and should be saved.
    Property Modified As Boolean
        Get
            Return _modified
        End Get
        Set(value As Boolean)
            _modified = value
        End Set
    End Property

    Private _selDistrib As Integer = 0 'The selected Distribution index number in the collection of secondary distributions. (0 if none selected.)
    'Private _selDistrib As Integer = -1 'The selected Distribution index number in the collection of secondary distributions. (-1 if none selected.)
    Property SelDistrib As Integer
        Get
            Return _selDistrib
        End Get
        Set(value As Integer)
            _selDistrib = value
            txtSelDistrib.Text = _selDistrib
            UpdateAnnotationTabSettings()
            UpdateAnnotationDisplaySettings()
        End Set
    End Property

    Private _nDistribs As Integer = 0 'The number of Distributions in the collection of secondary distributions.
    Property NDistribs As Integer
        Get
            Return _nDistribs
        End Get
        Set(value As Integer)
            _nDistribs = value
            txtNDistribs.Text = _nDistribs
        End Set
    End Property


    Public Sub New()

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.

    End Sub



#End Region 'Properties -----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Region " Process XML files - Read and write XML files." '=====================================================================================================================================

    Private Sub SaveFormSettings()
        'Save the form settings in an XML document.
        Dim settingsData = <?xml version="1.0" encoding="utf-8"?>
                           <!---->
                           <FormSettings>
                               <Left><%= Me.Left %></Left>
                               <Top><%= Me.Top %></Top>
                               <Width><%= Me.Width %></Width>
                               <Height><%= Me.Height %></Height>
                               <!---->
                               <SelectedTabIndex><%= TabControl1.SelectedIndex %></SelectedTabIndex>
                               <SelectedTabIndex2><%= TabControl2.SelectedIndex %></SelectedTabIndex2>
                           </FormSettings>

        'Add code to include other settings to save after the comment line <!---->

        '<AutoApplyChartSize><%= chkAutoApplySize.Checked %></AutoApplyChartSize>

        Dim SettingsFileName As String = "FormSettings_" & Main.ApplicationInfo.Name & "_" & Me.Text & ".xml"
        Main.Project.SaveXmlSettings(SettingsFileName, settingsData)
    End Sub

    Private Sub RestoreFormSettings()
        'Read the form settings from an XML document.

        Dim SettingsFileName As String = "FormSettings_" & Main.ApplicationInfo.Name & "_" & Me.Text & ".xml"

        If Main.Project.SettingsFileExists(SettingsFileName) Then
            Dim Settings As System.Xml.Linq.XDocument
            Main.Project.ReadXmlSettings(SettingsFileName, Settings)

            If IsNothing(Settings) Then 'There is no Settings XML data.
                Exit Sub
            End If

            'Restore form position and size:
            If Settings.<FormSettings>.<Left>.Value <> Nothing Then Me.Left = Settings.<FormSettings>.<Left>.Value
            If Settings.<FormSettings>.<Top>.Value <> Nothing Then Me.Top = Settings.<FormSettings>.<Top>.Value
            If Settings.<FormSettings>.<Height>.Value <> Nothing Then Me.Height = Settings.<FormSettings>.<Height>.Value
            If Settings.<FormSettings>.<Width>.Value <> Nothing Then Me.Width = Settings.<FormSettings>.<Width>.Value

            'Add code to read other saved setting here:
            If Settings.<FormSettings>.<SelectedTabIndex>.Value <> Nothing Then TabControl1.SelectedIndex = Settings.<FormSettings>.<SelectedTabIndex>.Value
            If Settings.<FormSettings>.<SelectedTabIndex2>.Value <> Nothing Then TabControl2.SelectedIndex = Settings.<FormSettings>.<SelectedTabIndex2>.Value
            'If Settings.<FormSettings>.<AutoApplyChartSize>.Value <> Nothing Then chkAutoApplySize.Checked = Settings.<FormSettings>.<AutoApplyChartSize>.Value

            CheckFormPos()
        End If
    End Sub

    Private Sub CheckFormPos()
        'Check that the form can be seen on a screen.

        Dim MinWidthVisible As Integer = 192 'Minimum number of X pixels visible. The form will be moved if this many form pixels are not visible.
        Dim MinHeightVisible As Integer = 64 'Minimum number of Y pixels visible. The form will be moved if this many form pixels are not visible.

        Dim FormRect As New Rectangle(Me.Left, Me.Top, Me.Width, Me.Height)
        Dim WARect As Rectangle = Screen.GetWorkingArea(FormRect) 'The Working Area rectangle - the usable area of the screen containing the form.

        'Check if the top of the form is above the top of the Working Area:
        If Me.Top < WARect.Top Then
            Me.Top = WARect.Top
        End If

        'Check if the top of the form is too close to the bottom of the Working Area:
        If (Me.Top + MinHeightVisible) > (WARect.Top + WARect.Height) Then
            Me.Top = WARect.Top + WARect.Height - MinHeightVisible
        End If

        'Check if the left edge of the form is too close to the right edge of the Working Area:
        If (Me.Left + MinWidthVisible) > (WARect.Left + WARect.Width) Then
            Me.Left = WARect.Left + WARect.Width - MinWidthVisible
        End If

        'Check if the right edge of the form is too close to the left edge of the Working Area:
        If (Me.Left + Me.Width - MinWidthVisible) < WARect.Left Then
            Me.Left = WARect.Left - Me.Width + MinWidthVisible
        End If

    End Sub

    Protected Overrides Sub WndProc(ByRef m As Message) 'Save the form settings before the form is minimised:
        If m.Msg = &H112 Then 'SysCommand
            If m.WParam.ToInt32 = &HF020 Then 'Form is being minimised
                SaveFormSettings()
            End If
        End If
        MyBase.WndProc(m)
    End Sub

#End Region 'Process XML Files ----------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Form Display Methods - Code used to display this form." '============================================================================================================================

    Private Sub Form_Load(sender As Object, e As EventArgs) Handles Me.Load
        RestoreFormSettings()   'Restore the form settings

        'myChart = myParent.Controls("Chart1")

        'myChart = frmParent.Chart1
        'myChart.SuppressExceptions = True
        myParent.Chart1.SuppressExceptions = True

        'UpdateFieldList() 'This populates the items in cboField
        UpdateContFieldList()
        UpdateDiscFieldList()

        'Set up the Continuous Series grid: -------------------------------------------------------------
        'DataGridView1.ColumnCount = 9
        dgvSeries.ColumnCount = 10

        dgvSeries.Columns(0).HeaderText = "Series Name"

        'UPDATE 10/9/22
        Dim cboCont As New DataGridViewComboBoxColumn 'Used for displaying the series continuity
        cboCont.Items.Add("Continuous")
        cboCont.Items.Add("Discrete")
        dgvSeries.Columns.Insert(1, cboCont) 'Insert the combo box column used to display the series continuity
        dgvSeries.Columns(1).HeaderText = "Continuity"
        dgvSeries.Columns(1).ReadOnly = True


        cboType.Items.Clear()
        cboType.Items.Add("Point")
        cboType.Items.Add("Line")
        cboType.Items.Add("Bar") 'A Bar chart can only be combined with a Bar or Stacked Bar chart. 'A Bar chart can only be combined with a Bar or Stacked Bar chart.
        cboType.Items.Add("Column")

        'dgvSeries.Columns.Insert(1, cboType) 'Insert the combo box column used to select the type of chart to plot.
        dgvSeries.Columns.Insert(2, cboType) 'Insert the combo box column used to select the type of chart to plot.
        dgvSeries.Columns(2).HeaderText = "Chart Type"

        'dgvSeries.Columns.Insert(2, cboArea)
        dgvSeries.Columns.Insert(3, cboArea)
        dgvSeries.Columns(3).HeaderText = "Chart Area"

        'dgvSeries.Columns.Insert(3, cboXField) 'Insert the combo box column used to select the data field to plot.
        dgvSeries.Columns.Insert(4, cboXField) 'Insert the combo box column used to select the data field to plot.
        dgvSeries.Columns(4).HeaderText = "X Field Name"

        Dim cboXAxis As New DataGridViewComboBoxColumn 'Used for selecting the X Axis to use (X or X2)
        cboXAxis.Items.Add("Primary")
        cboXAxis.Items.Add("Secondary")
        'dgvSeries.Columns.Insert(4, cboXAxis) 'Insert the combo box column used to select the X Axis to use.
        dgvSeries.Columns.Insert(5, cboXAxis) 'Insert the combo box column used to select the X Axis to use.
        dgvSeries.Columns(5).HeaderText = "X Axis Type"

        Dim cboXAxisValueType As New DataGridViewComboBoxColumn 'Used for selecting the X Axis value type
        For Each valueType In [Enum].GetNames(GetType(DataVisualization.Charting.ChartValueType))
            cboXAxisValueType.Items.Add(valueType)
        Next
        'dgvSeries.Columns.Insert(5, cboXAxisValueType) 'Insert the combo box column used to select the X Axis value type
        dgvSeries.Columns.Insert(6, cboXAxisValueType) 'Insert the combo box column used to select the X Axis value type
        dgvSeries.Columns(6).HeaderText = "X Value Type"

        'dgvSeries.Columns.Insert(6, cboYField) 'Insert the combo box column used to select the data field to plot.
        dgvSeries.Columns.Insert(7, cboYField) 'Insert the combo box column used to select the data field to plot.
        dgvSeries.Columns(7).HeaderText = "Y Field Name"

        Dim cboYAxis As New DataGridViewComboBoxColumn 'Used for selecting the Y Axis to use (Y or Y2)
        cboYAxis.Items.Add("Primary")
        cboYAxis.Items.Add("Secondary")
        'dgvSeries.Columns.Insert(7, cboYAxis) 'Insert the combo box column used to select the X Axis to use.
        dgvSeries.Columns.Insert(8, cboYAxis) 'Insert the combo box column used to select the X Axis to use.
        dgvSeries.Columns(8).HeaderText = "Y Axis Type"

        Dim cboYAxisValueType As New DataGridViewComboBoxColumn 'Used for selecting the Y Axis value type
        For Each valueType In [Enum].GetNames(GetType(DataVisualization.Charting.ChartValueType))
            cboYAxisValueType.Items.Add(valueType)
        Next
        'dgvSeries.Columns.Insert(8, cboYAxisValueType) 'Insert the combo box column used to select the Y Axis value type
        dgvSeries.Columns.Insert(9, cboYAxisValueType) 'Insert the combo box column used to select the Y Axis value type
        dgvSeries.Columns(9).HeaderText = "Y Value Type"

        'UPDATE 26/6/22
        'dgvSeries.Columns(9).HeaderText = "Legend Text"
        dgvSeries.Columns(10).HeaderText = "Legend Text"



        Dim cboMarkerFill As New DataGridViewComboBoxColumn 'Used for selecting a transparent marker (No Fill)
        cboMarkerFill.Items.Add("Yes")
        cboMarkerFill.Items.Add("No")
        'DataGridView1.Columns.Insert(9, cboMarkerFill) 'Insert the combo box column used to select the Marker Fill
        'dgvSeries.Columns.Insert(10, cboMarkerFill) 'Insert the combo box column used to select the Marker Fill
        dgvSeries.Columns.Insert(11, cboMarkerFill) 'Insert the combo box column used to select the Marker Fill
        'dgvSeries.Columns(10).HeaderText = "Marker Fill"
        dgvSeries.Columns(11).HeaderText = "Marker Fill"

        'dgvSeries.Columns(11).HeaderText = "Marker Color"
        dgvSeries.Columns(12).HeaderText = "Marker Color"

        dgvSeries.Columns(13).HeaderText = "Border Color"

        dgvSeries.Columns(14).HeaderText = "Border Width"

        Dim cboMarkerStyle As New DataGridViewComboBoxColumn 'Used for selecting the Marker Style
        For Each marker In [Enum].GetNames(GetType(DataVisualization.Charting.MarkerStyle))
            cboMarkerStyle.Items.Add(marker)
        Next
        dgvSeries.Columns.Insert(15, cboMarkerStyle)
        dgvSeries.Columns(15).HeaderText = "Marker Style"

        dgvSeries.Columns(16).HeaderText = "Marker Size"

        dgvSeries.Columns(17).HeaderText = "Marker Step"

        dgvSeries.Columns(18).HeaderText = "Line Color"

        dgvSeries.Columns(19).HeaderText = "Line Width"

        dgvSeries.Columns(20).HeaderText = "Tool Tip"

        'Add in initial row:
        Dim Field1 As String '= cboXField.Items(0)
        Dim Field2 As String '= cboYField.Items(1)
        If cboXField.Items.Count > 0 Then
            Field1 = cboXField.Items(0)
        Else
            Field1 = ""
        End If
        If cboYField.Items.Count > 1 Then
            Field2 = cboYField.Items(1)
        Else
            Field2 = ""
        End If

        'dgvSeries.Rows.Add("Series1", "Point", "ChartArea1", Field1, "X", "", Field2, "Y", "", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0")
        dgvSeries.Rows.Add("Series1", "Continuous", "Point", "ChartArea1", Field1, "X", "", Field2, "Y", "", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0")

        'DataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
        'DataGridView1.AutoResizeColumns()

        dgvSeries.AllowUserToAddRows = False


        'NOTE: Continuous and Discrete series are now specified on the dgvSeries datagridview.
        ''Set up the Discrete Series grid: -------------------------------------------------------------
        'dgvDiscrete.ColumnCount = 10

        'dgvDiscrete.Columns(0).HeaderText = "Series Name"

        'cboDiscType.Items.Clear()
        'cboDiscType.Items.Add("Point")
        'cboDiscType.Items.Add("Line")
        'cboDiscType.Items.Add("Bar") 'A Bar chart can only be combined with a Bar or Stacked Bar chart. 'A Bar chart can only be combined with a Bar or Stacked Bar chart.
        'cboDiscType.Items.Add("Column")

        'dgvDiscrete.Columns.Insert(1, cboDiscType) 'Insert the combo box column used to select the type of chart to plot.
        'dgvDiscrete.Columns(1).HeaderText = "Chart Type"

        'dgvDiscrete.Columns.Insert(2, cboDiscArea)
        'dgvDiscrete.Columns(2).HeaderText = "Chart Area"

        'dgvDiscrete.Columns.Insert(3, cboDiscXField) 'Insert the combo box column used to select the data field to plot.
        'dgvDiscrete.Columns(3).HeaderText = "X Field Name"

        'Dim cboDiscXAxis As New DataGridViewComboBoxColumn 'Used for selecting the X Axis to use (X or X2)
        'cboDiscXAxis.Items.Add("Primary")
        'cboDiscXAxis.Items.Add("Secondary")
        'dgvDiscrete.Columns.Insert(4, cboDiscXAxis) 'Insert the combo box column used to select the X Axis to use.
        'dgvDiscrete.Columns(4).HeaderText = "X Axis Type"

        'Dim cboDiscXAxisValueType As New DataGridViewComboBoxColumn 'Used for selecting the X Axis value type
        'For Each valueType In [Enum].GetNames(GetType(DataVisualization.Charting.ChartValueType))
        '    cboDiscXAxisValueType.Items.Add(valueType)
        'Next
        'dgvDiscrete.Columns.Insert(5, cboDiscXAxisValueType) 'Insert the combo box column used to select the X Axis value type
        'dgvDiscrete.Columns(5).HeaderText = "X Value Type"

        'dgvDiscrete.Columns.Insert(6, cboDiscYField) 'Insert the combo box column used to select the data field to plot.
        'dgvDiscrete.Columns(6).HeaderText = "Y Field Name"

        'Dim cboDiscYAxis As New DataGridViewComboBoxColumn 'Used for selecting the Y Axis to use (Y or Y2)
        'cboDiscYAxis.Items.Add("Primary")
        'cboDiscYAxis.Items.Add("Secondary")
        'dgvDiscrete.Columns.Insert(7, cboDiscYAxis) 'Insert the combo box column used to select the X Axis to use.
        'dgvDiscrete.Columns(7).HeaderText = "Y Axis Type"

        'Dim cboDiscYAxisValueType As New DataGridViewComboBoxColumn 'Used for selecting the Y Axis value type
        'For Each valueType In [Enum].GetNames(GetType(DataVisualization.Charting.ChartValueType))
        '    cboDiscYAxisValueType.Items.Add(valueType)
        'Next
        'dgvDiscrete.Columns.Insert(8, cboDiscYAxisValueType) 'Insert the combo box column used to select the Y Axis value type
        'dgvDiscrete.Columns(8).HeaderText = "Y Value Type"

        ''UPDATE 26/6/22
        'dgvDiscrete.Columns(9).HeaderText = "Legend Text"



        'Dim cboDiscMarkerFill As New DataGridViewComboBoxColumn 'Used for selecting a transparent marker (No Fill)
        'cboDiscMarkerFill.Items.Add("Yes")
        'cboDiscMarkerFill.Items.Add("No")
        ''DataGridView1.Columns.Insert(9, cboMarkerFill) 'Insert the combo box column used to select the Marker Fill
        'dgvDiscrete.Columns.Insert(10, cboDiscMarkerFill) 'Insert the combo box column used to select the Marker Fill
        'dgvDiscrete.Columns(10).HeaderText = "Marker Fill"

        'dgvDiscrete.Columns(11).HeaderText = "Marker Color"

        'dgvDiscrete.Columns(12).HeaderText = "Border Color"

        'dgvDiscrete.Columns(13).HeaderText = "Border Width"

        'Dim cboDiscMarkerStyle As New DataGridViewComboBoxColumn 'Used for selecting the Marker Style
        'For Each marker In [Enum].GetNames(GetType(DataVisualization.Charting.MarkerStyle))
        '    cboDiscMarkerStyle.Items.Add(marker)
        'Next
        'dgvDiscrete.Columns.Insert(14, cboDiscMarkerStyle)
        'dgvDiscrete.Columns(14).HeaderText = "Marker Style"

        'dgvDiscrete.Columns(15).HeaderText = "Marker Size"

        'dgvDiscrete.Columns(16).HeaderText = "Marker Step"

        'dgvDiscrete.Columns(17).HeaderText = "Line Color"

        'dgvDiscrete.Columns(18).HeaderText = "Line Width"

        'dgvDiscrete.Columns(19).HeaderText = "Tool Tip"

        ''Add in initial row:
        'Dim DiscField1 As String '= cboXField.Items(0)
        'Dim DiscField2 As String '= cboYField.Items(1)
        'If cboDiscXField.Items.Count > 0 Then
        '    DiscField1 = cboDiscXField.Items(0)
        'Else
        '    DiscField1 = ""
        'End If
        'If cboDiscYField.Items.Count > 1 Then
        '    DiscField2 = cboDiscYField.Items(1)
        'Else
        '    DiscField2 = ""
        'End If

        'dgvDiscrete.Rows.Add("Series1", "Point", "ChartArea1", DiscField1, "X", "", DiscField2, "Y", "", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0")

        ''DataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
        ''DataGridView1.AutoResizeColumns()

        'dgvDiscrete.AllowUserToAddRows = False


        '  Titles Tab
        txtTitlesRecordNo.Text = "0"
        txtNTitlesRecords.Text = "0"

        Dim items As Array
        items = System.Enum.GetNames(GetType(ContentAlignment))
        Dim item As String
        For Each item In items
            cmbAlignment.Items.Add(item)
        Next

        items = System.Enum.GetNames(GetType(DataVisualization.Charting.TextOrientation))
        For Each item In items
            cmbOrientation.Items.Add(item)
        Next

        '  Areas Tab
        txtAreaRecordNo.Text = "0"
        txtNAreaRecords.Text = "0"

        cmbXAxisTitleAlignment.Items.Add("Center")
        cmbXAxisTitleAlignment.Items.Add("Far")
        cmbXAxisTitleAlignment.Items.Add("Near")

        cmbX2AxisTitleAlignment.Items.Add("Center")
        cmbX2AxisTitleAlignment.Items.Add("Far")
        cmbX2AxisTitleAlignment.Items.Add("Near")

        cmbYAxisTitleAlignment.Items.Add("Center")
        cmbYAxisTitleAlignment.Items.Add("Far")
        cmbYAxisTitleAlignment.Items.Add("Near")

        cmbY2AxisTitleAlignment.Items.Add("Center")
        cmbY2AxisTitleAlignment.Items.Add("Far")
        cmbY2AxisTitleAlignment.Items.Add("Near")

        cmbLegendDocking.Items.Add("Bottom")
        cmbLegendDocking.Items.Add("Left")
        cmbLegendDocking.Items.Add("Right")
        cmbLegendDocking.Items.Add("Top")

        RefreshChartList()

        'txtHeight.Text = myParent.Height
        'txtWidth.Text = myParent.Width
        'txtTop.Text = myParent.Top
        'txtLeft.Text = myParent.Left
        txtHeight.Text = myParent.Height
        txtWidth.Text = myParent.Width
        txtTop.Text = myParent.Top
        txtLeft.Text = myParent.Left

        'Set up the XmlHtmDisplay1 control:
        XmlHtmDisplay1.WordWrap = False

        XmlHtmDisplay1.Settings.ClearAllTextTypes()
        'Default message display settings:
        XmlHtmDisplay1.Settings.AddNewTextType("Warning")
        XmlHtmDisplay1.Settings.TextType("Warning").FontName = "Arial"
        XmlHtmDisplay1.Settings.TextType("Warning").Bold = True
        XmlHtmDisplay1.Settings.TextType("Warning").Color = Color.Red
        XmlHtmDisplay1.Settings.TextType("Warning").PointSize = 12

        XmlHtmDisplay1.Settings.AddNewTextType("Default")
        XmlHtmDisplay1.Settings.TextType("Default").FontName = "Arial"
        XmlHtmDisplay1.Settings.TextType("Default").Bold = False
        XmlHtmDisplay1.Settings.TextType("Default").Color = Color.Black
        XmlHtmDisplay1.Settings.TextType("Default").PointSize = 10

        XmlHtmDisplay1.Settings.UpdateFontIndexes()
        XmlHtmDisplay1.Settings.UpdateColorIndexes()

        XmlHtmDisplay1.AllowDrop = True

        'Set up the New Chart Displays checkboxes:
        chkPdf.Checked = True
        chkPdfLn.Checked = False
        chkPmf.Checked = True
        chkPmfLn.Checked = False
        chkCdf.Checked = True
        chkRevCdf.Checked = False
        'chkInvCdf.Checked = True
        chkInvCdf.Checked = False
        chkInvRevCdf.Checked = False

        'rbAll.Checked = True
        rbColorDistrib.Checked = True

        'Set up Annotation tab: 
        NDistribs = Main.Distribution.Info.Count
        txtNDistribs.Text = NDistribs
        If NDistribs = 0 Then
            'SelDistrib = 0
            _selDistrib = 0
            txtSelDistrib.Text = "0"
        Else
            'SelDistrib = 1
            _selDistrib = 1
            txtSelDistrib.Text = "1"
            SelectedDistrib = Main.Distribution.Info(SelDistrib - 1)
            'LoadParamInfo()
            'UpdateAnnotationTabSettings()
        End If

        'dgvPointAnnot.ColumnCount = 7
        'dgvPointAnnot.ColumnCount = 10

        dgvPointAnnot.ColumnCount = 7

        Dim chkShow As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(0, chkShow)
        dgvPointAnnot.Columns(0).HeaderText = "Show"
        dgvPointAnnot.Columns(0).Width = 40

        Dim chkAnnotPdf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(1, chkAnnotPdf)
        'dgvPointAnnot.Columns(0).HeaderText = "PDF Chart"
        dgvPointAnnot.Columns(1).HeaderText = "PDF"
        dgvPointAnnot.Columns(1).Width = 40

        Dim chkAnnotPdfLn As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(2, chkAnnotPdfLn)
        dgvPointAnnot.Columns(2).HeaderText = "PDFLn"
        dgvPointAnnot.Columns(2).Width = 45

        Dim chkAnnotPmf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(3, chkAnnotPmf)
        dgvPointAnnot.Columns(3).HeaderText = "PMF"
        dgvPointAnnot.Columns(3).Width = 40

        Dim chkAnnotPmfLn As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(4, chkAnnotPmfLn)
        dgvPointAnnot.Columns(4).HeaderText = "PMFLn"
        dgvPointAnnot.Columns(4).Width = 45

        Dim chkAnnotCdf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(5, chkAnnotCdf)
        dgvPointAnnot.Columns(5).HeaderText = "CDF"
        dgvPointAnnot.Columns(5).Width = 40

        Dim chkAnnotRevCdf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(6, chkAnnotRevCdf)
        dgvPointAnnot.Columns(6).HeaderText = "Rev CDF"
        dgvPointAnnot.Columns(6).Width = 40

        Dim chkAnnotInvCdf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(7, chkAnnotInvCdf)
        dgvPointAnnot.Columns(7).HeaderText = "Inv CDF"
        dgvPointAnnot.Columns(7).Width = 40

        Dim chkAnnotInvRevCdf As New DataGridViewCheckBoxColumn
        dgvPointAnnot.Columns.Insert(8, chkAnnotInvRevCdf)
        dgvPointAnnot.Columns(8).HeaderText = "Inv Rev CDF"
        dgvPointAnnot.Columns(8).Width = 55

        Dim cboAnnotType As New DataGridViewComboBoxColumn
        cboAnnotType.Items.Add("Probability <=")
        cboAnnotType.Items.Add("Probability >")
        cboAnnotType.Items.Add("Random Variable Value")
        cboAnnotType.Items.Add("Mean")
        cboAnnotType.Items.Add("Median")
        cboAnnotType.Items.Add("Mode")
        cboAnnotType.Items.Add("Standard Deviation")
        cboAnnotType.Items.Add("User Defined Value 1")
        cboAnnotType.Items.Add("User Defined Value 2")
        dgvPointAnnot.Columns.Insert(9, cboAnnotType)
        dgvPointAnnot.Columns(9).HeaderText = "Annotation Type"
        dgvPointAnnot.Columns(9).Width = 140

        dgvPointAnnot.Columns(10).HeaderText = "Parameter"
        dgvPointAnnot.Columns(10).Width = 80
        dgvPointAnnot.Columns(11).HeaderText = "Label"
        dgvPointAnnot.Columns(11).Width = 110

        'dgvPointAnnot.Columns(8).HeaderText = "Probability"
        'dgvPointAnnot.Columns(8).Width = 80

        dgvPointAnnot.Columns(12).HeaderText = "CDF Probability"
        dgvPointAnnot.Columns(12).Width = 110
        dgvPointAnnot.Columns(13).HeaderText = "Rev CDF Probability"
        dgvPointAnnot.Columns(13).Width = 110

        'dgvPointAnnot.Columns(9).HeaderText = "CDF"
        'dgvPointAnnot.Columns(9).Width = 80
        'dgvPointAnnot.Columns(10).HeaderText = "Rev CDF"
        'dgvPointAnnot.Columns(10).Width = 80
        dgvPointAnnot.Columns(14).HeaderText = "Random Variable Value"
        dgvPointAnnot.Columns(14).Width = 110
        dgvPointAnnot.Columns(15).HeaderText = "Probability Density"
        dgvPointAnnot.Columns(15).Width = 110

        Dim cboAlignment As New DataGridViewComboBoxColumn
        For Each align As ContentAlignment In System.Enum.GetValues(GetType(ContentAlignment))
            cboAlignment.Items.Add(align.ToString)
        Next
        dgvPointAnnot.Columns.Insert(16, cboAlignment)
        dgvPointAnnot.Columns(16).HeaderText = "Anchor Alignment"
        dgvPointAnnot.Columns(16).Width = 110

        'dgvPointAnnot.Columns(16).HeaderText = "Description"
        'dgvPointAnnot.Columns(16).Width = 240
        'dgvPointAnnot.Columns(16).DefaultCellStyle.WrapMode = DataGridViewTriState.True
        dgvPointAnnot.Columns(17).HeaderText = "Description"
        dgvPointAnnot.Columns(17).Width = 240
        dgvPointAnnot.Columns(17).DefaultCellStyle.WrapMode = DataGridViewTriState.True


        'dgvPointDisplay.ColumnCount = 9
        dgvPointDisplay.ColumnCount = 10
        dgvPointDisplay.Columns(0).HeaderText = "Chart"
        dgvPointDisplay.Columns(0).Width = 80

        'dgvPointDisplay.Rows.Add(5)
        dgvPointDisplay.Rows.Add(8)
        dgvPointDisplay.Rows(0).Cells(0).Value = "PDF"
        dgvPointDisplay.Rows(1).Cells(0).Value = "PDFLn"
        dgvPointDisplay.Rows(2).Cells(0).Value = "PMF"
        dgvPointDisplay.Rows(3).Cells(0).Value = "PMFLn"
        dgvPointDisplay.Rows(4).Cells(0).Value = "CDF"
        dgvPointDisplay.Rows(5).Cells(0).Value = "Rev CDF"
        dgvPointDisplay.Rows(6).Cells(0).Value = "Inv CDF"
        dgvPointDisplay.Rows(7).Cells(0).Value = "Inv Rev CDF"
        dgvPointDisplay.AllowUserToAddRows = False

        Dim chkAnnotLine As New DataGridViewCheckBoxColumn
        dgvPointDisplay.Columns.Insert(1, chkAnnotLine)
        dgvPointDisplay.Columns(1).HeaderText = "Line"
        dgvPointDisplay.Columns(1).Width = 40
        dgvPointDisplay.Rows(0).Cells(1).Value = True
        dgvPointDisplay.Rows(1).Cells(1).Value = True
        dgvPointDisplay.Rows(2).Cells(1).Value = True
        dgvPointDisplay.Rows(3).Cells(1).Value = True
        dgvPointDisplay.Rows(4).Cells(1).Value = True
        dgvPointDisplay.Rows(5).Cells(1).Value = True
        dgvPointDisplay.Rows(6).Cells(1).Value = True
        dgvPointDisplay.Rows(7).Cells(1).Value = True


        dgvPointDisplay.Columns(2).HeaderText = "Color"
        dgvPointDisplay.Columns(2).Width = 50
        dgvPointDisplay.Rows(0).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(1).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(2).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(3).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(4).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(5).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(6).Cells(2).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(7).Cells(2).Style.BackColor = Color.Orange

        dgvPointDisplay.Columns(3).HeaderText = "Thickness"
        dgvPointDisplay.Columns(3).Width = 60
        dgvPointDisplay.Columns(3).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(3).Value = 2
        dgvPointDisplay.Rows(1).Cells(3).Value = 2
        dgvPointDisplay.Rows(2).Cells(3).Value = 2
        dgvPointDisplay.Rows(3).Cells(3).Value = 2
        dgvPointDisplay.Rows(4).Cells(3).Value = 2
        dgvPointDisplay.Rows(5).Cells(3).Value = 2
        dgvPointDisplay.Rows(6).Cells(3).Value = 2
        dgvPointDisplay.Rows(7).Cells(3).Value = 2

        Dim chkAnnotCircle As New DataGridViewCheckBoxColumn
        dgvPointDisplay.Columns.Insert(4, chkAnnotCircle)
        dgvPointDisplay.Columns(4).HeaderText = "Circle"
        dgvPointDisplay.Columns(4).Width = 40
        dgvPointDisplay.Rows(0).Cells(4).Value = True
        dgvPointDisplay.Rows(1).Cells(4).Value = True
        dgvPointDisplay.Rows(2).Cells(4).Value = True
        dgvPointDisplay.Rows(3).Cells(4).Value = True
        dgvPointDisplay.Rows(4).Cells(4).Value = True
        dgvPointDisplay.Rows(5).Cells(4).Value = True
        dgvPointDisplay.Rows(6).Cells(4).Value = True
        dgvPointDisplay.Rows(7).Cells(4).Value = True

        dgvPointDisplay.Columns(5).HeaderText = "Color"
        dgvPointDisplay.Columns(5).Width = 50
        dgvPointDisplay.Rows(0).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(1).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(2).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(3).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(4).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(5).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(6).Cells(5).Style.BackColor = Color.Orange
        dgvPointDisplay.Rows(7).Cells(5).Style.BackColor = Color.Orange

        dgvPointDisplay.Columns(6).HeaderText = "Thickness"
        dgvPointDisplay.Columns(6).Width = 60
        dgvPointDisplay.Columns(6).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(6).Value = 1
        dgvPointDisplay.Rows(1).Cells(6).Value = 1
        dgvPointDisplay.Rows(2).Cells(6).Value = 1
        dgvPointDisplay.Rows(3).Cells(6).Value = 1
        dgvPointDisplay.Rows(4).Cells(6).Value = 1
        dgvPointDisplay.Rows(5).Cells(6).Value = 1
        dgvPointDisplay.Rows(6).Cells(6).Value = 1
        dgvPointDisplay.Rows(7).Cells(6).Value = 1

        dgvPointDisplay.Columns(7).HeaderText = "Size"
        dgvPointDisplay.Columns(7).Width = 50
        dgvPointDisplay.Columns(7).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(7).Value = 3
        dgvPointDisplay.Rows(1).Cells(7).Value = 3
        dgvPointDisplay.Rows(2).Cells(7).Value = 3
        dgvPointDisplay.Rows(3).Cells(7).Value = 3
        dgvPointDisplay.Rows(4).Cells(7).Value = 3
        dgvPointDisplay.Rows(5).Cells(7).Value = 3
        dgvPointDisplay.Rows(6).Cells(7).Value = 3
        dgvPointDisplay.Rows(7).Cells(7).Value = 3

        Dim chkAnnotText As New DataGridViewCheckBoxColumn
        dgvPointDisplay.Columns.Insert(8, chkAnnotText)
        dgvPointDisplay.Columns(8).HeaderText = "Text"
        dgvPointDisplay.Columns(8).Width = 40
        dgvPointDisplay.Rows(0).Cells(8).Value = True
        dgvPointDisplay.Rows(1).Cells(8).Value = True
        dgvPointDisplay.Rows(2).Cells(8).Value = True
        dgvPointDisplay.Rows(3).Cells(8).Value = True
        dgvPointDisplay.Rows(4).Cells(8).Value = True
        dgvPointDisplay.Rows(5).Cells(8).Value = True
        dgvPointDisplay.Rows(6).Cells(8).Value = True
        dgvPointDisplay.Rows(7).Cells(8).Value = True

        dgvPointDisplay.Columns(9).HeaderText = "Font"
        dgvPointDisplay.Columns(9).Width = 60
        dgvPointDisplay.Columns(9).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(1).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(2).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(3).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(4).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(5).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(6).Cells(9).Value = "Font"
        dgvPointDisplay.Rows(7).Cells(9).Value = "Font"

        dgvPointDisplay.Columns(10).HeaderText = "Color"
        dgvPointDisplay.Columns(10).Width = 50
        dgvPointDisplay.Rows(0).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(1).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(2).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(3).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(4).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(5).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(6).Cells(10).Style.BackColor = Color.Black
        dgvPointDisplay.Rows(7).Cells(10).Style.BackColor = Color.Black

        'Size is now part of Font
        'dgvPointDisplay.Columns(11).HeaderText = "Size"
        'dgvPointDisplay.Columns(11).Width = 50
        'dgvPointDisplay.Columns(11).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        'dgvPointDisplay.Rows(0).Cells(11).Value = 10
        'dgvPointDisplay.Rows(1).Cells(11).Value = 10
        'dgvPointDisplay.Rows(2).Cells(11).Value = 10
        'dgvPointDisplay.Rows(3).Cells(11).Value = 10
        'dgvPointDisplay.Rows(4).Cells(11).Value = 10

        Dim chkAnnotProbValue As New DataGridViewCheckBoxColumn
        dgvPointDisplay.Columns.Insert(11, chkAnnotProbValue)
        'dgvPointDisplay.Columns(11).HeaderText = "Show Value"
        dgvPointDisplay.Columns(11).HeaderText = "Show Prob Value"
        dgvPointDisplay.Columns(11).Width = 70
        dgvPointDisplay.Rows(0).Cells(11).Value = True
        dgvPointDisplay.Rows(1).Cells(11).Value = True
        dgvPointDisplay.Rows(2).Cells(11).Value = True
        dgvPointDisplay.Rows(3).Cells(11).Value = True
        dgvPointDisplay.Rows(4).Cells(11).Value = True
        dgvPointDisplay.Rows(5).Cells(11).Value = True
        dgvPointDisplay.Rows(6).Cells(11).Value = True
        dgvPointDisplay.Rows(7).Cells(11).Value = True

        dgvPointDisplay.Columns(12).HeaderText = "Format"
        dgvPointDisplay.Columns(12).Width = 50
        dgvPointDisplay.Columns(12).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(1).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(2).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(3).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(4).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(5).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(6).Cells(12).Value = "N4"
        dgvPointDisplay.Rows(7).Cells(12).Value = "N4"

        Dim chkAnnotRVValue As New DataGridViewCheckBoxColumn
        dgvPointDisplay.Columns.Insert(13, chkAnnotRVValue)
        dgvPointDisplay.Columns(13).HeaderText = "Show RV Value"
        dgvPointDisplay.Columns(13).Width = 70
        dgvPointDisplay.Rows(0).Cells(13).Value = True
        dgvPointDisplay.Rows(1).Cells(13).Value = True
        dgvPointDisplay.Rows(2).Cells(13).Value = True
        dgvPointDisplay.Rows(3).Cells(13).Value = True
        dgvPointDisplay.Rows(4).Cells(13).Value = True
        dgvPointDisplay.Rows(5).Cells(13).Value = True
        dgvPointDisplay.Rows(6).Cells(13).Value = True
        dgvPointDisplay.Rows(7).Cells(13).Value = True

        dgvPointDisplay.Columns(14).HeaderText = "Format"
        dgvPointDisplay.Columns(14).Width = 50
        dgvPointDisplay.Columns(14).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        dgvPointDisplay.Rows(0).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(1).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(2).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(3).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(4).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(5).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(6).Cells(14).Value = "N4"
        dgvPointDisplay.Rows(7).Cells(14).Value = "N4"


        'dgvAreaAnnot.ColumnCount = 6

        'dgvAreaAnnot.Columns(0).HeaderText = "From Value"
        'dgvAreaAnnot.Columns(0).Width = 80
        'dgvAreaAnnot.Columns(1).HeaderText = "To Value"
        'dgvAreaAnnot.Columns(1).Width = 80
        'dgvAreaAnnot.Columns(2).HeaderText = "Probability"
        'dgvAreaAnnot.Columns(2).Width = 80
        'dgvAreaAnnot.Columns(3).HeaderText = "Color"
        'dgvAreaAnnot.Columns(3).Width = 80
        'dgvAreaAnnot.Columns(4).HeaderText = "Thickness"
        'dgvAreaAnnot.Columns(4).Width = 80
        'dgvAreaAnnot.Columns(5).HeaderText = "Density"
        'dgvAreaAnnot.Columns(5).Width = 80

        'dgvAreaAnnot.ColumnCount = 10
        dgvAreaAnnot.ColumnCount = 10

        Dim chkShowArea As New DataGridViewCheckBoxColumn
        dgvAreaAnnot.Columns.Insert(0, chkShowArea)
        dgvAreaAnnot.Columns(0).HeaderText = "Show"
        dgvAreaAnnot.Columns(0).Width = 40

        Dim cboFromAnnotType As New DataGridViewComboBoxColumn
        cboFromAnnotType.Items.Add("Minimum")
        cboFromAnnotType.Items.Add("Probability <=")
        cboFromAnnotType.Items.Add("Probability >")
        cboFromAnnotType.Items.Add("Random Variable Value")
        cboFromAnnotType.Items.Add("Mean")
        cboFromAnnotType.Items.Add("Median")
        cboFromAnnotType.Items.Add("Mode")
        cboFromAnnotType.Items.Add("Standard Deviation")
        cboFromAnnotType.Items.Add("User Defined Value 1")
        cboFromAnnotType.Items.Add("User Defined Value 2")
        dgvAreaAnnot.Columns.Insert(1, cboFromAnnotType)
        dgvAreaAnnot.Columns(1).HeaderText = "From Value Type"
        dgvAreaAnnot.Columns(1).Width = 140

        dgvAreaAnnot.Columns(2).HeaderText = "From Value Parameter"
        dgvAreaAnnot.Columns(2).Width = 80
        dgvAreaAnnot.Columns(3).HeaderText = "From Value"
        dgvAreaAnnot.Columns(3).Width = 80
        dgvAreaAnnot.Columns(4).HeaderText = "From Value CDF"
        dgvAreaAnnot.Columns(4).Width = 110

        Dim cboToAnnotType As New DataGridViewComboBoxColumn
        cboToAnnotType.Items.Add("Maximum")
        cboToAnnotType.Items.Add("Probability <=")
        cboToAnnotType.Items.Add("Probability >")
        cboToAnnotType.Items.Add("Random Variable Value")
        cboToAnnotType.Items.Add("Mean")
        cboToAnnotType.Items.Add("Median")
        cboToAnnotType.Items.Add("Mode")
        cboToAnnotType.Items.Add("Standard Deviation")
        cboToAnnotType.Items.Add("User Defined Value 1")
        cboToAnnotType.Items.Add("User Defined Value 2")
        dgvAreaAnnot.Columns.Insert(5, cboToAnnotType)
        dgvAreaAnnot.Columns(5).HeaderText = "To Value Type"
        dgvAreaAnnot.Columns(5).Width = 140

        dgvAreaAnnot.Columns(6).HeaderText = "To Value Parameter"
        dgvAreaAnnot.Columns(6).Width = 80
        dgvAreaAnnot.Columns(7).HeaderText = "To Value"
        dgvAreaAnnot.Columns(7).Width = 80
        dgvAreaAnnot.Columns(8).HeaderText = "To Value CDF"
        dgvAreaAnnot.Columns(8).Width = 110

        dgvAreaAnnot.Columns(9).HeaderText = "Probability"
        dgvAreaAnnot.Columns(9).Width = 110
        dgvAreaAnnot.Columns(10).HeaderText = "Color"
        dgvAreaAnnot.Columns(10).Width = 80
        dgvAreaAnnot.Columns(11).HeaderText = "Thickness"
        dgvAreaAnnot.Columns(11).Width = 80
        dgvAreaAnnot.Columns(12).HeaderText = "Density"
        dgvAreaAnnot.Columns(12).Width = 80

        Dim cboIntensity As New DataGridViewComboBoxColumn
        'cboIntensity.Items.Add("5")
        cboIntensity.Items.Add("10")
        cboIntensity.Items.Add("20")
        cboIntensity.Items.Add("25")
        cboIntensity.Items.Add("30")
        cboIntensity.Items.Add("40")
        cboIntensity.Items.Add("50")
        cboIntensity.Items.Add("60")
        cboIntensity.Items.Add("70")
        cboIntensity.Items.Add("75")
        cboIntensity.Items.Add("80")
        cboIntensity.Items.Add("90")
        cboIntensity.Items.Add("95")
        cboIntensity.Items.Add("100")
        dgvAreaAnnot.Columns.Insert(13, cboIntensity)
        dgvAreaAnnot.Columns(13).HeaderText = "Intensity"
        dgvAreaAnnot.Columns(13).Width = 80






        'Set the default User Defined Value 1 and User Defined Value 2:
        hsUserDef1.Minimum = 1
        hsUserDef1.LargeChange = 10
        hsUserDef1.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef1.LargeChange - 1
        txtUserDef1.Text = Main.Distribution.ContSampling.Minimum
        hsUserDef1.Value = 1

        Dim UserDef1 As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
        Dim UserDef1Samp As Integer 'The nearest sample number to UserDef1
        If UserDef1 < Main.Distribution.ContSampling.Minimum Then
            UserDef1 = Main.Distribution.ContSampling.Minimum
            UserDef1Samp = 1
            hsUserDef1.Value = 1
            txtUserDef1.Text = UserDef1
        Else
            UserDef1Samp = Int((UserDef1 - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) + 1
            UserDef1 = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * UserDef1Samp
            If UserDef1Samp > hsUserDef1.Maximum Then UserDef1Samp = hsUserDef1.Maximum
            hsUserDef1.Value = UserDef1Samp
            txtUserDef1.Text = UserDef1
        End If

        ''pbUserDef1 Version: (The picturebox version of a scrollbar is being tested for improved performance - the ScrollBar does not update values while the mouse is moving.
        'UDef1Info.XParamVal = 1
        'UDef1Info.XParamMax = Main.Distribution.ContSampling.NSamples
        'UDef1Info.XParamMin = 1
        ''UDef1Info.XParamMax = Main.Distribution.ContSampling.NSamples
        'UDef1Info.XMin = 0
        'UDef1Info.XMax = pbUserDef1.Width
        'MouseUDef1PosNow.X = UDef1Info.XPos





        hsUserDef2.Minimum = 1
        hsUserDef2.LargeChange = 10
        hsUserDef2.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef2.LargeChange - 1
        txtUserDef2.Text = Main.Distribution.ContSampling.Maximum
        hsUserDef2.Value = Main.Distribution.ContSampling.NSamples

        Dim UserDef2 As Double = SelectedDistrib.InvCDF(0.9)   'Default probability value: 0.9 (P90)
        Dim UserDef2Samp As Integer 'The nearest sample number to UserDef2
        If UserDef2 < Main.Distribution.ContSampling.Minimum Then
            UserDef2 = Main.Distribution.ContSampling.Minimum
            UserDef2Samp = 1
            hsUserDef2.Value = 1
            txtUserDef2.Text = UserDef2
        Else
            UserDef2Samp = Int((UserDef2 - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) + 1
            UserDef2 = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * UserDef2Samp
            If UserDef2Samp > hsUserDef2.Maximum Then UserDef2Samp = hsUserDef2.Maximum
            hsUserDef2.Value = UserDef2Samp
            txtUserDef2.Text = UserDef2
        End If

        'Selection of image formats used to save the chart to the clipboard:
        cmbImageFormat.Items.Add("Jpeg")
        cmbImageFormat.Items.Add("Png")
        cmbImageFormat.Items.Add("Bmp")
        cmbImageFormat.Items.Add("Gif")
        cmbImageFormat.Items.Add("Tiff")
        cmbImageFormat.SelectedIndex = 0

        UpdateChartTypes()
        UpdateAreaOptions()

        'chkAutoApplySize.Checked = True

    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        'Exit the Form
        If Modified Then
            Dim dr As System.Windows.Forms.DialogResult
            dr = MessageBox.Show("Save the chart modifications?", "Notice", MessageBoxButtons.YesNo)
            If dr = System.Windows.Forms.DialogResult.Yes Then
                SaveChart()
            End If
        Else

        End If
        Me.Close() 'Close the form
    End Sub

    Private Sub Form_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        If WindowState = FormWindowState.Normal Then
            SaveFormSettings()
        Else
            'Dont save settings if the form is minimised.
        End If
    End Sub




#End Region 'Form Display Methods -------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Open and Close Forms - Code used to open and close other forms." '===================================================================================================================

#End Region 'Open and Close Forms -------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Form Methods - The main actions performed by this form." '===========================================================================================================================

    'Private Sub UpdateFieldList()
    '    'Update the file list in DataGridView1.
    '    If Main.ChartList(ChartFormNo) IsNot Nothing Then

    '        cboXField.Items.Clear()
    '        cboYField.Items.Clear()

    '        If DataSource Is Nothing Then

    '        Else
    '            If DataSource.Data.Tables.Contains(ContTableName) Then
    '                For Each Col As DataColumn In DataSource.Data.Tables(ContTableName).Columns
    '                    cboXField.Items.Add(Col.ColumnName)
    '                    cboYField.Items.Add(Col.ColumnName)
    '                Next
    '            End If
    '            If DataSource.Data.Tables.Contains(DiscTableName) Then
    '                For Each Col As DataColumn In DataSource.Data.Tables(DiscTableName).Columns
    '                    cboXField.Items.Add(Col.ColumnName)
    '                    cboYField.Items.Add(Col.ColumnName)
    '                Next
    '            End If

    '        End If

    '    End If
    'End Sub

    Private Sub UpdateContFieldList()
        'Update the continuous field list in dgvContinuous.
        If Main.ChartList(ChartFormNo) IsNot Nothing Then

            cboXField.Items.Clear()
            cboYField.Items.Clear()

            If DataSource Is Nothing Then

            Else
                If DataSource.Data.Tables.Contains(ContTableName) Then
                    For Each Col As DataColumn In DataSource.Data.Tables(ContTableName).Columns
                        cboXField.Items.Add(Col.ColumnName)
                        cboYField.Items.Add(Col.ColumnName)
                    Next
                End If
                'If DataSource.Data.Tables.Contains(DiscTableName) Then
                '    For Each Col As DataColumn In DataSource.Data.Tables(DiscTableName).Columns
                '        cboXField.Items.Add(Col.ColumnName)
                '        cboYField.Items.Add(Col.ColumnName)
                '    Next
                'End If

            End If

        End If
    End Sub

    Private Sub UpdateDiscFieldList()
        'Update the discrete field list in dgvDiscrete.
        If Main.ChartList(ChartFormNo) IsNot Nothing Then

            'cboXField.Items.Clear()
            cboDiscXField.Items.Clear()
            'cboYField.Items.Clear()
            cboDiscYField.Items.Clear()

            If DataSource Is Nothing Then

            Else
                'If DataSource.Data.Tables.Contains(ContTableName) Then
                '    For Each Col As DataColumn In DataSource.Data.Tables(ContTableName).Columns
                '        cboXField.Items.Add(Col.ColumnName)
                '        cboYField.Items.Add(Col.ColumnName)
                '    Next
                'End If
                If DataSource.Data.Tables.Contains(DiscTableName) Then
                    For Each Col As DataColumn In DataSource.Data.Tables(DiscTableName).Columns
                        cboDiscXField.Items.Add(Col.ColumnName)
                        cboDiscYField.Items.Add(Col.ColumnName)
                    Next
                End If

            End If

        End If
    End Sub


    Private Sub UpdateChartTypeList(ByVal ChartType As String)
        'Only chart types compatible with ChartType will be added.

        Select Case ChartType
            Case "" 'Show all chart types
                cboType.Items.Clear()
                cboType.Items.Add("Point")
                cboType.Items.Add("Line")
                cboType.Items.Add("Bar")
                cboType.Items.Add("Column")

            Case "Point" 'Show chart types compatible with Point charts.
                cboType.Items.Clear()
                cboType.Items.Add("Point")
                cboType.Items.Add("Line")
            Case "Line"  'Show chart types compatible with Line charts.
                cboType.Items.Clear()
                cboType.Items.Add("Point")
                cboType.Items.Add("Line")
            Case "Bar"  'Show chart types compatible with Bar charts.
                cboType.Items.Clear()
                cboType.Items.Add("Bar")
            Case "Column"  'Show chart types compatible with Column charts.
                cboType.Items.Clear()
                cboType.Items.Add("Column")

        End Select

    End Sub

    Private Sub NewChartInfo(Pdf As Boolean, PdfLn As Boolean, Pmf As Boolean, PmfLn As Boolean, Cdf As Boolean, RevCdf As Boolean, InvCdf As Boolean, InvRevCdf As Boolean, Style As String)
        'Create a new ChartInfo document containing the specified secondary distribution charts.

        Dim XAxisValueTitle As String
        If Main.Distribution.XValueInfo.ValueLabel.Trim = "" Then
            If Main.Distribution.XValueInfo.Units.Trim = "" Then
                XAxisValueTitle = "Random Variable Value"
            Else
                XAxisValueTitle = "Random Variable Value (" & Main.Distribution.XValueInfo.Units.Trim & ")"
            End If
        Else
            If Main.Distribution.XValueInfo.Units.Trim = "" Then
                XAxisValueTitle = Main.Distribution.XValueInfo.ValueLabel.Trim
            Else
                XAxisValueTitle = Main.Distribution.XValueInfo.ValueLabel.Trim & "(" & Main.Distribution.XValueInfo.Units.Trim & ")"
            End If
        End If


        'NOTE: 26/6/22 - Name now used as the SeriesName instead of the SeriesLabel
        '    <SeriesCollection>
        '<%= From item In Main.Distribution.Info
        '    Select
        '  Series(Pdf, item.PdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDF", item.PdfInfo.SeriesLabel, "PdfArea", "Value", item.PdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.PdfInfo.Display.MarkerStyle) 'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle                                                                                                                                                                                                                                                                                                    
        '%>

        Dim TableName As String = ContTableName 'NOTE: This line is to be updated: Select ContTablename or DiscTableName as appropriate.
        'If only Continuous distributions are displayed, select ContTableName.
        'If only Discrete distributions are displayed, select DiscTableName
        'If mixed distributions are displayed, select ContTableName???

        Dim XMin As Double = XMinValue(XRange.Both)
        Dim XMax As Double = XMaxValue(XRange.Both)

        Select Case Style
            Case "ColorByDistribution"
                myParent.ChartInfo = <?xml version="1.0" encoding="utf-8"?>
                                     <!---->
                                     <!--Data Table Chart Settings-->
                                     <ChartSettings>
                                         <Description><%= txtSelChartDescr.Text %></Description>
                                         <ContinuousTableName><%= ContTableName %></ContinuousTableName>
                                         <DiscreteTableName><%= DiscTableName %></DiscreteTableName>
                                         <FormHeight><%= myParent.Height %></FormHeight>
                                         <FormWidth><%= myParent.Width %></FormWidth>
                                         <FormTop><%= myParent.Top %></FormTop>
                                         <FormLeft><%= myParent.Left %></FormLeft>
                                         <Legend>
                                             <ForeColor>-16777216</ForeColor>
                                             <Font>
                                                 <Name>Microsoft Sans Serif</Name>
                                                 <Size>12</Size>
                                                 <Bold>true</Bold>
                                                 <Italic>false</Italic>
                                                 <Strikeout>false</Strikeout>
                                                 <Underline>false</Underline>
                                             </Font>
                                         </Legend>
                                         <TitlesCollection>
                                             <%= Title(True, "MainTitle", "", txtSelChartName.Text, "16", "true") %>
                                             <%= Title(Pdf, "PdfTitle", "PdfArea", "Probability Density Function", "14", "true") %>
                                             <%= Title(PdfLn, "PdfLnTitle", "PdfLnArea", "Natural Log of Probability Density Function", "14", "true") %>
                                             <%= Title(Pmf, "PmfTitle", "PmfArea", "Probability Mass Function", "14", "true") %>
                                             <%= Title(PmfLn, "PmfLnTitle", "PmfLnArea", "Natural Log of Probability Mass Function", "14", "true") %>
                                             <%= Title(Cdf, "CdfTitle", "CdfArea", "Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(RevCdf, "RevCdfTitle", "RevCdfArea", "Reverse Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(InvCdf, "InvCdfTitle", "InvCdfArea", "Inverse Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(InvRevCdf, "InvRevCdfTitle", "InvRevCdfArea", "Inverse Reverse Cumulative Distribution Function", "14", "true") %>
                                         </TitlesCollection>
                                         <SeriesCollection>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(Pdf, item.PdfInfo.Valid And item.PdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDF", item.Continuity, item.PdfInfo.Name, item.PdfInfo.SeriesLabel, "PdfArea", "Value", item.PdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.PdfInfo.Display.MarkerStyle) 'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle                                                                                                                                                                                                                                                                                                    
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(PdfLn, item.PdfLnInfo.Valid And item.PdfLnInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDFLn", item.Continuity, item.PdfLnInfo.Name, item.PdfLnInfo.SeriesLabel, "PdfLnArea", "Value", item.PdfLnInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.PdfLnInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(Pmf, item.PmfInfo.Valid And item.PmfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PMF", item.Continuity, item.PmfInfo.Name, item.PmfInfo.SeriesLabel, "PmfArea", "Value", item.PmfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.PmfInfo.Display.MarkerStyle) 'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle                               
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(PmfLn, item.PmfLnInfo.Valid And item.PmfLnInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PMFLn", item.Continuity, item.PmfLnInfo.Name, item.PmfLnInfo.SeriesLabel, "PmfLnArea", "Value", item.PmfLnInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.PmfLnInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(Cdf, item.CdfInfo.Valid And item.CdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "CDF", item.Continuity, item.CdfInfo.Name, item.CdfInfo.SeriesLabel, "CdfArea", "Value", item.CdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.CdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(RevCdf, item.RevCdfInfo.Valid And item.RevCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "RevCDF", item.Continuity, item.RevCdfInfo.Name, item.RevCdfInfo.SeriesLabel, "RevCdfArea", "Value", item.RevCdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.RevCdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(InvCdf, item.InvCdfInfo.Valid And item.InvCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "InvCDF", item.Continuity, item.InvCdfInfo.Name, item.InvCdfInfo.SeriesLabel, "InvCdfArea", "Probability", item.InvCdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.InvCdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                                               Series(InvRevCdf, item.InvRevCdfInfo.Valid And item.InvRevCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "InvRevCDF", item.Continuity, item.InvRevCdfInfo.Name, item.InvRevCdfInfo.SeriesLabel, "InvRevCdfArea", "Probability", item.InvRevCdfInfo.Name, Color.Black, item.Display.MarkerColor, item.Display.LineColor, item.InvRevCdfInfo.Display.MarkerStyle)
                                             %>
                                         </SeriesCollection>
                                         <ChartAreasCollection>
                                             <%= ChartArea(Pdf, "PdfArea", XMin, XMax, YMinValue("PDF"), YMaxValue("PDF"), XAxisValueTitle, "Probability Density") %>
                                             <%= ChartArea(PdfLn, "PdfLnArea", XMin, XMax, YMinValue("PDFLn"), YMaxValue("PDFLn"), XAxisValueTitle, "Natural Log of Probability Density") %>
                                             <%= ChartArea(Pmf, "PmfArea", XMin, XMax, YMinValue("PMF"), YMaxValue("PMF"), XAxisValueTitle, "Probability Mass") %>
                                             <%= ChartArea(PmfLn, "PmfLnArea", XMin, XMax, YMinValue("PMFLn"), YMaxValue("PMFLn"), XAxisValueTitle, "Natural Log of Probability Mass") %>
                                             <%= ChartArea(Cdf, "CdfArea", XMin, XMax, YMinValue("CDF"), YMaxValue("CDF"), XAxisValueTitle, "Probability") %>
                                             <%= ChartArea(RevCdf, "RevCdfArea", XMin, XMax, YMinValue("RevCDF"), YMaxValue("RevCDF"), XAxisValueTitle, "Probability") %>
                                             <%= ChartArea(InvCdf, "InvCdfArea", XMin, XMax, YMinValue("InvCDF"), YMaxValue("InvCDF"), "Probability", "Value") %>
                                             <%= ChartArea(InvRevCdf, "InvRevCdfArea", XMin, XMax, YMinValue("InvRevCDF"), YMaxValue("InvRevCDF"), "Probability", "Value") %>
                                         </ChartAreasCollection>
                                         <PointAnnotationSettings>
                                             <PDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PDF>
                                             <PDFLn>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PDFLn>
                                             <PMF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PMF>
                                             <PMFLn>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PMFLn>
                                             <CDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </CDF>
                                             <RevCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </RevCDF>
                                             <InvCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </InvCDF>
                                             <InvRevCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </InvRevCDF>
                                         </PointAnnotationSettings>
                                         <PointAnnotationCollection>
                                         </PointAnnotationCollection>
                                         <AreaAnnotationSettings>
                                             <DisplayProbability>True</DisplayProbability>
                                             <UseShadingColor>True</UseShadingColor>
                                             <DefaultColor><%= Color.Black.ToArgb.ToString %></DefaultColor>
                                             <Size>12</Size>
                                             <FontName>Arial</FontName>
                                             <Bold>True</Bold>
                                             <Italic>False</Italic>
                                             <Strikeout>False</Strikeout>
                                             <Underline>False</Underline>
                                             <Format>N4</Format>
                                         </AreaAnnotationSettings>
                                         <AreaAnnotationCollection>
                                         </AreaAnnotationCollection>
                                     </ChartSettings>


                                         '<ChartAreasCollection>
                                         '    <%= ChartArea(Pdf, "PdfArea", ContTableName, "Value", "PDF_1", XAxisValueTitle, "Probability Density") %>
                                         '    <%= ChartArea(PdfLn, "PdfLnArea", ContTableName, "Value", "PDFLn_1", XAxisValueTitle, "Natural Log of Probability Density") %>
                                         '    <%= ChartArea(Pmf, "PmfArea", DiscTableName, "Value", "PMF_1", XAxisValueTitle, "Probability Mass") %>
                                         '    <%= ChartArea(PmfLn, "PmfLnArea", DiscTableName, "Value", "PMFLn_1", XAxisValueTitle, "Natural Log of Probability Mass") %>
                                         '    <%= ChartArea(Cdf, "CdfArea", TableName, "Value", "CDF_1", XAxisValueTitle, "Probability") %>
                                         '    <%= ChartArea(RevCdf, "RevCdfArea", TableName, "Value", "RevCDF_1", XAxisValueTitle, "Probability") %>
                                         '    <%= ChartArea(InvCdf, "InvCdfArea", TableName, "Probability", "Value", "Probability", "Value") %>
                                         '    <%= ChartArea(InvRevCdf, "InvRevCdfArea", TableName, "Probability", "Value", "Probability", "Value") %>
                                         '</ChartAreasCollection>

            Case "ColorByFunctionType"
                'ChartInfo = <?xml version="1.0" encoding="utf-8"?>
                'ChartForm.ChartInfo = <?xml version="1.0" encoding="utf-8"?>

                '            <SeriesCollection>
                '              <%= From item In Main.Distribution.Info
                '                  Select
                'Series(Pdf, item.PdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDF", item.PdfInfo.SeriesLabel, "PdfArea", "Value", item.PdfInfo.Name, Color.Black, item.PdfInfo.Display.MarkerColor, item.PdfInfo.Display.LineColor, item.PdfInfo.Display.MarkerStyle)  'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle  
                '              %>

                myParent.ChartInfo = <?xml version="1.0" encoding="utf-8"?>
                                     <!---->
                                     <!--Data Table Chart Settings-->
                                     <ChartSettings>
                                         <Description><%= txtSelChartDescr.Text %></Description>
                                         <TableName><%= ContTableName %></TableName>
                                         <ContinuousTableName><%= ContTableName %></ContinuousTableName>
                                         <DiscreteTableName><%= DiscTableName %></DiscreteTableName>
                                         <FormHeight><%= myParent.Height %></FormHeight>
                                         <FormWidth><%= myParent.Width %></FormWidth>
                                         <FormTop><%= myParent.Top %></FormTop>
                                         <FormLeft><%= myParent.Left %></FormLeft>
                                         <Legend>
                                             <ForeColor>-16777216</ForeColor>
                                             <Font>
                                                 <Name>Microsoft Sans Serif</Name>
                                                 <Size>12</Size>
                                                 <Bold>true</Bold>
                                                 <Italic>false</Italic>
                                                 <Strikeout>false</Strikeout>
                                                 <Underline>false</Underline>
                                             </Font>
                                         </Legend>
                                         <TitlesCollection>
                                             <%= Title(True, "MainTitle", "", txtSelChartName.Text, "16", "true") %>
                                             <%= Title(Pdf, "PdfTitle", "PdfArea", "Probability Density Function", "14", "true") %>
                                             <%= Title(PdfLn, "PdfLnTitle", "PdfLnArea", "Natural Log of Probability Density Function", "14", "true") %>
                                             <%= Title(Pmf, "PmfTitle", "PmfArea", "Probability Mass Function", "14", "true") %>
                                             <%= Title(PmfLn, "PmfLnTitle", "PmfLnArea", "Natural Log of Probability Mass Function", "14", "true") %>
                                             <%= Title(Cdf, "CdfTitle", "CdfArea", "Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(RevCdf, "RevCdfTitle", "RevCdfArea", "Reverse Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(InvCdf, "InvCdfTitle", "InvCdfArea", "Inverse Cumulative Distribution Function", "14", "true") %>
                                             <%= Title(InvRevCdf, "InvRevCdfTitle", "InvRevCdfArea", "Inverse Reverse Cumulative Distribution Function", "14", "true") %>
                                         </TitlesCollection>
                                         <SeriesCollection>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                               Series(Pdf, item.PdfInfo.Valid And item.PdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDF", item.Continuity, item.PdfInfo.Name, item.PdfInfo.SeriesLabel, "PdfArea", "Value", item.PdfInfo.Name, Color.Black, item.PdfInfo.Display.MarkerColor, item.PdfInfo.Display.LineColor, item.PdfInfo.Display.MarkerStyle)  'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle  
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(PdfLn, item.PdfLnInfo.Valid And item.PdfLnInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PDFLn", item.Continuity, item.PdfLnInfo.Name, item.PdfLnInfo.SeriesLabel, "PdfLnArea", "Value", item.PdfLnInfo.Name, Color.Black, item.PdfLnInfo.Display.MarkerColor, item.PdfLnInfo.Display.LineColor, item.PdfLnInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                               Series(Pmf, item.PmfInfo.Valid And item.PmfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PMF", item.Continuity, item.PmfInfo.Name, item.PmfInfo.SeriesLabel, "PmfArea", "Value", item.PmfInfo.Name, Color.Black, item.PmfInfo.Display.MarkerColor, item.PmfInfo.Display.LineColor, item.PmfInfo.Display.MarkerStyle)  'Exists, DistribNo, FunctionType, SeriesName, ChartAreaName, XFieldName, YFieldName, BorderColor FillColor, LineColor, MarkerStyle  
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(PmfLn, item.PmfLnInfo.Valid And item.PmfLnInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "PMFLn", item.Continuity, item.PmfLnInfo.Name, item.PmfLnInfo.SeriesLabel, "PmfLnArea", "Value", item.PmfLnInfo.Name, Color.Black, item.PmfLnInfo.Display.MarkerColor, item.PmfLnInfo.Display.LineColor, item.PmfLnInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(Cdf, item.CdfInfo.Valid And item.CdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "CDF", item.Continuity, item.CdfInfo.Name, item.CdfInfo.SeriesLabel, "CdfArea", "Value", item.CdfInfo.Name, Color.Black, item.CdfInfo.Display.MarkerColor, item.CdfInfo.Display.LineColor, item.CdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(RevCdf, item.RevCdfInfo.Valid And item.RevCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "RevCDF", item.Continuity, item.RevCdfInfo.Name, item.RevCdfInfo.SeriesLabel, "RevCdfArea", "Value", item.RevCdfInfo.Name, Color.Black, item.RevCdfInfo.Display.MarkerColor, item.RevCdfInfo.Display.LineColor, item.RevCdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(InvCdf, item.InvCdfInfo.Valid And item.InvCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "InvCDF", item.Continuity, item.InvCdfInfo.Name, item.InvCdfInfo.SeriesLabel, "InvCdfArea", "Probability", item.InvCdfInfo.Name, Color.Black, item.InvCdfInfo.Display.MarkerColor, item.InvCdfInfo.Display.LineColor, item.InvCdfInfo.Display.MarkerStyle)
                                             %>
                                             <%= From item In Main.Distribution.Info
                                                 Select
                            Series(InvRevCdf, item.InvRevCdfInfo.Valid And item.InvRevCdfInfo.Generate, Main.Distribution.Info.IndexOf(item) + 1, "InvRevCDF", item.Continuity, item.InvRevCdfInfo.Name, item.InvRevCdfInfo.SeriesLabel, "InvRevCdfArea", "Probability", item.InvRevCdfInfo.Name, Color.Black, item.InvRevCdfInfo.Display.MarkerColor, item.InvRevCdfInfo.Display.LineColor, item.InvRevCdfInfo.Display.MarkerStyle)
                                             %>
                                         </SeriesCollection>
                                         <ChartAreasCollection>
                                             <%= ChartArea(Pdf, "PdfArea", XMin, XMax, YMinValue("PDF"), YMaxValue("PDF"), XAxisValueTitle, "Probability Density") %>
                                             <%= ChartArea(PdfLn, "PdfLnArea", XMin, XMax, YMinValue("PDFLn"), YMaxValue("PDFLn"), XAxisValueTitle, "Natural Log of Probability Density") %>
                                             <%= ChartArea(Pmf, "PmfArea", XMin, XMax, YMinValue("PMF"), YMaxValue("PMF"), XAxisValueTitle, "Probability Mass") %>
                                             <%= ChartArea(PmfLn, "PmfLnArea", XMin, XMax, YMinValue("PMFLn"), YMaxValue("PMFLn"), XAxisValueTitle, "Natural Log of Probability Mass") %>
                                             <%= ChartArea(Cdf, "CdfArea", XMin, XMax, YMinValue("CDF"), YMaxValue("CDF"), XAxisValueTitle, "Probability") %>
                                             <%= ChartArea(RevCdf, "RevCdfArea", XMin, XMax, YMinValue("RevCDF"), YMaxValue("RevCDF"), XAxisValueTitle, "Probability") %>
                                             <%= ChartArea(InvCdf, "InvCdfArea", XMin, XMax, YMinValue("InvCDF"), YMaxValue("InvCDF"), "Probability", "Value") %>
                                             <%= ChartArea(InvRevCdf, "InvRevCdfArea", XMin, XMax, YMinValue("InvRevCDF"), YMaxValue("InvRevCDF"), "Probability", "Value") %>
                                         </ChartAreasCollection>
                                         <PointAnnotationSettings>
                                             <PDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PDF>
                                             <PDFLn>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PDFLn>
                                             <PMF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PMF>
                                             <PMFLn>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </PMFLn>
                                             <CDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </CDF>
                                             <RevCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </RevCDF>
                                             <InvCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </InvCDF>
                                             <InvRevCDF>
                                                 <Line>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                 </Line>
                                                 <Circle>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Orange.ToArgb.ToString %></Color>
                                                     <Thickness>2</Thickness>
                                                     <Size>10</Size>
                                                 </Circle>
                                                 <Text>
                                                     <Show>True</Show>
                                                     <Color><%= Color.Black.ToArgb.ToString %></Color>
                                                     <Size>10</Size>
                                                     <FontName>Arial</FontName>
                                                     <Bold>True</Bold>
                                                     <Italic>False</Italic>
                                                     <Strikeout>False</Strikeout>
                                                     <Underline>False</Underline>
                                                     <ShowProbValue>True</ShowProbValue>
                                                     <ProbFormat>N4</ProbFormat>
                                                     <ShowRVValue>True</ShowRVValue>
                                                     <RVFormat>N4</RVFormat>
                                                 </Text>
                                             </InvRevCDF>
                                         </PointAnnotationSettings>
                                         <PointAnnotationCollection>
                                         </PointAnnotationCollection>
                                         <AreaAnnotationSettings>
                                             <DisplayProbability>True</DisplayProbability>
                                             <UseShadingColor>True</UseShadingColor>
                                             <DefaultColor><%= Color.Black.ToArgb.ToString %></DefaultColor>
                                             <Size>12</Size>
                                             <FontName>Arial</FontName>
                                             <Bold>True</Bold>
                                             <Italic>False</Italic>
                                             <Strikeout>False</Strikeout>
                                             <Underline>False</Underline>
                                             <Format>N4</Format>
                                         </AreaAnnotationSettings>
                                         <AreaAnnotationCollection>
                                         </AreaAnnotationCollection>
                                     </ChartSettings>

                '<ChartAreasCollection>
                '    <%= ChartArea(Pdf, "PdfArea", ContTableName, "Value", "PDF_1", XAxisValueTitle, "Probability Density") %>
                '    <%= ChartArea(PdfLn, "PdfLnArea", ContTableName, "Value", "PDFLn_1", XAxisValueTitle, "Natural Log of Probability Density") %>
                '    <%= ChartArea(Pmf, "PmfArea", DiscTableName, "Value", "PMF_1", XAxisValueTitle, "Probability Mass") %>
                '    <%= ChartArea(PmfLn, "PmfLnArea", DiscTableName, "Value", "PMFLn_1", XAxisValueTitle, "Natural Log of Probability Mass") %>
                '    <%= ChartArea(Cdf, "CdfArea", TableName, "Value", "CDF_1", XAxisValueTitle, "Probability") %>
                '    <%= ChartArea(RevCdf, "RevCdfArea", TableName, "Value", "RevCDF_1", XAxisValueTitle, "Probability") %>
                '    <%= ChartArea(InvCdf, "InvCdfArea", TableName, "Probability", "Value", "Probability", "Value") %>
                '    <%= ChartArea(InvRevCdf, "InvRevCdfArea", TableName, "Probability", "Value", "Probability", "Value") %>
                '</ChartAreasCollection>

        End Select

        txtSelChartName.Text = ChartName
        txtSelChartDescr.Text = myParent.ChartInfo.<ChartSettings>.<Description>.Value
        myParent.AreaInfo = From item In myParent.ChartInfo.<ChartSettings>.<ChartAreasCollection>.<ChartArea>
        myParent.SeriesInfo = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series>
        myParent.TitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title>
        myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        myParent.AreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation>
        UpdateAreaOptions()

        PlotChart()  'Update the Chart Display.

        UpdateTitlesTabSettings()
        UpdateAreasTabSettings()
        UpdateSeriesTabSettings()
        UpdateAnnotationTabSettings()
        UpdateAnnotationDisplaySettings()

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)

    End Sub

    Private Function XMinValue(XRangeCriteria As XRange) As Double
        'Get the XMinimum value corresponding to the XRangeCriteria

        Select Case XRangeCriteria
            Case XRange.Continuous
                'Use the Continuous distribution X Minimum:
                If Main.Distribution.NContinuous > 0 Then 'At least one continuous distribution has been defined.
                    Return Main.Distribution.ContSampling.Minimum
                ElseIf Main.Distribution.NDiscrete > 0 Then 'At least one discrete distribution has been defined.
                    Return Main.Distribution.DiscSampling.Minimum
                Else
                    Return 0 'No distriubtions have been defined - Return 0 by default.
                End If

            Case XRange.Discrete
                'Use the Discrete distribution X Minimum:
                If Main.Distribution.NDiscrete > 0 Then 'At least one discrete distribution has been defined.
                    Return Main.Distribution.DiscSampling.Minimum
                ElseIf Main.Distribution.NContinuous > 0 Then 'At least one continuous distribution has been defined.
                    Return Main.Distribution.ContSampling.Minimum
                Else
                    Return 0 'No distriubtions have been defined - Return 0 by default.
                End If

            Case XRange.Common
                'Use the XRange containing both Continuous and Discrete distribution data:
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Minimum > Main.Distribution.DiscSampling.Minimum Then
                            Return Main.Distribution.ContSampling.Minimum
                        Else
                            Return Main.Distribution.DiscSampling.Minimum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Minimum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Minimum
                    Else 'No distributions are defined.
                        Return 0
                    End If
                End If

            Case XRange.Both
                'Use the XRange containing either Continuous or Discrete distribution data
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Minimum > Main.Distribution.DiscSampling.Minimum Then
                            Return Main.Distribution.DiscSampling.Minimum
                        Else
                            Return Main.Distribution.ContSampling.Minimum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Minimum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Minimum
                    Else 'No distributions are defined.
                        Return 0
                    End If
                End If

            Case Else
                'Use the XRange containing either Continuous or Discrete distribution data
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Minimum > Main.Distribution.DiscSampling.Minimum Then
                            Return Main.Distribution.DiscSampling.Minimum
                        Else
                            Return Main.Distribution.ContSampling.Minimum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Minimum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Minimum
                    Else 'No distributions are defined.
                        Return 0
                    End If
                End If

        End Select
    End Function

    Private Function XMaxValue(XRangeCriteria As XRange) As Double
        'Get the XMaximum value corresponding to the XRangeCriteria

        Select Case XRangeCriteria
            Case XRange.Continuous
                'Use the Continuous distribution X Minimum:
                If Main.Distribution.NContinuous > 0 Then 'At least one continuous distribution has been defined.
                    Return Main.Distribution.ContSampling.Maximum
                ElseIf Main.Distribution.NDiscrete > 0 Then 'At least one discrete distribution has been defined.
                    Return Main.Distribution.DiscSampling.Maximum
                Else
                    Return 1 'No distriubtions have been defined - Return 1 by default.
                End If

            Case XRange.Discrete
                'Use the Discrete distribution X Minimum:
                If Main.Distribution.NDiscrete > 0 Then 'At least one discrete distribution has been defined.
                    Return Main.Distribution.DiscSampling.Maximum
                ElseIf Main.Distribution.NContinuous > 0 Then 'At least one continuous distribution has been defined.
                    Return Main.Distribution.ContSampling.Maximum
                Else
                    Return 1 'No distriubtions have been defined - Return 1 by default.
                End If

            Case XRange.Common
                'Use the XRange containing both Continuous and Discrete distribution data:
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Maximum < Main.Distribution.DiscSampling.Maximum Then
                            Return Main.Distribution.ContSampling.Maximum
                        Else
                            Return Main.Distribution.DiscSampling.Maximum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Maximum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Maximum
                    Else 'No distributions are defined.
                        Return 1
                    End If
                End If

            Case XRange.Both
                'Use the XRange containing either Continuous or Discrete distribution data
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Maximum < Main.Distribution.DiscSampling.Maximum Then
                            Return Main.Distribution.DiscSampling.Maximum
                        Else
                            Return Main.Distribution.ContSampling.Maximum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Maximum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Maximum
                    Else 'No distributions are defined.
                        Return 1
                    End If
                End If

            Case Else
                'Use the XRange containing either Continuous or Discrete distribution data
                If Main.Distribution.NContinuous > 0 Then
                    If Main.Distribution.NDiscrete > 0 Then 'Continuous and Discrete distributions are defined.
                        If Main.Distribution.ContSampling.Maximum < Main.Distribution.DiscSampling.Maximum Then
                            Return Main.Distribution.DiscSampling.Maximum
                        Else
                            Return Main.Distribution.ContSampling.Minimum
                        End If
                    Else 'Only Continuous distributions are defined.
                        Return Main.Distribution.ContSampling.Minimum
                    End If
                Else
                    If Main.Distribution.NDiscrete > 0 Then 'Only discrete distributions are defined.
                        Return Main.Distribution.DiscSampling.Maximum
                    Else 'No distributions are defined.
                        Return 1
                    End If
                End If

        End Select
    End Function

    'Private Function YMinValue(Area As String, YRangeCriteria As YRange) As Double
    Private Function YMinValue(Area As String) As Double
        'Get the YMinimum value 

        Dim ColName As String
        Dim ColMin As Double
        Dim MinVal As Double = Double.PositiveInfinity

        'If YRangeCriteria = YRange.Selected Then
        Select Case Area
                Case "PDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PdfInfo.Generate = True And Item.PdfInfo.Valid = True Then
                            ColName = Item.PdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PdfInfo.Generate = True And Item.PdfInfo.Valid = True Then
                            Main.Message.AddWarning("PDF functions can not be discrete." & vbCrLf)
                        End If
                    Else
                        'Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "PDFLn"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PdfLnInfo.Generate = True And Item.PdfLnInfo.Valid = True Then
                            ColName = Item.PdfLnInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PdfLnInfo.Generate = True And Item.PdfLnInfo.Valid = True Then
                            Main.Message.AddWarning("PDFLn functions can not be discrete." & vbCrLf)
                        End If
                    Else
                        'Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "PMF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PmfInfo.Generate = True And Item.PmfInfo.Valid = True Then
                            Main.Message.AddWarning("PMF functions can not be continuous." & vbCrLf)
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PmfInfo.Generate = True And Item.PmfInfo.Valid = True Then
                            ColName = Item.PmfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "PMFLn"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PmfLnInfo.Generate = True And Item.PmfLnInfo.Valid = True Then
                            Main.Message.AddWarning("PMFLn functions can not be continuous." & vbCrLf)
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PmfLnInfo.Generate = True And Item.PmfLnInfo.Valid = True Then
                            ColName = Item.PmfLnInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "CDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.CdfInfo.Generate = True And Item.CdfInfo.Valid = True Then
                            ColName = Item.CdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.CdfInfo.Generate = True And Item.CdfInfo.Valid = True Then
                            ColName = Item.CdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "RevCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.RevCdfInfo.Generate = True And Item.RevCdfInfo.Valid = True Then
                            ColName = Item.RevCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.RevCdfInfo.Generate = True And Item.RevCdfInfo.Valid = True Then
                            ColName = Item.RevCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "InvCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.InvCdfInfo.Generate = True And Item.InvCdfInfo.Valid = True Then
                            ColName = Item.InvCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.InvCdfInfo.Generate = True And Item.InvCdfInfo.Valid = True Then
                            ColName = Item.InvCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case "InvRevCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.InvRevCdfInfo.Generate = True And Item.InvRevCdfInfo.Valid = True Then
                            ColName = Item.InvRevCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.InvRevCdfInfo.Generate = True And Item.InvRevCdfInfo.Valid = True Then
                            ColName = Item.InvRevCdfInfo.Name
                            ColMin = Main.Distribution.Data.Tables(DiscTableName).Compute("Min(" & ColName & ")", "")
                            If ColMin < MinVal Then MinVal = ColMin
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MinVal = Double.PositiveInfinity Then
                    Return 0
                Else
                    Return MinVal
                End If

            Case Else
                Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                Return 0

        End Select

        'Else

        'End If

    End Function

    Private Function YMaxValue(Area As String) As Double
        'Get the YMaximum value 

        Dim ColName As String
        Dim ColMax As Double
        Dim MaxVal As Double = Double.NegativeInfinity

        Select Case Area
            Case "PDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PdfInfo.Generate = True And Item.PdfInfo.Valid = True Then
                            ColName = Item.PdfInfo.Name
                            'ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PdfInfo.Generate = True And Item.PdfInfo.Valid = True Then
                            Main.Message.AddWarning("PDF functions can not be discrete." & vbCrLf)
                        End If
                    Else
                        'Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "PDFLn"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PdfLnInfo.Generate = True And Item.PdfLnInfo.Valid = True Then
                            ColName = Item.PdfLnInfo.Name
                            'ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Min(" & ColName & ")", "")
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PdfLnInfo.Generate = True And Item.PdfLnInfo.Valid = True Then
                            Main.Message.AddWarning("PDFLn functions can not be discrete." & vbCrLf)
                        End If
                    Else
                        'Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "PMF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PmfInfo.Generate = True And Item.PmfInfo.Valid = True Then
                            Main.Message.AddWarning("PMF functions can not be continuous." & vbCrLf)
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PmfInfo.Generate = True And Item.PmfInfo.Valid = True Then
                            ColName = Item.PmfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "PMFLn"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.PmfLnInfo.Generate = True And Item.PmfLnInfo.Valid = True Then
                            Main.Message.AddWarning("PMFLn functions can not be continuous." & vbCrLf)
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.PmfLnInfo.Generate = True And Item.PmfLnInfo.Valid = True Then
                            ColName = Item.PmfLnInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "CDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.CdfInfo.Generate = True And Item.CdfInfo.Valid = True Then
                            ColName = Item.CdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.CdfInfo.Generate = True And Item.CdfInfo.Valid = True Then
                            ColName = Item.CdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "RevCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.RevCdfInfo.Generate = True And Item.RevCdfInfo.Valid = True Then
                            ColName = Item.RevCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.RevCdfInfo.Generate = True And Item.RevCdfInfo.Valid = True Then
                            ColName = Item.RevCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "InvCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.InvCdfInfo.Generate = True And Item.InvCdfInfo.Valid = True Then
                            ColName = Item.InvCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.InvCdfInfo.Generate = True And Item.InvCdfInfo.Valid = True Then
                            ColName = Item.InvCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case "InvRevCDF"
                For Each Item In Main.Distribution.Info
                    If Item.Continuity = "Continuous" Then
                        If Item.InvRevCdfInfo.Generate = True And Item.InvRevCdfInfo.Valid = True Then
                            ColName = Item.InvRevCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(ContTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    ElseIf Item.Continuity = "Discrete" Then
                        If Item.InvRevCdfInfo.Generate = True And Item.InvRevCdfInfo.Valid = True Then
                            ColName = Item.InvRevCdfInfo.Name
                            ColMax = Main.Distribution.Data.Tables(DiscTableName).Compute("Max(" & ColName & ")", "")
                            If ColMax > MaxVal Then MaxVal = ColMax
                        End If
                    Else
                        Main.Message.AddWarning("Unknown continuity: " & Item.Continuity & vbCrLf)
                    End If
                Next
                If MaxVal = Double.NegativeInfinity Then
                    Return 1
                Else
                    Return MaxVal
                End If

            Case Else
                Main.Message.AddWarning("Unknown function type: " & Area & vbCrLf)
                Return 1

        End Select

    End Function

    Private Function Title(Exists As Boolean, Name As String, ChartArea As String, Text As String, Size As String, Bold As String) As IEnumerable(Of XElement)
        'Generate a Title entry.

        If Exists Then
            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                       <Title>
                           <Name><%= Name %></Name>
                           <ChartArea><%= ChartArea %></ChartArea>
                           <Text><%= Text %></Text>
                           <TextOrientation>Auto</TextOrientation>
                           <Alignment>TopCenter</Alignment>
                           <ForeColor>-16777216</ForeColor>
                           <Font>
                               <Name>Microsoft Sans Serif</Name>
                               <Size><%= Size %></Size>
                               <Bold><%= Bold %></Bold>
                               <Italic>false</Italic>
                               <Strikeout>false</Strikeout>
                               <Underline>false</Underline>
                           </Font>
                       </Title>

            Return XDoc.<Title>
        Else

        End If

    End Function

    'Private Function Series(Exists As Boolean, DistribNo As Integer, FunctionType As String, SeriesName As String, ChartAreaName As String, XFieldName As String, YFieldName As String, BorderColor As Color, FillColor As Color, LineColor As Color, MarkerStyle As String) As IEnumerable(Of XElement)
    'Private Function Series(Exists As Boolean, Generate As Boolean, DistribNo As Integer, FunctionType As String, SeriesName As String, ChartAreaName As String, XFieldName As String, YFieldName As String, BorderColor As Color, FillColor As Color, LineColor As Color, MarkerStyle As String) As IEnumerable(Of XElement)
    'Private Function Series(Exists As Boolean, Generate As Boolean, DistribNo As Integer, FunctionType As String, SeriesName As String, LegendText As String, ChartAreaName As String, XFieldName As String, YFieldName As String, BorderColor As Color, FillColor As Color, LineColor As Color, MarkerStyle As String) As IEnumerable(Of XElement)
    Private Function Series(Exists As Boolean, Generate As Boolean, DistribNo As Integer, FunctionType As String, Continuity As String, SeriesName As String, LegendText As String, ChartAreaName As String, XFieldName As String, YFieldName As String, BorderColor As Color, FillColor As Color, LineColor As Color, MarkerStyle As String) As IEnumerable(Of XElement)
        'Generate a ChartInfo Series from the specified XFieldName and YFieldName.
        'DistribNo is 0 for the primary distribution.
        'DistribNo is 1, 2, ... for the secondary distributions.
        'FunctionType is PDF, PDFLn, PMF, PMFLn, CDF or InvCDF.

        Dim ChartType As String
        If Continuity = "Continuous" Then
            ChartType = "Line"
        Else ChartType = "Column"
        End If

        'If Exists Then
        If Exists And Generate Then 'The series exists and the data has been generated.
            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                       <Series>
                           <DistribNo><%= DistribNo %></DistribNo>
                           <FunctionType><%= FunctionType %></FunctionType>
                           <Continuity><%= Continuity %></Continuity>
                           <Name><%= SeriesName %></Name>
                           <ChartType><%= ChartType %></ChartType>
                           <ChartArea><%= ChartAreaName %></ChartArea>
                           <Legend><%= ChartAreaName %></Legend>
                           <LegendText><%= LegendText %></LegendText>
                           <AxisLabel/>
                           <XFieldName><%= XFieldName %></XFieldName>
                           <XAxisType>Primary</XAxisType>
                           <XValueType>Auto</XValueType>
                           <YFieldName><%= YFieldName %></YFieldName>
                           <YAxisType>Primary</YAxisType>
                           <YValueType>Auto</YValueType>
                           <Marker>
                               <BorderColor><%= BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth>1</BorderWidth>
                               <Fill>Yes</Fill>
                               <Color><%= FillColor.ToArgb.ToString %></Color>
                               <Size>6</Size>
                               <Step>1</Step>
                               <Style><%= MarkerStyle %></Style>
                           </Marker>
                           <Color><%= LineColor.ToArgb.ToString %></Color>
                           <Width>1</Width>
                           <ToolTip/>
                       </Series>

            '<ChartType>Line</ChartType>

            '<Style>Circle</Style>

            '<Legend>Legend1</Legend>
            '<Legend><%= ChartAreaName %></Legend> 'Each chart areas now has its own legend. The Chart Area Name is now used as the Legend name.
            '<Legend><%= ChartAreaName & "Legend" %></Legend>

            Return XDoc.<Series>
        Else

        End If

    End Function

    'Private Function ChartAreaOLD(Exists As Boolean, ChartAreaName As String, TableName As String, XFieldName As String, YFieldName As String, XAxisTitle As String, YAxisTitle As String) As IEnumerable(Of XElement)
    '    'Generate a ChartInfo ChartArea from the specified XFieldName and YFieldName.

    '    If Exists Then
    '        'Calculate the X Axis display settings:
    '        Dim XMinSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Min(" & XFieldName & ")", "")
    '        If Double.IsInfinity(XMinSeriesVal) Then
    '            XMinSeriesVal = DataSource.Data.Tables(TableName).Rows(1).Item(XFieldName)
    '        End If
    '        Dim XMaxSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Max(" & XFieldName & ")", "")
    '        If Double.IsInfinity(XMaxSeriesVal) Then
    '            XMaxSeriesVal = DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 2).Item(XFieldName)
    '        End If
    '        Dim XRawPixelsPerInterval As Integer = 100 'Default number of pixels between each annotated axis label along the axis
    '        'Dim XAxisLength As Single = myChart.ChartAreas(0).InnerPlotPosition.Width 'Width in relative coordinates, which range from 0 to 100.
    '        Dim XAxisLength As Single = myParent.Chart1.ChartAreas(0).InnerPlotPosition.Width 'Width in relative coordinates, which range from 0 to 100.
    '        Dim ChartPixelWidth As Integer = myParent.Chart1.Width 'The width of the entire chart image in pixels.
    '        Dim XAxisPixelLength As Integer = Int(ChartPixelWidth * XAxisLength / 100)
    '        Dim XRawNIntervals As Integer = Int(XAxisPixelLength / XRawPixelsPerInterval) 'The Raw number of axis annotation intervals based on the Raw pixels per interval specification.
    '        Dim XRawInterval As Double = (XMaxSeriesVal - XMinSeriesVal) / XRawNIntervals 'First calculate the Raw Interval
    '        Dim XPrefInterval As Double = PreferredInterval(XRawInterval) 'The preferred interval has the significant digits: 1, 2, 2.5, 5, 10
    '        Dim XPrefMin As Double = Math.Floor(XMinSeriesVal / XPrefInterval) * XPrefInterval 'The preferred Axis Minimum for the Chart display
    '        Dim XPrefMax As Double = Math.Ceiling(XMaxSeriesVal / XPrefInterval) * XPrefInterval 'The preferred Axis Maximum for the Chart display

    '        'Calculate the Y Axis display settings:
    '        Dim YMinSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Min(" & YFieldName & ")", "")
    '        Dim YMaxSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Max(" & YFieldName & ")", "")
    '        Dim YRawPixelsPerInterval As Integer = 100 'Default number of pixels between each annotated axis label along the axis
    '        Dim YAxisLength As Single = myParent.Chart1.ChartAreas(0).InnerPlotPosition.Height 'Height in relative coordinates, which range from 0 to 100.
    '        Dim ChartPixelHeight As Integer = myParent.Chart1.Height 'The width of the entire chart image in pixels.
    '        Dim YAxisPixelLength As Integer = Int(ChartPixelHeight * YAxisLength / 100)
    '        Dim YRawNIntervals As Integer = Int(YAxisPixelLength / YRawPixelsPerInterval) 'The Raw number of axis annotation intervals based on the Raw pixels per interval specification.
    '        Dim YRawInterval As Double = (YMaxSeriesVal - YMinSeriesVal) / YRawNIntervals 'First calculate the Raw Interval
    '        Dim YPrefInterval As Double = PreferredInterval(YRawInterval) 'The preferred interval has the significant digits: 1, 2, 2.5, 5, 10
    '        Dim YPrefMin As Double = Math.Floor(YMinSeriesVal / YPrefInterval) * YPrefInterval 'The preferred Axis Minimum for the Chart display
    '        Dim YPrefMax As Double = Math.Ceiling(YMaxSeriesVal / YPrefInterval) * YPrefInterval 'The preferred Axis Maximum for the Chart display

    '        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                   <ChartArea>
    '                       <Name><%= ChartAreaName %></Name>
    '                       <AxisX>
    '                           <Title>
    '                               <Text><%= XAxisTitle %></Text>
    '                               <Alignment>Center</Alignment>
    '                               <ForeColor>-16777216</ForeColor>
    '                               <Font>
    '                                   <Name>Microsoft Sans Serif</Name>
    '                                   <Size>12</Size>
    '                                   <Bold>true</Bold>
    '                                   <Italic>false</Italic>
    '                                   <Strikeout>false</Strikeout>
    '                                   <Underline>false</Underline>
    '                               </Font>
    '                           </Title>
    '                           <LabelStyleFormat/>
    '                           <Minimum><%= XPrefMin %></Minimum>
    '                           <AutoMinimum>false</AutoMinimum>
    '                           <Maximum><%= XPrefMax %></Maximum>
    '                           <AutoMaximum>false</AutoMaximum>
    '                           <LineWidth>1</LineWidth>
    '                           <Interval><%= XPrefInterval %></Interval>
    '                           <AutoInterval>true</AutoInterval>
    '                           <IntervalOffset>0</IntervalOffset>
    '                           <Crossing>NaN</Crossing>
    '                           <Scrollbar>false</Scrollbar>
    '                           <Logarithmic>false</Logarithmic>
    '                           <RoundAxisValues>true</RoundAxisValues>
    '                       </AxisX>
    '                       <AxisX2>
    '                           <Title>
    '                               <Text/>
    '                               <Alignment>Center</Alignment>
    '                               <ForeColor>-16777216</ForeColor>
    '                               <Font>
    '                                   <Name>Microsoft Sans Serif</Name>
    '                                   <Size>8</Size>
    '                                   <Bold>false</Bold>
    '                                   <Italic>false</Italic>
    '                                   <Strikeout>false</Strikeout>
    '                                   <Underline>false</Underline>
    '                               </Font>
    '                           </Title>
    '                           <LabelStyleFormat/>
    '                           <Minimum>-10</Minimum>
    '                           <AutoMinimum>true</AutoMinimum>
    '                           <Maximum>10</Maximum>
    '                           <AutoMaximum>true</AutoMaximum>
    '                           <LineWidth>1</LineWidth>
    '                           <Interval>0</Interval>
    '                           <AutoInterval>true</AutoInterval>
    '                           <IntervalOffset>0</IntervalOffset>
    '                           <Crossing>NaN</Crossing>
    '                           <Scrollbar>false</Scrollbar>
    '                           <Logarithmic>false</Logarithmic>
    '                           <RoundAxisValues>true</RoundAxisValues>
    '                       </AxisX2>
    '                       <AxisY>
    '                           <Title>
    '                               <Text><%= YAxisTitle %></Text>
    '                               <Alignment>Center</Alignment>
    '                               <ForeColor>-16777216</ForeColor>
    '                               <Font>
    '                                   <Name>Microsoft Sans Serif</Name>
    '                                   <Size>12</Size>
    '                                   <Bold>true</Bold>
    '                                   <Italic>false</Italic>
    '                                   <Strikeout>false</Strikeout>
    '                                   <Underline>false</Underline>
    '                               </Font>
    '                           </Title>
    '                           <LabelStyleFormat/>
    '                           <Minimum><%= YPrefMin %></Minimum>
    '                           <AutoMinimum>false</AutoMinimum>
    '                           <Maximum><%= YPrefMax %></Maximum>
    '                           <AutoMaximum>false</AutoMaximum>
    '                           <LineWidth>1</LineWidth>
    '                           <Interval><%= YPrefInterval %></Interval>
    '                           <AutoInterval>true</AutoInterval>
    '                           <IntervalOffset>0</IntervalOffset>
    '                           <Crossing>NaN</Crossing>
    '                           <Scrollbar>false</Scrollbar>
    '                           <Logarithmic>false</Logarithmic>
    '                       </AxisY>
    '                       <AxisY2>
    '                           <Title>
    '                               <Text/>
    '                               <Alignment>Center</Alignment>
    '                               <ForeColor>-16777216</ForeColor>
    '                               <Font>
    '                                   <Name>Microsoft Sans Serif</Name>
    '                                   <Size>8</Size>
    '                                   <Bold>false</Bold>
    '                                   <Italic>false</Italic>
    '                                   <Strikeout>false</Strikeout>
    '                                   <Underline>false</Underline>
    '                               </Font>
    '                           </Title>
    '                           <LabelStyleFormat/>
    '                           <Minimum>-20</Minimum>
    '                           <AutoMinimum>true</AutoMinimum>
    '                           <Maximum>20</Maximum>
    '                           <AutoMaximum>true</AutoMaximum>
    '                           <LineWidth>1</LineWidth>
    '                           <Interval>0</Interval>
    '                           <AutoInterval>true</AutoInterval>
    '                           <IntervalOffset>0</IntervalOffset>
    '                           <Crossing>NaN</Crossing>
    '                           <Scrollbar>false</Scrollbar>
    '                           <Logarithmic>false</Logarithmic>
    '                       </AxisY2>
    '                   </ChartArea>

    '        Return XDoc.<ChartArea>
    '    Else

    '    End If

    'End Function

    'Private Function ChartArea(Exists As Boolean, ChartAreaName As String, TableName As String, XFieldName As String, YFieldName As String, XAxisTitle As String, YAxisTitle As String) As IEnumerable(Of XElement)
    Private Function ChartArea(Exists As Boolean, ChartAreaName As String, XMinSeriesVal As Double, XMaxSeriesVal As Double, YMinSeriesVal As Double, YMaxSeriesVal As Double, XAxisTitle As String, YAxisTitle As String) As IEnumerable(Of XElement)
        'Generate a ChartInfo ChartArea from the specified XFieldName and YFieldName.

        If Exists Then
            'Calculate the X Axis display settings:
            'Dim XMinSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Min(" & XFieldName & ")", "")
            'If Double.IsInfinity(XMinSeriesVal) Then
            '    XMinSeriesVal = DataSource.Data.Tables(TableName).Rows(1).Item(XFieldName)
            'End If
            'Dim XMaxSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Max(" & XFieldName & ")", "")
            'If Double.IsInfinity(XMaxSeriesVal) Then
            '    XMaxSeriesVal = DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 2).Item(XFieldName)
            'End If
            Dim XRawPixelsPerInterval As Integer = 100 'Default number of pixels between each annotated axis label along the axis
            Dim XAxisLength As Single = myParent.Chart1.ChartAreas(0).InnerPlotPosition.Width 'Width in relative coordinates, which range from 0 to 100.
            Dim ChartPixelWidth As Integer = myParent.Chart1.Width 'The width of the entire chart image in pixels.
            Dim XAxisPixelLength As Integer = Int(ChartPixelWidth * XAxisLength / 100)
            Dim XRawNIntervals As Integer = Int(XAxisPixelLength / XRawPixelsPerInterval) 'The Raw number of axis annotation intervals based on the Raw pixels per interval specification.
            Dim XRawInterval As Double = (XMaxSeriesVal - XMinSeriesVal) / XRawNIntervals 'First calculate the Raw Interval
            Dim XPrefInterval As Double = PreferredInterval(XRawInterval) 'The preferred interval has the significant digits: 1, 2, 2.5, 5, 10
            Dim XPrefMin As Double = Math.Floor(XMinSeriesVal / XPrefInterval) * XPrefInterval 'The preferred Axis Minimum for the Chart display
            Dim XPrefMax As Double = Math.Ceiling(XMaxSeriesVal / XPrefInterval) * XPrefInterval 'The preferred Axis Maximum for the Chart display

            'Calculate the Y Axis display settings:
            'Dim YMinSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Min(" & YFieldName & ")", "")
            'Dim YMaxSeriesVal As Double = DataSource.Data.Tables(TableName).Compute("Max(" & YFieldName & ")", "")
            Dim YRawPixelsPerInterval As Integer = 100 'Default number of pixels between each annotated axis label along the axis
            Dim YAxisLength As Single = myParent.Chart1.ChartAreas(0).InnerPlotPosition.Height 'Height in relative coordinates, which range from 0 to 100.
            Dim ChartPixelHeight As Integer = myParent.Chart1.Height 'The width of the entire chart image in pixels.
            Dim YAxisPixelLength As Integer = Int(ChartPixelHeight * YAxisLength / 100)
            Dim YRawNIntervals As Integer = Int(YAxisPixelLength / YRawPixelsPerInterval) 'The Raw number of axis annotation intervals based on the Raw pixels per interval specification.
            Dim YRawInterval As Double = (YMaxSeriesVal - YMinSeriesVal) / YRawNIntervals 'First calculate the Raw Interval
            Dim YPrefInterval As Double = PreferredInterval(YRawInterval) 'The preferred interval has the significant digits: 1, 2, 2.5, 5, 10
            Dim YPrefMin As Double = Math.Floor(YMinSeriesVal / YPrefInterval) * YPrefInterval 'The preferred Axis Minimum for the Chart display
            Dim YPrefMax As Double = Math.Ceiling(YMaxSeriesVal / YPrefInterval) * YPrefInterval 'The preferred Axis Maximum for the Chart display

            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                       <ChartArea>
                           <Name><%= ChartAreaName %></Name>
                           <LegendDocking>Right</LegendDocking>
                           <AxisX>
                               <Title>
                                   <Text><%= XAxisTitle %></Text>
                                   <Alignment>Center</Alignment>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>12</Size>
                                       <Bold>true</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </Title>
                               <LabelStyle>
                                   <Format/>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>10</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </LabelStyle>
                               <Minimum><%= XPrefMin %></Minimum>
                               <AutoMinimum>false</AutoMinimum>
                               <Maximum><%= XPrefMax %></Maximum>
                               <AutoMaximum>false</AutoMaximum>
                               <LineWidth>1</LineWidth>
                               <Interval><%= XPrefInterval %></Interval>
                               <AutoInterval>true</AutoInterval>
                               <IntervalOffset>0</IntervalOffset>
                               <Crossing>NaN</Crossing>
                               <Scrollbar>false</Scrollbar>
                               <Logarithmic>false</Logarithmic>
                               <RoundAxisValues>true</RoundAxisValues>
                           </AxisX>
                           <AxisX2>
                               <Title>
                                   <Text/>
                                   <Alignment>Center</Alignment>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>8</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </Title>
                               <LabelStyle>
                                   <Format/>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>10</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </LabelStyle>
                               <LabelStyleFormat/>
                               <Minimum>-10</Minimum>
                               <AutoMinimum>true</AutoMinimum>
                               <Maximum>10</Maximum>
                               <AutoMaximum>true</AutoMaximum>
                               <LineWidth>1</LineWidth>
                               <Interval>0</Interval>
                               <AutoInterval>true</AutoInterval>
                               <IntervalOffset>0</IntervalOffset>
                               <Crossing>NaN</Crossing>
                               <Scrollbar>false</Scrollbar>
                               <Logarithmic>false</Logarithmic>
                               <RoundAxisValues>true</RoundAxisValues>
                           </AxisX2>
                           <AxisY>
                               <Title>
                                   <Text><%= YAxisTitle %></Text>
                                   <Alignment>Center</Alignment>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>12</Size>
                                       <Bold>true</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </Title>
                               <LabelStyle>
                                   <Format/>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>10</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </LabelStyle>
                               <LabelStyleFormat/>
                               <Minimum><%= YPrefMin %></Minimum>
                               <AutoMinimum>false</AutoMinimum>
                               <Maximum><%= YPrefMax %></Maximum>
                               <AutoMaximum>false</AutoMaximum>
                               <LineWidth>1</LineWidth>
                               <Interval><%= YPrefInterval %></Interval>
                               <AutoInterval>true</AutoInterval>
                               <IntervalOffset>0</IntervalOffset>
                               <Crossing>NaN</Crossing>
                               <Scrollbar>false</Scrollbar>
                               <Logarithmic>false</Logarithmic>
                           </AxisY>
                           <AxisY2>
                               <Title>
                                   <Text/>
                                   <Alignment>Center</Alignment>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>8</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </Title>
                               <LabelStyle>
                                   <Format/>
                                   <ForeColor>-16777216</ForeColor>
                                   <Font>
                                       <Name>Microsoft Sans Serif</Name>
                                       <Size>10</Size>
                                       <Bold>false</Bold>
                                       <Italic>false</Italic>
                                       <Strikeout>false</Strikeout>
                                       <Underline>false</Underline>
                                   </Font>
                               </LabelStyle>
                               <LabelStyleFormat/>
                               <Minimum>-20</Minimum>
                               <AutoMinimum>true</AutoMinimum>
                               <Maximum>20</Maximum>
                               <AutoMaximum>true</AutoMaximum>
                               <LineWidth>1</LineWidth>
                               <Interval>0</Interval>
                               <AutoInterval>true</AutoInterval>
                               <IntervalOffset>0</IntervalOffset>
                               <Crossing>NaN</Crossing>
                               <Scrollbar>false</Scrollbar>
                               <Logarithmic>false</Logarithmic>
                           </AxisY2>
                       </ChartArea>

            Return XDoc.<ChartArea>
        Else

        End If

    End Function

    Private Function PreferredInterval(ByVal RawInterval As Double) As Double
        'Return a preferred interval value from a raw interval.
        'Preferred intervals are rounded to a number containing fewer significant figures.
        'Examples: Raw    Preferred
        '          0.234  0.25
        '          497    500
        '          89.4   100  
        '          18.1   20

        If Double.IsInfinity(RawInterval) Then RawInterval = 1 'To prevent overflow error.
        If RawInterval = 0 Then RawInterval = 1 'To prevent overflow error.

        'Convert the RawInterval to scientific notation Coeff x 10 ^ Exponent
        Dim Coeff As Double
        Dim Exponent As Integer

        Dim Log10RawInt As Double = Math.Log10(RawInterval)
        Exponent = Math.Floor(Log10RawInt)
        Coeff = RawInterval / 10 ^ Exponent

        Dim PreferredCoeff = NearestPrefCoeff(Coeff, {1, 2, 2.5, 5, 10}) 'Select the coefficient from the preferred coefficient list - the one nearest to the raw coefficient

        'Return PreferredCoeff * 10 ^ Exponent 'The preferred interval is reconstructed from the preferred coefficient and the exponent

        Dim CalcPrefInterval = PreferredCoeff * 10 ^ Exponent 'The preferred interval is reconstructed from the preferred coefficient and the exponent
        If CalcPrefInterval = 0 Then
            Return 1
        Else
            Return CalcPrefInterval
        End If


    End Function

    Private Function NearestPrefCoeff(ByVal RawCoeff As Double, ByVal PrefCoeff() As Double) As Double
        'Returns the nearest preferred coefficient to the Raw Coefficient

        If PrefCoeff.Count > 0 Then
            Dim Nearest As Double = PrefCoeff(0) 'The current nearest preferred coefficent
            Dim NearestAbsDiff As Double = Math.Abs(RawCoeff - PrefCoeff(0)) 'The current nearest absolute difference between the Raw Coefficient and the Preferred Coefficient
            Dim AbsDiff As Double 'The absolute difference between the Raw Coefficient and the Preferred Coefficient
            For Each item In PrefCoeff
                AbsDiff = Math.Abs(RawCoeff - item)
                If AbsDiff < NearestAbsDiff Then
                    Nearest = item
                    NearestAbsDiff = AbsDiff
                End If
            Next
            Return Nearest
        Else
            Main.Message.AddWarning("There are no preferred coefficents in the list." & vbCrLf)
            Return RawCoeff
        End If
    End Function

    Private Sub btnResetSeries_Click(sender As Object, e As EventArgs) Handles btnResetSeries.Click
        UpdateChartTypeList("")
        dgvSeries.Rows.Clear()

        'Add in initial row:
        Dim Field1 As String = cboXField.Items(0)
        Dim Field2 As String = cboYField.Items(1)
        If cboXField.Items.Count > 0 Then
            Field1 = cboXField.Items(0)
        Else
            Field1 = ""
        End If
        If cboYField.Items.Count > 1 Then
            Field2 = cboYField.Items(1)
        Else
            Field2 = ""
        End If
        'dgvSeries.Rows.Add("Point", Field1, "X", Field2, "Y")
        dgvSeries.Rows.Add("Series1", "Continuous", "Point", "ChartArea1", Field1, "X", "", Field2, "Y", "", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0")


        'dgvDiscrete.Rows.Clear()

        ''Add in initial row:
        'Dim DiscField1 As String = cboDiscXField.Items(0)
        'Dim DiscField2 As String = cboDiscYField.Items(1)
        'If cboDiscXField.Items.Count > 0 Then
        '    DiscField1 = cboDiscXField.Items(0)
        'Else
        '    DiscField1 = ""
        'End If
        'If cboDiscYField.Items.Count > 1 Then
        '    DiscField2 = cboDiscYField.Items(1)
        'Else
        '    DiscField2 = ""
        'End If
        'dgvDiscrete.Rows.Add("Point", DiscField1, "X", DiscField2, "Y")


        'DataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
        'DataGridView1.AutoResizeColumns()
    End Sub

    Private Sub dgvContinuous_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles dgvSeries.DataError

        'If e.Exception.Message = "DataGridViewComboBoxCell value Is Not valid." Then
        If e.Exception.Message = "DataGridViewComboBoxCell value is not valid." Then
            'Ignore the error
        Else
            Main.Message.AddWarning("dgvContinuous.DataError - " & vbCrLf & e.Exception.Message & vbCrLf)
        End If
    End Sub

    Private Sub dgvDiscrete_DataError(sender As Object, e As DataGridViewDataErrorEventArgs)

        'If e.Exception.Message = "DataGridViewComboBoxCell value Is Not valid." Then
        If e.Exception.Message = "DataGridViewComboBoxCell value is not valid." Then
            'Ignore the error
        Else
            Main.Message.AddWarning("dgvDiscrete.DataError - " & vbCrLf & e.Exception.Message & vbCrLf)
        End If
    End Sub

    'Private Sub AddSeries(ByRef myChart As DataVisualization.Charting.Chart, ChartArea As String, ChartType As DataVisualization.Charting.SeriesChartType, )

    'End Sub

    'Private Sub AddSeries(ByRef myChart As DataVisualization.Charting.Chart, ByVal RowNo As Integer)
    'Private Sub AddContSeries(ByRef myChart As DataVisualization.Charting.Chart, ByVal RowNo As Integer)
    Private Sub AddSeries(ByRef myChart As DataVisualization.Charting.Chart, ByVal RowNo As Integer)
        Try
            'Add a series to the chart.
            'myChart.Series.Add(dgvSeries.Rows(RowNo).Cells(3).Value)
            myChart.Series.Add(dgvSeries.Rows(RowNo).Cells(0).Value) 'Argument: Series Name

            'Chart Type:
            'Select Case dgvSeries.Rows(RowNo).Cells(0).Value
            Select Case dgvSeries.Rows(RowNo).Cells(2).Value
                Case "Point"
                    myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Point
                Case "Line"
                    myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Line
                Case "Bar"
                    myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Bar
                Case Else
                    'Main.Message.AddWarning("Unknown Chart Type in row " & RowNo & " : " & dgvSeries.Rows(RowNo).Cells(0).Value & vbCrLf)
                    Main.Message.AddWarning("Unknown Chart Type in row " & RowNo & " : " & dgvSeries.Rows(RowNo).Cells(2).Value & vbCrLf)
                    Exit Sub
            End Select

            If DataSource Is Nothing Then
                Main.Message.AddWarning("The chart data source has not been specified." & vbCrLf)
            Else
                'myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, dgvContinuous.Rows(RowNo).Cells(2).Value, DataSource.Data.Tables(TableName).DefaultView, dgvContinuous.Rows(RowNo).Cells(4).Value)
                'myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(2).Value, DataSource.Data.Tables(ContTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(4).Value)
                If dgvSeries.Rows(RowNo).Cells(1).Value = "Continuous" Then
                    myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(4).Value, DataSource.Data.Tables(ContTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(7).Value) 'XValue, XField, YValue, YFields
                ElseIf dgvSeries.Rows(RowNo).Cells(1).Value = "Discrete" Then
                    myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(DiscTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(4).Value, DataSource.Data.Tables(DiscTableName).DefaultView, dgvSeries.Rows(RowNo).Cells(7).Value)
                Else
                    Main.Message.AddWarning("Unknown series continuity in row " & RowNo & " : " & dgvSeries.Rows(RowNo).Cells(1).Value & vbCrLf)
                End If
            End If

            'Select Axes
            'If dgvSeries.Rows(RowNo).Cells(3).Value = "X2" Then
            If dgvSeries.Rows(RowNo).Cells(5).Value = "X2" Then
                myChart.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Secondary
            Else
                myChart.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Primary
            End If

            'If dgvSeries.Rows(RowNo).Cells(5).Value = "Y2" Then
            If dgvSeries.Rows(RowNo).Cells(8).Value = "Y2" Then
                myChart.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Secondary
            Else
                myChart.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Primary
            End If

            'Add other settings:

            'If dgvSeries.Rows(RowNo).Cells(6).Value = "No" Then 'No marker fill
            If dgvSeries.Rows(RowNo).Cells(11).Value = "No" Then 'No marker fill
                myChart.Series(RowNo).MarkerColor = Color.Transparent
            Else
                'myChart.Series(RowNo).MarkerColor = dgvSeries.Rows(RowNo).Cells(7).Style.BackColor
                myChart.Series(RowNo).MarkerColor = dgvSeries.Rows(RowNo).Cells(12).Style.BackColor
            End If

            'myChart.Series(RowNo).MarkerBorderColor = dgvSeries.Rows(RowNo).Cells(8).Style.BackColor
            myChart.Series(RowNo).MarkerBorderColor = dgvSeries.Rows(RowNo).Cells(13).Style.BackColor

            'UPDATE 26/6/22
            'myChart.Series(RowNo).LegendText = dgvSeries.Rows(RowNo).Cells(9).Value
            myChart.Series(RowNo).LegendText = dgvSeries.Rows(RowNo).Cells(10).Value

            'myChart.Series(RowNo).MarkerBorderWidth = dgvSeries.Rows(RowNo).Cells(10).Value
            myChart.Series(RowNo).MarkerBorderWidth = dgvSeries.Rows(RowNo).Cells(14).Value
            'myChart.Series(RowNo).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), dgvSeries.Rows(RowNo).Cells(11).Value)
            myChart.Series(RowNo).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), dgvSeries.Rows(RowNo).Cells(15).Value)
            'myChart.Series(RowNo).MarkerSize = dgvSeries.Rows(RowNo).Cells(12).Value
            myChart.Series(RowNo).MarkerSize = dgvSeries.Rows(RowNo).Cells(16).Value
            'myChart.Series(RowNo).MarkerStep = dgvSeries.Rows(RowNo).Cells(13).Value
            myChart.Series(RowNo).MarkerStep = dgvSeries.Rows(RowNo).Cells(17).Value
            'myChart.Series(RowNo).Color = dgvSeries.Rows(RowNo).Cells(14).Style.BackColor
            myChart.Series(RowNo).Color = dgvSeries.Rows(RowNo).Cells(18).Style.BackColor
            'myChart.Series(RowNo).BorderWidth = dgvSeries.Rows(RowNo).Cells(15).Value
            myChart.Series(RowNo).BorderWidth = dgvSeries.Rows(RowNo).Cells(19).Value

            myChart.ChartAreas(0).AxisX.RoundAxisValues()
            myChart.ChartAreas(0).AxisX2.RoundAxisValues()
            myChart.SuppressExceptions = True
        Catch ex As Exception
            Main.Message.AddWarning("Add series: " & vbCrLf & ex.Message & vbCrLf)
        End Try

    End Sub

    Private Sub dgvSeries_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvSeries.CellClick
        Dim CellCol As Integer = e.ColumnIndex

        If CellCol = 11 Then 'Marker fill changed.
            Dim CellRow As Integer = e.RowIndex
            If myParent.SeriesInfo(CellRow).<Marker>.<Fill>.Value = dgvSeries.Rows(CellRow).Cells(11).Value Then
                'The fill setting has not been changed.
            Else
                myParent.SeriesInfo(CellRow).<Marker>.<Fill>.Value = dgvSeries.Rows(CellRow).Cells(11).Value
                Modified = True
            End If
        ElseIf CellCol = 12 Then 'Marker color changed.
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.ShowDialog()
            If dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                'The marker color has not been changed.
            Else
                dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                myParent.SeriesInfo(CellRow).<Marker>.<Color>.Value = dgvSeries.Rows(CellRow).Cells(12).Style.BackColor.ToArgb.ToString
                If dgvSeries.Rows(CellRow).Cells(11).Value = "Yes" Then
                    myParent.Chart1.Series(CellRow).MarkerColor = dgvSeries.Rows(CellRow).Cells(12).Style.BackColor
                Else
                    myParent.Chart1.Series(CellRow).MarkerColor = Color.Transparent
                End If
                Modified = True
            End If
        ElseIf CellCol = 13 Then 'Marker border color changed
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.ShowDialog()
            If dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                'The marker border color has not been changed.
            Else
                dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                myParent.SeriesInfo(CellRow).<Marker>.<BorderColor>.Value = dgvSeries.Rows(CellRow).Cells(13).Style.BackColor.ToArgb.ToString
                myParent.Chart1.Series(CellRow).MarkerBorderColor = dgvSeries.Rows(CellRow).Cells(13).Style.BackColor
                Modified = True
            End If
        ElseIf CellCol = 18 Then 'Line color changed
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.ShowDialog()
            If dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                'The line color has not been changed.
            Else
                dgvSeries.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                myParent.SeriesInfo(CellRow).<Color>.Value = dgvSeries.Rows(CellRow).Cells(18).Style.BackColor.ToArgb.ToString
                myParent.Chart1.Series(CellRow).Color = dgvSeries.Rows(CellRow).Cells(18).Style.BackColor
                Modified = True
            End If
        End If
    End Sub

    'NOTE: Adding separate Continuous and Discrete series will result in incorrest RowNo seies indexes. Update the code to use a singler DataGridView to store all distribution display settings. Add a column to indicate Continuous or Discrete distributions. ********************************************************
    'Private Sub AddDiscSeries(ByRef myChart As DataVisualization.Charting.Chart, ByVal RowNo As Integer)
    '    Try
    '        'Add a discrete series to the chart.
    '        myChart.Series.Add(dgvDiscrete.Rows(RowNo).Cells(3).Value)

    '        'Chart Type:
    '        Select Case dgvDiscrete.Rows(RowNo).Cells(0).Value
    '            Case "Point"
    '                myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Point
    '            Case "Line"
    '                myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Line
    '            Case "Bar"
    '                myChart.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Bar
    '            Case Else
    '                Main.Message.AddWarning("Unknown Chart Type in row " & RowNo & " : " & dgvDiscrete.Rows(RowNo).Cells(0).Value & vbCrLf)
    '                Exit Sub
    '        End Select

    '        If DataSource Is Nothing Then
    '            Main.Message.AddWarning("The chart data source has not been specified." & vbCrLf)
    '        Else
    '            'myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, dgvContinuous.Rows(RowNo).Cells(2).Value, DataSource.Data.Tables(TableName).DefaultView, dgvContinuous.Rows(RowNo).Cells(4).Value)
    '            myChart.Series(RowNo).Points.DataBindXY(DataSource.Data.Tables(DiscTableName).DefaultView, dgvDiscrete.Rows(RowNo).Cells(2).Value, DataSource.Data.Tables(DiscTableName).DefaultView, dgvDiscrete.Rows(RowNo).Cells(4).Value)
    '        End If

    '        'Select Axes
    '        If dgvDiscrete.Rows(RowNo).Cells(3).Value = "X2" Then
    '            myChart.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Secondary
    '        Else
    '            myChart.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Primary
    '        End If

    '        If dgvDiscrete.Rows(RowNo).Cells(5).Value = "Y2" Then
    '            myChart.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Secondary
    '        Else
    '            myChart.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Primary
    '        End If

    '        'Add other settings:

    '        If dgvDiscrete.Rows(RowNo).Cells(6).Value = "No" Then 'No marker fill
    '            myChart.Series(RowNo).MarkerColor = Color.Transparent
    '        Else
    '            myChart.Series(RowNo).MarkerColor = dgvDiscrete.Rows(RowNo).Cells(7).Style.BackColor
    '        End If

    '        myChart.Series(RowNo).MarkerBorderColor = dgvDiscrete.Rows(RowNo).Cells(8).Style.BackColor

    '        'UPDATE 26/6/22
    '        myChart.Series(RowNo).LegendText = dgvDiscrete.Rows(RowNo).Cells(9).Value

    '        myChart.Series(RowNo).MarkerBorderWidth = dgvDiscrete.Rows(RowNo).Cells(10).Value
    '        myChart.Series(RowNo).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), dgvDiscrete.Rows(RowNo).Cells(11).Value)
    '        myChart.Series(RowNo).MarkerSize = dgvDiscrete.Rows(RowNo).Cells(12).Value
    '        myChart.Series(RowNo).MarkerStep = dgvDiscrete.Rows(RowNo).Cells(13).Value
    '        myChart.Series(RowNo).Color = dgvDiscrete.Rows(RowNo).Cells(14).Style.BackColor
    '        myChart.Series(RowNo).BorderWidth = dgvDiscrete.Rows(RowNo).Cells(15).Value

    '        myChart.ChartAreas(0).AxisX.RoundAxisValues()
    '        myChart.ChartAreas(0).AxisX2.RoundAxisValues()
    '        myChart.SuppressExceptions = True
    '    Catch ex As Exception
    '        Main.Message.AddWarning("Add series: " & vbCrLf & ex.Message & vbCrLf)
    '    End Try

    'End Sub

    Private Sub btnAddTitle_Click(sender As Object, e As EventArgs) Handles btnAddTitle.Click
        'Add a new Chart Title:

        If ChartName = "" Then
            Main.Message.AddWarning("Please open a chart." & vbCrLf)
            Exit Sub
        End If

        Dim NewTitleNo As Integer = myParent.Chart1.Titles.Count

        Dim NewTitleName As String = "Title" & NewTitleNo + 1
        myParent.Chart1.Titles.Add(NewTitleName)

        txtTitleName.Text = NewTitleName
        TitleNo = NewTitleNo
        txtNTitlesRecords.Text = myParent.Chart1.Titles.Count
        txtChartTitle.Text = "Title"
        Dim myFontStyle As FontStyle
        myFontStyle = FontStyle.Regular
        myFontStyle = myFontStyle Or FontStyle.Bold
        txtChartTitle.Font = New Font("Microsoft Sans Serif", 12, myFontStyle)

        Dim NewTitle As New XElement("Title")
        Dim TitleName As New XElement("Name", NewTitleName)
        NewTitle.Add(TitleName)
        Dim TitleArea As New XElement("ChartArea", "ChartArea1")
        NewTitle.Add(TitleArea)
        Dim TitleText As New XElement("Text", "Title")
        NewTitle.Add(TitleText)
        Dim TitleOrientation As New XElement("TextOrientation", "Auto")
        NewTitle.Add(TitleOrientation)
        Dim TitleAlignment As New XElement("Alignment", "TopCenter")
        NewTitle.Add(TitleAlignment)
        Dim TitleForeColor As New XElement("ForeColor", "-16777216")
        NewTitle.Add(TitleForeColor)
        Dim TitleFont As New XElement("Font")
        Dim FontName As New XElement("Name", "Microsoft Sans Serif")
        TitleFont.Add(FontName)
        Dim FontSize As New XElement("Size", "12")
        TitleFont.Add(FontSize)
        Dim FontBold As New XElement("Bold", "true")
        TitleFont.Add(FontBold)
        Dim FontItalic As New XElement("Italic", "false")
        TitleFont.Add(FontItalic)
        Dim FontStrikeout As New XElement("Strikeout", "false")
        TitleFont.Add(FontStrikeout)
        Dim FontUnderline As New XElement("Underline", "false")
        TitleFont.Add(FontUnderline)
        NewTitle.Add(TitleFont)

        myParent.TitleInfo(NewTitleNo - 1).AddAfterSelf(NewTitle)

        myParent.Chart1.Titles(TitleNo).Font = txtChartTitle.Font
        myParent.Chart1.Titles(TitleNo).Text = txtChartTitle.Text

        Modified = True

    End Sub

    Private Sub btnDelTitle_Click(sender As Object, e As EventArgs) Handles btnDelTitle.Click
        'Delete the title.
        myParent.Chart1.Titles.RemoveAt(TitleNo)
        myParent.TitleInfo(TitleNo).Remove()
        UpdateTitlesTabSettings()
        Modified = True
    End Sub

    Private Sub btnNextTitle_Click(sender As Object, e As EventArgs) Handles btnNextTitle.Click
        'Show the next title.
        If TitleNo + 1 = myParent.Chart1.Titles.Count Then
            Main.Message.Add("Already at the last title." & vbCrLf)
        Else
            TitleNo += 1
            ShowTitle()
        End If
    End Sub

    Private Sub btnPrevTitle_Click(sender As Object, e As EventArgs) Handles btnPrevTitle.Click
        'Show the previous title.
        If TitleNo = 0 Then
            Main.Message.Add("Already at the first title." & vbCrLf)
        Else
            TitleNo -= 1
            ShowTitle()
        End If
    End Sub

    Private Sub ShowTitle()
        'Show the Title information corresponding to TitleNo.
        If TitleNo + 1 > myParent.Chart1.Titles.Count Then TitleNo = myParent.Chart1.Titles.Count - 1
        If TitleNo < 0 Then TitleNo = 0

        Dim NTitles As Integer = myParent.TitleInfo.Count
        txtNTitlesRecords.Text = NTitles
        Dim TitleName As String

        If NTitles = 0 Then
            TitleNo = -1
            txtTitleName.Text = ""
            txtChartTitle.Text = ""
            cmbAlignment.SelectedIndex = 0
            cmbOrientation.SelectedIndex = 0
        Else
            txtTitleName.Text = myParent.TitleInfo(TitleNo).<Name>.Value
            If myParent.TitleInfo(TitleNo).<ChartArea>.Value = Nothing Then
                cmbTitleChartArea.SelectedIndex = -1
            Else
                cmbTitleChartArea.SelectedIndex = cmbTitleChartArea.FindStringExact(myParent.TitleInfo(TitleNo).<ChartArea>.Value)
            End If
            txtChartTitle.Text = myParent.TitleInfo(TitleNo).<Text>.Value
            txtChartTitle.ForeColor = Color.FromArgb(myParent.TitleInfo(TitleNo).<ForeColor>.Value)
            Dim myFontStyle As FontStyle
            Dim myFontSize As Single = myParent.TitleInfo(TitleNo).<Font>.<Size>.Value
            myFontStyle = FontStyle.Regular
            If myParent.TitleInfo(TitleNo).<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.TitleInfo(TitleNo).<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.TitleInfo(TitleNo).<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.TitleInfo(TitleNo).<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            txtChartTitle.Font = New Font(myParent.TitleInfo(TitleNo).<Font>.<Name>.Value, myFontSize, myFontStyle)
            cmbAlignment.SelectedIndex = cmbAlignment.FindStringExact(myParent.TitleInfo(TitleNo).<Alignment>.Value)
            cmbOrientation.SelectedIndex = cmbOrientation.FindStringExact(myParent.TitleInfo(TitleNo).<TextOrientation>.Value)
        End If
    End Sub

    Private Sub cmbTitleChartArea_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbTitleChartArea.SelectedIndexChanged
        'Update the Title ChartArea.
        'If cmbTitleChartArea.Focused Then
        If cmbTitleChartArea.SelectedIndex = -1 Then
            'No item selected
        Else
            myParent.Chart1.Titles(TitleNo).DockedToChartArea = cmbTitleChartArea.SelectedItem.ToString
            myParent.Chart1.Titles(TitleNo).IsDockedInsideChartArea = False
            'myChart.Titles(TitleNo).DockingOffset = 0 'Vertical offset!
            'myChart.Titles(TitleNo).Alignment = ContentAlignment.TopCenter
            myParent.Chart1.Titles(TitleNo).Docking = DataVisualization.Charting.Docking.Top

            myParent.TitleInfo(TitleNo).<ChartArea>.Value = cmbTitleChartArea.SelectedItem.ToString
            Modified = True
        End If
        'End If
    End Sub



    Private Sub txtChartTitle_LostFocus(sender As Object, e As EventArgs) Handles txtChartTitle.LostFocus
        'Update the Title text
        Try
            If myParent.Chart1.Titles(TitleNo).Text = txtChartTitle.Text Then
                'The title has not been changed.
            Else
                myParent.Chart1.Titles(TitleNo).Text = txtChartTitle.Text    'Update the Chart display
                myParent.TitleInfo(TitleNo).<Text>.Value = txtChartTitle.Text 'Update the ChartInfo XML
                Modified = True
            End If
        Catch ex As Exception
            Main.Message.AddWarning("txtChartTitle.LostFocus: " & vbCrLf & ex.Message & vbCrLf)
        End Try


    End Sub

    Private Sub cmbAlignment_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbAlignment.SelectedIndexChanged
        'Update the Title alignment:

        If cmbAlignment.SelectedItem IsNot Nothing Then
            Try
                myParent.Chart1.Titles(TitleNo).Alignment = [Enum].Parse(GetType(ContentAlignment), cmbAlignment.SelectedItem.ToString) 'Update the Chart
                myParent.TitleInfo(TitleNo).<Alignment>.Value = cmbAlignment.SelectedItem.ToString 'Update the ChartInfo XDocument (AreaInfo() refers to the Areas in ChartInfo)
                Modified = True
            Catch ex As Exception
                Main.Message.AddWarning("Chart title alignment: " & ex.Message & vbCrLf)
                Main.Message.Add("cmbAlignment.SelectedItem.ToString: " & cmbAlignment.SelectedItem.ToString & vbCrLf)
                Main.Message.Add("cmbAlignment.SelectedIndex: " & cmbAlignment.SelectedIndex & vbCrLf)
            End Try
        End If

    End Sub

    Private Sub cmbOrientation_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbOrientation.SelectedIndexChanged
        'Update the Title orientation:

        If cmbOrientation.SelectedItem IsNot Nothing Then
            Try
                myParent.Chart1.Titles(TitleNo).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), cmbOrientation.SelectedItem.ToString) 'Update the Chart
                myParent.TitleInfo(TitleNo).<TextOrientation>.Value = cmbOrientation.SelectedItem.ToString 'Update the ChartInfo XDocument (AreaInfo() refers to the Areas in ChartInfo)
                Modified = True
            Catch ex As Exception
                Main.Message.AddWarning("Text orientation changed: " & ex.Message & vbCrLf)
                Main.Message.Add("cmbOrientation.SelectedItem.ToString: " & cmbOrientation.SelectedItem.ToString & vbCrLf)
                Main.Message.Add("cmbOrientation.SelectedIndex: " & cmbOrientation.SelectedIndex & vbCrLf)
            End Try
        End If
    End Sub

    Private Sub btnChartTitleFont_Click(sender As Object, e As EventArgs) Handles btnChartTitleFont.Click
        'Edit chart title font
        FontDialog1.Font = txtChartTitle.Font
        FontDialog1.ShowDialog()
        'If txtChartTitle.Font = FontDialog1.Font Then
        If txtChartTitle.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtChartTitle.Font = FontDialog1.Font
            myParent.Chart1.Titles(TitleNo).Font = FontDialog1.Font 'Update the Chart

            'Update the ChartInfo XDocument 
            myParent.TitleInfo(TitleNo).<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.TitleInfo(TitleNo).<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.TitleInfo(TitleNo).<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.TitleInfo(TitleNo).<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.TitleInfo(TitleNo).<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.TitleInfo(TitleNo).<Font>.<Underline>.Value = FontDialog1.Font.Underline
            Modified = True
        End If
    End Sub

    Private Sub btnChartTitleColor_Click(sender As Object, e As EventArgs) Handles btnChartTitleColor.Click
        ColorDialog1.Color = txtChartTitle.ForeColor
        ColorDialog1.ShowDialog()
        If txtChartTitle.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtChartTitle.ForeColor = ColorDialog1.Color
            Dim TitleNo As Integer = Val(txtTitlesRecordNo.Text) - 1
            myParent.Chart1.Titles(TitleNo).ForeColor = ColorDialog1.Color 'Update the Chart display
            myParent.TitleInfo(TitleNo).<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString 'Update the ChartInfo XML
            Modified = True
        End If
    End Sub

    '-------------------------------------------------------------------------------------------------------------------------------

    Private Sub cmbLegendDocking_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbLegendDocking.SelectedIndexChanged
        Select Case cmbLegendDocking.SelectedItem.ToString
            Case "Bottom"
                If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                    Dim legendDocking As New XElement("LegendDocking", "Bottom")
                    myParent.AreaInfo(AreaNo).Add(legendDocking)
                Else
                    myParent.AreaInfo(AreaNo).<LegendDocking>.Value = "Bottom"
                End If
            Case "Left"
                If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                    Dim legendDocking As New XElement("LegendDocking", "Left")
                    myParent.AreaInfo(AreaNo).Add(legendDocking)
                Else
                    myParent.AreaInfo(AreaNo).<LegendDocking>.Value = "Left"
                End If
            Case "Right"
                If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                    Dim legendDocking As New XElement("LegendDocking", "Right")
                    myParent.AreaInfo(AreaNo).Add(legendDocking)
                Else
                    myParent.AreaInfo(AreaNo).<LegendDocking>.Value = "Right"
                End If
            Case "Top"
                If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                    Dim legendDocking As New XElement("LegendDocking", "Top")
                    myParent.AreaInfo(AreaNo).Add(legendDocking)
                Else
                    myParent.AreaInfo(AreaNo).<LegendDocking>.Value = "Top"
                End If
            Case Else
                If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                    Dim legendDocking As New XElement("LegendDocking", "Right")
                    myParent.AreaInfo(AreaNo).Add(legendDocking)
                Else
                    myParent.AreaInfo(AreaNo).<LegendDocking>.Value = "Right"
                End If
        End Select
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)

    End Sub

    'Chart Area - X Axis ===========================================================================================================

    Private Sub txtXAxisTitle_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisTitle.LostFocus
        'Update the X Axis title.
        If myParent.Chart1.ChartAreas(AreaNo).AxisX.Title = txtXAxisTitle.Text Then
            'The title has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Title = txtXAxisTitle.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Text>.Value = txtXAxisTitle.Text 'Update the ChartInfo XDocument (AreaInfo() refers to the Areas in ChartInfo)
            Modified = True
        End If
    End Sub

    Private Sub btnXAxisTitleFont_Click(sender As Object, e As EventArgs) Handles btnXAxisTitleFont.Click
        'The XAxis title font has changed.
        FontDialog1.Font = txtXAxisTitle.Font
        FontDialog1.ShowDialog()

        If txtXAxisTitle.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed.
        Else
            txtXAxisTitle.Font = FontDialog1.Font
            'Update the Chart:
            myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleFont = FontDialog1.Font
            'Update the ChartInfo XDocument 
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            Modified = True
        End If
    End Sub



    Private Sub btnXAxisTitleColor_Click(sender As Object, e As EventArgs) Handles btnXAxisTitleColor.Click
        'The XAxis title color has changed.
        ColorDialog1.Color = txtXAxisTitle.ForeColor
        ColorDialog1.ShowDialog()

        If txtXAxisTitle.ForeColor = ColorDialog1.Color Then
            'The color has not been changed.
        Else
            txtXAxisTitle.ForeColor = ColorDialog1.Color
            'Update the Chart:
            myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleForeColor = ColorDialog1.Color
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub cmbXAxisTitleAlignment_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbXAxisTitleAlignment.SelectedIndexChanged
        'The ChartArea XAxis Alignment has changed.
        'Update the Chart:
        If cmbXAxisTitleAlignment.SelectedItem IsNot Nothing Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleAlignment = [Enum].Parse(GetType(StringAlignment), cmbXAxisTitleAlignment.SelectedItem.ToString)
            myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Alignment>.Value = cmbXAxisTitleAlignment.SelectedItem.ToString 'Update the ChartInfo XDocument (AreaInfo() refers to the Areas in ChartInfo)
            Modified = True
        End If
    End Sub

    Private Sub txtXAxisMin_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisMin.LostFocus
        'The ChartArea XAxis Minimum has changed.
        If myParent.AreaInfo(AreaNo).<AxisX>.<Minimum>.Value = txtXAxisMin.Text Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkXAxisAutoMin.Checked Then
                'Leave the AxisX Minimum unchanged - AutoMinimum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX.Minimum = Val(txtXAxisMin.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisX>.<Minimum>.Value = txtXAxisMin.Text 'Update the ChartInfo XDocument
            Modified = True
        End If
    End Sub

    Private Sub chkXAxisAutoMin_CheckedChanged(sender As Object, e As EventArgs) Handles chkXAxisAutoMin.CheckedChanged
        'The ChartArea XAxis Auto Minimum has changed.
        'Update the Chart:
        If chkXAxisAutoMin.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Minimum = Double.NaN 'Auto minimum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Minimum = Val(txtXAxisMin.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisX>.<AutoMinimum>.Value = chkXAxisAutoMin.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtXAxisMax_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisMax.LostFocus
        'The ChartArea XAxis Maximum has changed.
        If myParent.Chart1.ChartAreas(AreaNo).AxisX.Maximum = Val(txtXAxisMax.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkXAxisAutoMax.Checked Then
                'Leave the AxisX Maximum unchanged - AutoMaximum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX.Maximum = Val(txtXAxisMax.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisX>.<Maximum>.Value = txtXAxisMax.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkXAxisAutoMax_CheckedChanged(sender As Object, e As EventArgs) Handles chkXAxisAutoMax.CheckedChanged
        'The ChartArea XAxis Auto Maximum has changed.
        'Update the Chart:
        If chkXAxisAutoMax.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Maximum = Double.NaN 'Auto maximum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Maximum = Val(txtXAxisMax.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisX>.<AutoMaximum>.Value = chkXAxisAutoMax.Checked 'Update the ChartInfo XDocument
        Modified = True
    End Sub

    Private Sub txtXAxisAnnotInt_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisAnnotInt.LostFocus
        'The ChartArea XAxis Annotation Interval has changed.
        'myChart.ChartAreas(AreaNo).AxisX.Interval = Val(txtXAxisAnnotInt.Text) 'Update the Chart
        If myParent.Chart1.ChartAreas(AreaNo).AxisX.Interval = Val(txtXAxisAnnotInt.Text) Then
            'The value has not been changed.
        Else
            If chkXAxisAutoAnnotInt.Checked Then

            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX.Interval = Val(txtXAxisAnnotInt.Text) 'Update the Chart
            End If
            myParent.AreaInfo(AreaNo).<AxisX>.<Interval>.Value = txtXAxisAnnotInt.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub txtXAxisIntervalOffset_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisIntervalOffset.LostFocus
        'The ChartArea XAxis Annotation Interval offset has changed.
        If myParent.Chart1.ChartAreas(AreaNo).AxisX.IntervalOffset = Val(txtXAxisIntervalOffset.Text) Then
            'The value has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.IntervalOffset = Val(txtXAxisIntervalOffset.Text) 'Update the Chart
            If myParent.AreaInfo(AreaNo).<AxisX>.<IntervalOffset>.Value <> Nothing Then myParent.AreaInfo(AreaNo).<AxisX>.<IntervalOffset>.Value = Val(txtXAxisIntervalOffset.Text)  'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkXAxisAutoAnnotInt_CheckedChanged(sender As Object, e As EventArgs) Handles chkXAxisAutoAnnotInt.CheckedChanged
        'The ChartArea XAxis Auto Annotation Interval has changed.
        'Update the Chart:
        If chkXAxisAutoAnnotInt.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Interval = 0 'Zero indicates Auto mode.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.Interval = Val(txtXAxisAnnotInt.Text) 'Update the Chart
        End If
        myParent.AreaInfo(AreaNo).<AxisX>.<AutoInterval>.Value = chkXAxisAutoAnnotInt.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtXAxisLabelStyleFormat_TextChanged(sender As Object, e As EventArgs) Handles txtXAxisLabelStyleFormat.TextChanged

    End Sub

    Private Sub txtXAxisLabelStyleFormat_LostFocus(sender As Object, e As EventArgs) Handles txtXAxisLabelStyleFormat.LostFocus
        'The ChartArea XAxis Auto Annotation Interval has changed.
        If myParent.Chart1.ChartAreas(AreaNo).AxisX.LabelStyle.Format = txtXAxisLabelStyleFormat.Text Then
            'The value has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.LabelStyle.Format = txtXAxisLabelStyleFormat.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Format>.Value = txtXAxisLabelStyleFormat.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkXAxisScrollBar_CheckedChanged(sender As Object, e As EventArgs) Handles chkXAxisScrollBar.CheckedChanged
        'The ChartArea XAxis Scrollbar selection has changed.
        'Update the Chart:
        If chkXAxisScrollBar.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX.ScrollBar.Enabled = True
            myParent.Chart1.ChartAreas(AreaNo).AxisX.ScrollBar.Size = 16
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX.ScrollBar.Enabled = False
        End If
        myParent.AreaInfo(AreaNo).<AxisX>.<Scrollbar>.Value = chkXAxisScrollBar.Checked  'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub chkLogXAxis_CheckedChanged(sender As Object, e As EventArgs) Handles chkLogXAxis.CheckedChanged
        'The ChartArea XAxis Log Scale selection has changed.
        'Update the Chart:
        myParent.Chart1.ChartAreas(AreaNo).AxisX.IsLogarithmic = chkLogXAxis.Checked
        myParent.AreaInfo(AreaNo).<AxisX>.<Logarithmic>.Value = chkLogXAxis.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    '-------------------------------------------------------------------------------------------------------------------------------

    'Chart Area - X2 Axis ===========================================================================================================

    Private Sub txtX2AxisTitle_LostFocus(sender As Object, e As EventArgs) Handles txtX2AxisTitle.LostFocus
        'Update the X2 Axis title.
        If myParent.Chart1.ChartAreas(AreaNo).AxisX2.Title = txtX2AxisTitle.Text Then
            'The value has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Title = txtX2AxisTitle.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Text>.Value = txtX2AxisTitle.Text 'Update the ChartInfo XDocument (AreaInfo() refers to the Areas in ChartInfo)
            Modified = True
        End If
    End Sub

    Private Sub btnX2AxisTitleFont_Click(sender As Object, e As EventArgs) Handles btnX2AxisTitleFont.Click
        'The X2Axis title font has changed.
        FontDialog1.Font = txtX2AxisTitle.Font
        FontDialog1.ShowDialog()

        If txtX2AxisTitle.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed.
        Else
            txtX2AxisTitle.Font = FontDialog1.Font

            myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleFont = FontDialog1.Font  'Update the Chart
            'Update the ChartInfo XDocument: 
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            Modified = True
        End If


    End Sub

    Private Sub btnX2AxisTitleColor_Click(sender As Object, e As EventArgs) Handles btnX2AxisTitleColor.Click
        'The XAxis title color has changed.
        ColorDialog1.Color = txtX2AxisTitle.ForeColor
        ColorDialog1.ShowDialog()

        If txtX2AxisTitle.ForeColor = ColorDialog1.Color Then
            'The color has not been changed.
        Else
            txtX2AxisTitle.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleForeColor = ColorDialog1.Color 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub cmbX2AxisTitleAlignment_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbX2AxisTitleAlignment.SelectedIndexChanged
        'The ChartArea XAxis Alignment has changed.
        'Update the Chart:
        If cmbX2AxisTitleAlignment.SelectedItem IsNot Nothing Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), cmbX2AxisTitleAlignment.SelectedItem.ToString)
            myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Alignment>.Value = cmbX2AxisTitleAlignment.SelectedItem.ToString  'Update the ChartInfo XDocument
            Modified = True
        End If
    End Sub

    Private Sub txtX2AxisMin_LostFocus(sender As Object, e As EventArgs) Handles txtX2AxisMin.LostFocus
        'The ChartArea XAxis Minimum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisX2.Minimum = Val(txtX2AxisMin.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkX2AxisAutoMin.Checked Then
                'Leave the AxisX2 Minimum unchanged - AutoMinimum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX2.Minimum = Val(txtX2AxisMin.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisX2>.<Minimum>.Value = txtX2AxisMin.Text  'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkX2AxisAutoMin_CheckedChanged(sender As Object, e As EventArgs) Handles chkX2AxisAutoMin.CheckedChanged
        'The ChartArea X2Axis Auto Minimum has changed.
        'Update the Chart:
        If chkX2AxisAutoMin.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Minimum = Double.NaN 'Auto minimum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Minimum = Val(txtX2AxisMin.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisX2>.<AutoMinimum>.Value = chkX2AxisAutoMin.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtX2AxisMax_LostFocus(sender As Object, e As EventArgs) Handles txtX2AxisMax.LostFocus
        'The ChartArea X2Axis Maximum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisX2.Maximum = Val(txtX2AxisMax.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkX2AxisAutoMax.Checked Then
                'Leave the AxisX Maximum unchanged - AutoMaximum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX2.Maximum = Val(txtX2AxisMax.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisX2>.<Maximum>.Value = txtX2AxisMax.Text 'Update the ChartInfo XDocument
            Modified = True
        End If

    End Sub

    Private Sub chkX2AxisAutoMax_CheckedChanged(sender As Object, e As EventArgs) Handles chkX2AxisAutoMax.CheckedChanged
        'The ChartArea X2Axis Auto Maximum has changed.
        'Update the Chart:
        If chkX2AxisAutoMax.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Maximum = Double.NaN 'Auto maximum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Maximum = Val(txtX2AxisMax.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisX2>.<AutoMaximum>.Value = chkX2AxisAutoMax.Checked 'Update the ChartInfo XDocument
        Modified = True
    End Sub

    Private Sub txtX2AxisAnnotInt_LostFocus(sender As Object, e As EventArgs) Handles txtX2AxisAnnotInt.LostFocus
        'The ChartArea X2Axis Annotation Interval has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisX2.Interval = Val(txtX2AxisAnnotInt.Text) Then
            'The value has not been changed.
        Else
            'myChart.ChartAreas(AreaNo).AxisX2.Interval = Val(txtX2AxisAnnotInt.Text) 'Update the Chart
            If chkX2AxisAutoAnnotInt.Checked Then

            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisX2.Interval = Val(txtX2AxisAnnotInt.Text) 'Update the Chart
            End If
            myParent.AreaInfo(AreaNo).<AxisX2>.<Interval>.Value = txtX2AxisAnnotInt.Text 'Update the ChartInfo XDocument
            Modified = True
        End If

    End Sub

    Private Sub chkX2AxisAutoAnnotInt_CheckedChanged(sender As Object, e As EventArgs) Handles chkX2AxisAutoAnnotInt.CheckedChanged
        'The ChartArea XAxis Auto Annotation Interval has changed.
        'Update the Chart:
        If chkX2AxisAutoAnnotInt.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Interval = 0 'Zero indicates Auto mode.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.Interval = Val(txtX2AxisAnnotInt.Text) 'Update the Chart
        End If
        myParent.AreaInfo(AreaNo).<AxisX2>.<AutoInterval>.Value = chkX2AxisAutoAnnotInt.Checked 'Update the ChartInfo XDocument
        Modified = True
    End Sub

    Private Sub txtX2AxisLabelStyleFormat_TextChanged(sender As Object, e As EventArgs) Handles txtX2AxisLabelStyleFormat.TextChanged

    End Sub

    Private Sub txtX2AxisLabelStyleFormat_LostFocus(sender As Object, e As EventArgs) Handles txtX2AxisLabelStyleFormat.LostFocus
        'The ChartArea X2Axis Auto Annotation Interval has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisX2.LabelStyle.Format = txtX2AxisLabelStyleFormat.Text Then
            'The value has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.LabelStyle.Format = txtX2AxisLabelStyleFormat.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Format>.Value = txtX2AxisLabelStyleFormat.Text 'Update the ChartInfo XDocument
            Modified = True
        End If
    End Sub

    Private Sub chkX2AxisScrollBar_CheckedChanged(sender As Object, e As EventArgs) Handles chkX2AxisScrollBar.CheckedChanged
        'The ChartArea X2Axis Scrollbar selection has changed.
        'Update the Chart:
        If chkX2AxisScrollBar.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.ScrollBar.Enabled = True
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.ScrollBar.Size = 16
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.ScrollBar.Enabled = False
        End If
        myParent.AreaInfo(AreaNo).<AxisX2>.<Scrollbar>.Value = chkX2AxisScrollBar.Checked  'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub chkLogX2Axis_CheckedChanged(sender As Object, e As EventArgs) Handles chkLogX2Axis.CheckedChanged
        'The ChartArea X2Axis Log Scale selection has changed.
        'Update the Chart:
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.IsLogarithmic = chkLogX2Axis.Checked
        myParent.AreaInfo(AreaNo).<AxisX2>.<Logarithmic>.Value = chkLogX2Axis.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    '-------------------------------------------------------------------------------------------------------------------------------

    'Chart Area - Y Axis ===========================================================================================================

    Private Sub txtYAxisTitle_LostFocus(sender As Object, e As EventArgs) Handles txtYAxisTitle.LostFocus
        'Update the Y Axis title.
        '(Only ChartArea1 is used in this application.)

        If myParent.Chart1.ChartAreas(AreaNo).AxisY.Title = txtYAxisTitle.Text Then
            'The test has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Title = txtYAxisTitle.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Text>.Value = txtYAxisTitle.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub btnYAxisTitleFont_Click(sender As Object, e As EventArgs) Handles btnYAxisTitleFont.Click
        FontDialog1.Font = txtYAxisTitle.Font
        FontDialog1.ShowDialog()

        If txtYAxisTitle.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed.
        Else
            txtYAxisTitle.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleFont = FontDialog1.Font  'Update the Chart
            'Update the ChartInfo XDocument:
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            Modified = True
        End If
    End Sub

    Private Sub btnYAxisTitleColor_Click(sender As Object, e As EventArgs) Handles btnYAxisTitleColor.Click
        'The ChartArea YAxis Title color has been changed.
        ColorDialog1.Color = txtYAxisTitle.ForeColor
        ColorDialog1.ShowDialog()

        If txtYAxisTitle.ForeColor = ColorDialog1.Color Then
            'The color has not been changed.
        Else
            txtYAxisTitle.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleForeColor = ColorDialog1.Color 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub cmbYAxisTitleAlignment_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbYAxisTitleAlignment.SelectedIndexChanged
        'The ChartArea YAxis Alignment has changed.
        If cmbYAxisTitleAlignment.SelectedItem IsNot Nothing Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleAlignment = [Enum].Parse(GetType(StringAlignment), cmbYAxisTitleAlignment.SelectedItem.ToString) 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Alignment>.Value = cmbYAxisTitleAlignment.SelectedItem.ToString 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub txtYAxisMin_LostFocus(sender As Object, e As EventArgs) Handles txtYAxisMin.LostFocus
        'The ChartArea YAxis Minimum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY.Minimum = Val(txtYAxisMin.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkYAxisAutoMin.Checked Then
                'Leave the AxisY Minimum unchanged - AutoMinimum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY.Minimum = Val(txtYAxisMin.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisY>.<Minimum>.Value = txtYAxisMin.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkYAxisAutoMin_CheckedChanged(sender As Object, e As EventArgs) Handles chkYAxisAutoMin.CheckedChanged
        'Update the Chart:
        If chkYAxisAutoMin.Checked Then
            myParent.Chart1.ChartAreas(0).AxisY.Minimum = Double.NaN 'Auto minimum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Minimum = Val(txtYAxisMin.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisY>.<AutoMinimum>.Value = chkYAxisAutoMin.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtYAxisMax_LostFocus(sender As Object, e As EventArgs) Handles txtYAxisMax.LostFocus
        'The ChartArea YAxis Maximum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY.Maximum = Val(txtYAxisMax.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkYAxisAutoMax.Checked Then
                'Leave the AxisX Maximum unchanged - AutoMaximum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY.Maximum = Val(txtYAxisMax.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisY>.<Maximum>.Value = txtYAxisMax.Text  'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkYAxisAutoMax_CheckedChanged(sender As Object, e As EventArgs) Handles chkYAxisAutoMax.CheckedChanged
        'The ChartArea XAxis Auto Maximum has changed.
        'Update the Chart:
        If chkYAxisAutoMax.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Maximum = Double.NaN 'Auto maximum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Maximum = Val(txtYAxisMax.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisY>.<AutoMaximum>.Value = chkYAxisAutoMax.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtYAxisAnnotInt_LostFocus(sender As Object, e As EventArgs) Handles txtYAxisAnnotInt.LostFocus
        'The ChartArea YAxis Annotation Interval has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY.Interval = Val(txtYAxisAnnotInt.Text) Then
            'The value has not been changed.
        Else
            'myChart.ChartAreas(AreaNo).AxisY.Interval = Val(txtYAxisAnnotInt.Text) 'Update the Chart
            If chkYAxisAutoAnnotInt.Checked Then

            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY.Interval = Val(txtYAxisAnnotInt.Text) 'Update the Chart
            End If
            myParent.AreaInfo(AreaNo).<AxisY>.<Interval>.Value = txtYAxisAnnotInt.Text  'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkYAxisAutoAnnotInt_CheckedChanged(sender As Object, e As EventArgs) Handles chkYAxisAutoAnnotInt.CheckedChanged
        'The ChartArea YAxis Auto Annotation Interval has changed.
        'Update the Chart:
        If chkYAxisAutoAnnotInt.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Interval = 0 'Zero indicates Auto mode.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.Interval = Val(txtYAxisAnnotInt.Text) 'Update the Chart
        End If
        myParent.AreaInfo(AreaNo).<AxisY>.<AutoInterval>.Value = chkYAxisAutoAnnotInt.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtYAxisLabelStyleFormat_TextChanged(sender As Object, e As EventArgs) Handles txtYAxisLabelStyleFormat.TextChanged

    End Sub

    Private Sub txtYAxisLabelStyleFormat_LostFocus(sender As Object, e As EventArgs) Handles txtYAxisLabelStyleFormat.LostFocus
        'The ChartArea XAxis Auto Annotation Interval has changed.
        If myParent.Chart1.ChartAreas(AreaNo).AxisY.LabelStyle.Format = txtYAxisLabelStyleFormat.Text Then
            'The value has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.LabelStyle.Format = txtYAxisLabelStyleFormat.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Format>.Value = txtYAxisLabelStyleFormat.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkYAxisScrollBar_CheckedChanged(sender As Object, e As EventArgs) Handles chkYAxisScrollBar.CheckedChanged
        'The ChartArea YAxis Scrollbar selection has changed.
        'Update the Chart:
        If chkYAxisScrollBar.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY.ScrollBar.Enabled = True
            myParent.Chart1.ChartAreas(AreaNo).AxisY.ScrollBar.Size = 16
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.ScrollBar.Enabled = False
        End If
        myParent.AreaInfo(AreaNo).<AxisY>.<Scrollbar>.Value = chkYAxisScrollBar.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub chkLogYAxis_CheckedChanged(sender As Object, e As EventArgs) Handles chkLogYAxis.CheckedChanged
        'The ChartArea YAxis Log Scale selection has changed.
        'Update the Chart:
        If chkLogYAxis.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY.IsLogarithmic = True
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY.IsLogarithmic = False
        End If
        myParent.AreaInfo(AreaNo).<AxisY>.<Logarithmic>.Value = chkLogYAxis.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub


    'Chart Area - Y2 Axis ===========================================================================================================

    Private Sub txtY2AxisTitle_LostFocus(sender As Object, e As EventArgs) Handles txtY2AxisTitle.LostFocus
        'Update the Y2 Axis title.
        '(Only ChartArea1 is used in this application.)

        If myParent.Chart1.ChartAreas(AreaNo).AxisY2.Title = txtY2AxisTitle.Text Then
            'The text has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Title = txtY2AxisTitle.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Text>.Value = txtY2AxisTitle.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If

    End Sub

    Private Sub btnY2AxisTitleFont_Click(sender As Object, e As EventArgs) Handles btnY2AxisTitleFont.Click
        FontDialog1.Font = txtY2AxisTitle.Font
        FontDialog1.ShowDialog()

        If txtY2AxisTitle.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed.
        Else
            txtY2AxisTitle.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleFont = FontDialog1.Font  'Update the Chart
            'Update the ChartInfo XDocument:
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            Modified = True
        End If
    End Sub

    Private Sub btnY2AxisTitleColor_Click(sender As Object, e As EventArgs) Handles btnY2AxisTitleColor.Click
        ColorDialog1.Color = txtY2AxisTitle.ForeColor
        ColorDialog1.ShowDialog()

        If txtY2AxisTitle.ForeColor = ColorDialog1.Color Then
            'The color has not been changed.
        Else
            txtY2AxisTitle.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleForeColor = ColorDialog1.Color 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString 'Update the ChartInfo XDocument 
        End If
    End Sub

    Private Sub cmbY2AxisTitleAlignment_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbY2AxisTitleAlignment.SelectedIndexChanged
        'The ChartArea Y2Axis Alignment has changed.
        If cmbY2AxisTitleAlignment.SelectedItem IsNot Nothing Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), cmbY2AxisTitleAlignment.SelectedItem.ToString) 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Alignment>.Value = cmbY2AxisTitleAlignment.SelectedItem.ToString 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub txtY2AxisMin_LostFocus(sender As Object, e As EventArgs) Handles txtY2AxisMin.LostFocus
        'The ChartArea Y2Axis Minimum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY2.Minimum = Val(txtY2AxisMin.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkY2AxisAutoMin.Checked Then
                'Leave the AxisY Minimum unchanged - AutoMinimum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY2.Minimum = Val(txtY2AxisMin.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisY2>.<Minimum>.Value = txtY2AxisMin.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkY2AxisAutoMin_CheckedChanged(sender As Object, e As EventArgs) Handles chkY2AxisAutoMin.CheckedChanged
        'Update the Chart:
        If chkY2AxisAutoMin.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Minimum = Double.NaN 'Auto minimum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Minimum = Val(txtY2AxisMin.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisY2>.<AutoMinimum>.Value = chkY2AxisAutoMin.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtY2AxisMax_LostFocus(sender As Object, e As EventArgs) Handles txtY2AxisMax.LostFocus
        'The ChartArea Y2Axis Maximum has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY2.Maximum = Val(txtY2AxisMax.Text) Then
            'The value has not been changed.
        Else
            'Update the Chart:
            If chkY2AxisAutoMax.Checked Then
                'Leave the AxisX Maximum unchanged - AutoMaximum is in use.
            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY2.Maximum = Val(txtY2AxisMax.Text)
            End If
            myParent.AreaInfo(AreaNo).<AxisY2>.<Maximum>.Value = txtY2AxisMax.Text  'Update the ChartInfo XDocument 
            Modified = True
        End If
    End Sub

    Private Sub chkY2AxisAutoMax_CheckedChanged(sender As Object, e As EventArgs) Handles chkY2AxisAutoMax.CheckedChanged
        'The ChartArea XAxis Auto Maximum has changed.
        'Update the Chart:
        If chkY2AxisAutoMax.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Maximum = Double.NaN 'Auto maximum.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Maximum = Val(txtY2AxisMax.Text)
        End If
        myParent.AreaInfo(AreaNo).<AxisY2>.<AutoMaximum>.Value = chkY2AxisAutoMax.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtY2AxisAnnotInt_LostFocus(sender As Object, e As EventArgs) Handles txtY2AxisAnnotInt.LostFocus
        'The ChartArea Y2Axis Annotation Interval has changed.

        If myParent.Chart1.ChartAreas(AreaNo).AxisY2.Interval = Val(txtY2AxisAnnotInt.Text) Then
            'The value has not been changed.
        Else
            'myChart.ChartAreas(AreaNo).AxisY2.Interval = Val(txtY2AxisAnnotInt.Text) 'Update the Chart
            If chkY2AxisAutoAnnotInt.Checked Then

            Else
                myParent.Chart1.ChartAreas(AreaNo).AxisY2.Interval = Val(txtY2AxisAnnotInt.Text) 'Update the Chart
            End If
            myParent.AreaInfo(AreaNo).<AxisY2>.<Interval>.Value = txtY2AxisAnnotInt.Text  'Update the ChartInfo XDocument
            Modified = True
        End If
    End Sub

    Private Sub chkY2AxisAutoAnnotInt_CheckedChanged(sender As Object, e As EventArgs) Handles chkY2AxisAutoAnnotInt.CheckedChanged
        'The ChartArea Y2Axis Auto Annotation Interval has changed.
        'Update the Chart:
        If chkY2AxisAutoAnnotInt.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Interval = 0 'Zero indicates Auto mode.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.Interval = Val(txtY2AxisAnnotInt.Text) 'Update the Chart
        End If
        myParent.AreaInfo(AreaNo).<AxisY2>.<AutoInterval>.Value = chkY2AxisAutoAnnotInt.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub txtY2AxisLabelStyleFormat_TextChanged(sender As Object, e As EventArgs) Handles txtY2AxisLabelStyleFormat.TextChanged

    End Sub

    Private Sub txtY2AxisLabelStyleFormat_LostFocus(sender As Object, e As EventArgs) Handles txtY2AxisLabelStyleFormat.LostFocus
        'The ChartArea X2Axis Auto Annotation Interval has changed.
        If myParent.Chart1.ChartAreas(AreaNo).AxisY2.LabelStyle.Format = txtY2AxisLabelStyleFormat.Text Then
            'The format has not been changed.
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.LabelStyle.Format = txtY2AxisLabelStyleFormat.Text 'Update the Chart
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Format>.Value = txtY2AxisLabelStyleFormat.Text 'Update the ChartInfo XDocument 
            Modified = True
        End If

    End Sub

    Private Sub chkY2AxisScrollBar_CheckedChanged(sender As Object, e As EventArgs) Handles chkY2AxisScrollBar.CheckedChanged
        'The ChartArea Y2Axis Scrollbar selection has changed.
        'Update the Chart:
        If chkY2AxisScrollBar.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.ScrollBar.Enabled = True
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.ScrollBar.Size = 16
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.ScrollBar.Enabled = False
        End If
        myParent.AreaInfo(AreaNo).<AxisY2>.<Scrollbar>.Value = chkY2AxisScrollBar.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    Private Sub chkLogY2Axis_CheckedChanged(sender As Object, e As EventArgs) Handles chkLogY2Axis.CheckedChanged
        'The ChartArea Y2Axis Log Scale selection has changed.
        'Update the Chart:
        If chkLogY2Axis.Checked Then
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.IsLogarithmic = True
        Else
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.IsLogarithmic = False
        End If
        myParent.AreaInfo(AreaNo).<AxisY2>.<Logarithmic>.Value = chkLogY2Axis.Checked 'Update the ChartInfo XDocument 
        Modified = True
    End Sub

    '-------------------------------------------------------------------------------------------------------------------------------

    Private Sub btnAddArea_Click(sender As Object, e As EventArgs) Handles btnAddArea.Click
        'Add a new Chart Area:

        If ChartName = "" Then
            Main.Message.AddWarning("Please open a chart." & vbCrLf)
            Exit Sub
        End If

        Dim NewAreaNo As Integer = myParent.Chart1.ChartAreas.Count

        Dim NewAreaName As String = "ChartArea" & NewAreaNo + 1
        myParent.Chart1.ChartAreas.Add(NewAreaName)

        txtAreaName.Text = NewAreaName

        If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
            Dim legendDocking As New XElement("LegendDocking", "Right")
            myParent.AreaInfo(AreaNo).Add(legendDocking)
            cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact("Right")
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
        Else
            cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact(myParent.AreaInfo(AreaNo).<LegendDocking>.Value)
        End If


        AreaNo = NewAreaNo

        txtNAreaRecords.Text = myParent.Chart1.ChartAreas.Count

        'myChart.ChartAreas(AreaNo).Position.Height = 50

        'Add default ChartArea properties:
        'AxisX:
        myParent.Chart1.ChartAreas(AreaNo).AxisX.Title = "X Axis"
        myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleAlignment = StringAlignment.Center
        myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleForeColor = Color.Black
        Dim myFontStyle As FontStyle
        myFontStyle = FontStyle.Regular
        myFontStyle = myFontStyle Or FontStyle.Bold
        'myFontStyle = myFontStyle Or FontStyle.Italic
        'myFontStyle = myFontStyle Or FontStyle.Strikeout
        'myFontStyle = myFontStyle Or FontStyle.Underline
        myParent.Chart1.ChartAreas(AreaNo).AxisX.TitleFont = New Font("Microsoft Sans Serif", 12, myFontStyle)
        myParent.Chart1.ChartAreas(AreaNo).AxisX.Minimum = Double.NaN 'Auto Minimum
        myParent.Chart1.ChartAreas(AreaNo).AxisX.Maximum = Double.NaN 'Auto Maximum
        myParent.Chart1.ChartAreas(AreaNo).AxisX.LineWidth = 1
        myParent.Chart1.ChartAreas(AreaNo).AxisX.Interval = 0 'Auto Interval
        myParent.Chart1.ChartAreas(AreaNo).AxisX.IntervalOffset = Double.NaN 'Auto interval offset
        myParent.Chart1.ChartAreas(AreaNo).AxisX.Crossing = Double.NaN 'Auto
        myParent.Chart1.ChartAreas(AreaNo).AxisX.ScrollBar.Enabled = False
        myParent.Chart1.ChartAreas(AreaNo).AxisX.IsLogarithmic = False
        myParent.Chart1.ChartAreas(AreaNo).AxisX.RoundAxisValues()
        'AxisX2:
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.Title = "X2 Axis"
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleAlignment = StringAlignment.Center
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleForeColor = Color.Black
        myFontStyle = FontStyle.Regular
        myFontStyle = myFontStyle Or FontStyle.Bold
        'myFontStyle = myFontStyle Or FontStyle.Italic
        'myFontStyle = myFontStyle Or FontStyle.Strikeout
        'myFontStyle = myFontStyle Or FontStyle.Underline
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.TitleFont = New Font("Microsoft Sans Serif", 12, myFontStyle)
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.Minimum = Double.NaN 'Auto Minimum
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.Maximum = Double.NaN 'Auto Maximum
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.LineWidth = 1
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.Interval = 0 'Auto Interval
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.IntervalOffset = Double.NaN 'Auto interval offset
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.Crossing = Double.NaN 'Auto
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.ScrollBar.Enabled = False
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.IsLogarithmic = False
        myParent.Chart1.ChartAreas(AreaNo).AxisX2.RoundAxisValues()
        'AxisY:
        myParent.Chart1.ChartAreas(AreaNo).AxisY.Title = "Y Axis"
        myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleAlignment = StringAlignment.Center
        myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleForeColor = Color.Black
        myFontStyle = FontStyle.Regular
        myFontStyle = myFontStyle Or FontStyle.Bold
        'myFontStyle = myFontStyle Or FontStyle.Italic
        'myFontStyle = myFontStyle Or FontStyle.Strikeout
        'myFontStyle = myFontStyle Or FontStyle.Underline
        myParent.Chart1.ChartAreas(AreaNo).AxisY.TitleFont = New Font("Microsoft Sans Serif", 12, myFontStyle)
        myParent.Chart1.ChartAreas(AreaNo).AxisY.Minimum = Double.NaN 'Auto Minimum
        myParent.Chart1.ChartAreas(AreaNo).AxisY.Maximum = Double.NaN 'Auto Maximum
        myParent.Chart1.ChartAreas(AreaNo).AxisY.LineWidth = 1
        myParent.Chart1.ChartAreas(AreaNo).AxisY.Interval = 0 'Auto Interval
        myParent.Chart1.ChartAreas(AreaNo).AxisY.IntervalOffset = Double.NaN 'Auto interval offset
        myParent.Chart1.ChartAreas(AreaNo).AxisY.Crossing = Double.NaN 'Auto
        myParent.Chart1.ChartAreas(AreaNo).AxisY.ScrollBar.Enabled = False
        myParent.Chart1.ChartAreas(AreaNo).AxisY.IsLogarithmic = False
        myParent.Chart1.ChartAreas(AreaNo).AxisY.RoundAxisValues()
        'AxisY2:
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.Title = "Y2 Axis"
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleAlignment = StringAlignment.Center
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleForeColor = Color.Black
        myFontStyle = FontStyle.Regular
        myFontStyle = myFontStyle Or FontStyle.Bold
        'myFontStyle = myFontStyle Or FontStyle.Italic
        'myFontStyle = myFontStyle Or FontStyle.Strikeout
        'myFontStyle = myFontStyle Or FontStyle.Underline
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.TitleFont = New Font("Microsoft Sans Serif", 12, myFontStyle)
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.Minimum = Double.NaN 'Auto Minimum
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.Maximum = Double.NaN 'Auto Maximum
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.LineWidth = 1
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.Interval = 0 'Auto Interval
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.IntervalOffset = Double.NaN 'Auto interval offset
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.Crossing = Double.NaN 'Auto
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.ScrollBar.Enabled = False
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.IsLogarithmic = False
        myParent.Chart1.ChartAreas(AreaNo).AxisY2.RoundAxisValues()


        'Add the new ChartArea to the ChartInfo XDocument:
        Dim NewArea As New XElement("ChartArea")
        Dim areaName As New XElement("Name", NewAreaName)
        NewArea.Add(areaName)


        'AxisX
        Dim axisX As New XElement("AxisX")

        Dim axisXTitle As New XElement("Title")
        Dim axisXTitleText As New XElement("Text", "X Axis")
        axisXTitle.Add(axisXTitleText)
        Dim axisXTitleAlignment As New XElement("Alignment", "Center")
        axisXTitle.Add(axisXTitleAlignment)
        Dim axisXTitleForeColor As New XElement("ForeColor", "-16777216")
        axisXTitle.Add(axisXTitleForeColor)

        Dim axisXTitleFont As New XElement("Font")
        Dim axisXTitleFontName As New XElement("Name", "Microsoft Sans Serif")
        axisXTitleFont.Add(axisXTitleFontName)
        Dim axisXTitleFontSize As New XElement("Size", "12")
        axisXTitleFont.Add(axisXTitleFontSize)
        Dim axisXTitleFontBold As New XElement("Bold", "true")
        axisXTitleFont.Add(axisXTitleFontBold)
        Dim axisXTitleFontItalic As New XElement("Italic", "false")
        axisXTitleFont.Add(axisXTitleFontItalic)
        Dim axisXTitleFontStrikeout As New XElement("Strikeout", "false")
        axisXTitleFont.Add(axisXTitleFontStrikeout)
        Dim axisXTitleFontUnderline As New XElement("Underline", "false")
        axisXTitleFont.Add(axisXTitleFontUnderline)
        axisXTitle.Add(axisXTitleFont)
        axisX.Add(axisXTitle)

        Dim axisXLabelStyleFormat As New XElement("LabelStyleFormat", "")
        axisX.Add(axisXLabelStyleFormat)
        Dim axisXMinimum As New XElement("Minimum", "-20")
        axisX.Add(axisXMinimum)
        Dim axisXAutoMinimum As New XElement("AutoMinimum", "true")
        axisX.Add(axisXAutoMinimum)
        Dim axisXMaximum As New XElement("Maximum", "20")
        axisX.Add(axisXMaximum)
        Dim axisXAutoMaximum As New XElement("AutoMaximum", "true")
        axisX.Add(axisXAutoMaximum)
        Dim axisXLineWidth As New XElement("LineWidth", "1")
        axisX.Add(axisXLineWidth)
        Dim axisXInterval As New XElement("Interval", "0")
        axisX.Add(axisXInterval)
        Dim axisXAutoInterval As New XElement("AutoInterval", "true")
        axisX.Add(axisXAutoInterval)
        Dim axisXIntervalOffset As New XElement("IntervalOffset", "0")
        axisX.Add(axisXIntervalOffset)
        Dim axisXCrossing As New XElement("Crossing", "NaN")
        axisX.Add(axisXCrossing)
        Dim axisXScrollbar As New XElement("Scrollbar", "false")
        axisX.Add(axisXScrollbar)
        Dim axisXLogarithmic As New XElement("Logarithmic", "false")
        axisX.Add(axisXLogarithmic)
        Dim axisXRoundAxisValues As New XElement("RoundAxisValues", "True")
        axisX.Add(axisXRoundAxisValues)
        NewArea.Add(axisX)

        'AxisX2
        Dim axisX2 As New XElement("AxisX2")

        Dim axisX2Title As New XElement("Title")
        Dim axisX2TitleText As New XElement("Text", "X2 Axis")
        axisX2Title.Add(axisX2TitleText)
        Dim axisX2TitleAlignment As New XElement("Alignment", "Center")
        axisX2Title.Add(axisX2TitleAlignment)
        Dim axisX2TitleForeColor As New XElement("ForeColor", "-16777216")
        axisX2Title.Add(axisX2TitleForeColor)

        Dim axisX2TitleFont As New XElement("Font")
        Dim axisX2TitleFontName As New XElement("Name", "Microsoft Sans Serif")
        axisX2TitleFont.Add(axisX2TitleFontName)
        Dim axisX2TitleFontSize As New XElement("Size", "12")
        axisX2TitleFont.Add(axisX2TitleFontSize)
        Dim axisX2TitleFontBold As New XElement("Bold", "true")
        axisX2TitleFont.Add(axisX2TitleFontBold)
        Dim axisX2TitleFontItalic As New XElement("Italic", "false")
        axisX2TitleFont.Add(axisX2TitleFontItalic)
        Dim axisX2TitleFontStrikeout As New XElement("Strikeout", "false")
        axisX2TitleFont.Add(axisX2TitleFontStrikeout)
        Dim axisX2TitleFontUnderline As New XElement("Underline", "false")
        axisX2TitleFont.Add(axisX2TitleFontUnderline)
        axisX2Title.Add(axisX2TitleFont)
        axisX2.Add(axisX2Title)

        Dim axisX2LabelStyleFormat As New XElement("LabelStyleFormat", "")
        axisX2.Add(axisX2LabelStyleFormat)
        Dim axisX2Minimum As New XElement("Minimum", "-20")
        axisX2.Add(axisX2Minimum)
        Dim axisX2AutoMinimum As New XElement("AutoMinimum", "true")
        axisX2.Add(axisX2AutoMinimum)
        Dim axisX2Maximum As New XElement("Maximum", "20")
        axisX2.Add(axisX2Maximum)
        Dim axisX2AutoMaximum As New XElement("AutoMaximum", "true")
        axisX2.Add(axisX2AutoMaximum)
        Dim axisX2LineWidth As New XElement("LineWidth", "1")
        axisX2.Add(axisX2LineWidth)
        Dim axisX2Interval As New XElement("Interval", "0")
        axisX2.Add(axisX2Interval)
        Dim axisX2AutoInterval As New XElement("AutoInterval", "true")
        axisX.Add(axisX2AutoInterval)
        Dim axisX2IntervalOffset As New XElement("IntervalOffset", "0")
        axisX2.Add(axisX2IntervalOffset)
        Dim axisX2Crossing As New XElement("Crossing", "NaN")
        axisX2.Add(axisX2Crossing)
        Dim axisX2Scrollbar As New XElement("Scrollbar", "false")
        axisX2.Add(axisX2Scrollbar)
        Dim axisX2Logarithmic As New XElement("Logarithmic", "false")
        axisX2.Add(axisX2Logarithmic)
        Dim axisX2RoundAxisValues As New XElement("RoundAxisValues", "True")
        axisX2.Add(axisX2RoundAxisValues)
        NewArea.Add(axisX2)

        'AxisY
        Dim axisY As New XElement("AxisY")

        Dim axisYTitle As New XElement("Title")
        Dim axisYTitleText As New XElement("Text", "Y Axis")
        axisYTitle.Add(axisYTitleText)
        Dim axisYTitleAlignment As New XElement("Alignment", "Center")
        axisYTitle.Add(axisYTitleAlignment)
        Dim axisYTitleForeColor As New XElement("ForeColor", "-16777216")
        axisYTitle.Add(axisYTitleForeColor)

        Dim axisYTitleFont As New XElement("Font")
        Dim axisYTitleFontName As New XElement("Name", "Microsoft Sans Serif")
        axisYTitleFont.Add(axisYTitleFontName)
        Dim axisYTitleFontSize As New XElement("Size", "12")
        axisYTitleFont.Add(axisYTitleFontSize)
        Dim axisYTitleFontBold As New XElement("Bold", "true")
        axisYTitleFont.Add(axisYTitleFontBold)
        Dim axisYTitleFontItalic As New XElement("Italic", "false")
        axisYTitleFont.Add(axisYTitleFontItalic)
        Dim axisYTitleFontStrikeout As New XElement("Strikeout", "false")
        axisYTitleFont.Add(axisYTitleFontStrikeout)
        Dim axisYTitleFontUnderline As New XElement("Underline", "false")
        axisYTitleFont.Add(axisYTitleFontUnderline)
        axisYTitle.Add(axisYTitleFont)
        axisY.Add(axisYTitle)

        Dim axisYLabelStyleFormat As New XElement("LabelStyleFormat", "")
        axisY.Add(axisYLabelStyleFormat)
        Dim axisYMinimum As New XElement("Minimum", "-20")
        axisY.Add(axisYMinimum)
        Dim axisYAutoMinimum As New XElement("AutoMinimum", "true")
        axisY.Add(axisYAutoMinimum)
        Dim axisYMaximum As New XElement("Maximum", "20")
        axisY.Add(axisYMaximum)
        Dim axisYAutoMaximum As New XElement("AutoMaximum", "true")
        axisY.Add(axisYAutoMaximum)
        Dim axisYLineWidth As New XElement("LineWidth", "1")
        axisY.Add(axisYLineWidth)
        Dim axisYInterval As New XElement("Interval", "0")
        axisY.Add(axisYInterval)
        Dim axisYAutoInterval As New XElement("AutoInterval", "true")
        axisY.Add(axisYAutoInterval)
        Dim axisYIntervalOffset As New XElement("IntervalOffset", "0")
        axisY.Add(axisYIntervalOffset)
        Dim axisYCrossing As New XElement("Crossing", "NaN")
        axisY.Add(axisYCrossing)
        Dim axisYScrollbar As New XElement("Scrollbar", "false")
        axisY.Add(axisYScrollbar)
        Dim axisYLogarithmic As New XElement("Logarithmic", "false")
        axisY.Add(axisYLogarithmic)
        Dim axisYRoundAxisValues As New XElement("RoundAxisValues", "True")
        axisY.Add(axisYRoundAxisValues)
        NewArea.Add(axisY)

        'AxisY2
        Dim axisY2 As New XElement("AxisY2")

        Dim axisY2Title As New XElement("Title")
        Dim axisY2TitleText As New XElement("Text", "Y2 Axis")
        axisY2Title.Add(axisY2TitleText)
        Dim axisY2TitleAlignment As New XElement("Alignment", "Center")
        axisY2Title.Add(axisY2TitleAlignment)
        Dim axisY2TitleForeColor As New XElement("ForeColor", "-16777216")
        axisY2Title.Add(axisYTitleForeColor)

        Dim axisY2TitleFont As New XElement("Font")
        Dim axisY2TitleFontName As New XElement("Name", "Microsoft Sans Serif")
        axisY2TitleFont.Add(axisY2TitleFontName)
        Dim axisY2TitleFontSize As New XElement("Size", "12")
        axisY2TitleFont.Add(axisY2TitleFontSize)
        Dim axisY2TitleFontBold As New XElement("Bold", "true")
        axisY2TitleFont.Add(axisY2TitleFontBold)
        Dim axisY2TitleFontItalic As New XElement("Italic", "false")
        axisY2TitleFont.Add(axisY2TitleFontItalic)
        Dim axisY2TitleFontStrikeout As New XElement("Strikeout", "false")
        axisY2TitleFont.Add(axisY2TitleFontStrikeout)
        Dim axisY2TitleFontUnderline As New XElement("Underline", "false")
        axisY2TitleFont.Add(axisY2TitleFontUnderline)
        axisY2Title.Add(axisY2TitleFont)
        axisY2.Add(axisY2Title)

        Dim axisY2LabelStyleFormat As New XElement("LabelStyleFormat", "")
        axisY2.Add(axisY2LabelStyleFormat)
        Dim axisY2Minimum As New XElement("Minimum", "-20")
        axisY2.Add(axisY2Minimum)
        Dim axisY2AutoMinimum As New XElement("AutoMinimum", "true")
        axisY2.Add(axisY2AutoMinimum)
        Dim axisY2Maximum As New XElement("Maximum", "20")
        axisY2.Add(axisY2Maximum)
        Dim axisY2AutoMaximum As New XElement("AutoMaximum", "true")
        axisY2.Add(axisY2AutoMaximum)
        Dim axisY2LineWidth As New XElement("LineWidth", "1")
        axisY2.Add(axisY2LineWidth)
        Dim axisY2Interval As New XElement("Interval", "0")
        axisY2.Add(axisY2Interval)
        Dim axisY2AutoInterval As New XElement("AutoInterval", "true")
        axisY2.Add(axisY2AutoInterval)
        Dim axisY2IntervalOffset As New XElement("IntervalOffset", "0")
        axisY2.Add(axisY2IntervalOffset)
        Dim axisY2Crossing As New XElement("Crossing", "NaN")
        axisY2.Add(axisY2Crossing)
        Dim axisY2Scrollbar As New XElement("Scrollbar", "false")
        axisY2.Add(axisY2Scrollbar)
        Dim axisY2Logarithmic As New XElement("Logarithmic", "false")
        axisY2.Add(axisY2Logarithmic)
        Dim axisY2RoundAxisValues As New XElement("RoundAxisValues", "True")
        axisY2.Add(axisY2RoundAxisValues)
        NewArea.Add(axisY2)

        myParent.AreaInfo(NewAreaNo - 1).AddAfterSelf(NewArea)

        'Update cboArea
        cboArea.Items.Add(NewAreaName)
        'Update cmbTitleChartArea
        cmbTitleChartArea.Items.Add(NewAreaName)

        Modified = True
    End Sub

    Private Sub btnDeleteArea_Click(sender As Object, e As EventArgs) Handles btnDeleteArea.Click
        'Delete the ChartArea.
        If myParent.Chart1.ChartAreas.Count > 1 Then
            myParent.Chart1.ChartAreas.RemoveAt(AreaNo)
            myParent.AreaInfo(AreaNo).Remove()
            UpdateAreasTabSettings()
            Modified = True
        Else
            Main.Message.AddWarning("The chart must have at least one chart area." & vbCrLf)
        End If
    End Sub

    Private Sub btnPrevArea_Click(sender As Object, e As EventArgs) Handles btnPrevArea.Click
        'Show the previous Chart Area.
        If AreaNo = 0 Then
            Main.Message.Add("Already at the first Chart Area." & vbCrLf)
        Else
            AreaNo -= 1
            ShowArea()
        End If
    End Sub

    Private Sub btnNextArea_Click(sender As Object, e As EventArgs) Handles btnNextArea.Click
        'Show the next tChart Area.
        'Main.Message.Add("9 Chart1.ChartAreas.Count = " & myParent.Chart1.ChartAreas.Count & vbCrLf)
        If AreaNo + 1 = myParent.Chart1.ChartAreas.Count Then
            Main.Message.Add("Already at the last Chart Area." & vbCrLf)
        Else
            AreaNo += 1
            ShowArea()
        End If
    End Sub

    Private Sub ShowArea()
        'Show the Chart Area information corresponding to AreaNo.
        If AreaNo + 1 > myParent.Chart1.ChartAreas.Count Then AreaNo = myParent.Chart1.ChartAreas.Count - 1
        If AreaNo < 0 Then AreaNo = 0

        Dim NAreas As Integer = myParent.AreaInfo.Count
        txtNAreaRecords.Text = NAreas
        Dim AreaName As String

        If NAreas = 0 Then
            AreaNo = -1
            txtAreaName.Text = ""

        Else
            txtAreaName.Text = myParent.AreaInfo(AreaNo).<Name>.Value

            If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                Dim legendDocking As New XElement("LegendDocking", "Right")
                myParent.AreaInfo(AreaNo).Add(legendDocking)
                cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact("Right")
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Else
                cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact(myParent.AreaInfo(AreaNo).<LegendDocking>.Value)
            End If

            Dim myFontStyle As FontStyle
            Dim myFontName As String
            Dim myFontSize As Single

            'AxisX:
            txtXAxisTitle.Text = myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Text>.Value
            cmbXAxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Alignment>.Value)
            txtXAxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisX>.<Title>.<Font>.<Size>.Value
            txtXAxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtXAxisMin.Text = myParent.AreaInfo(AreaNo).<AxisX>.<Minimum>.Value
            chkXAxisAutoMin.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<AutoMinimum>.Value
            txtXAxisMax.Text = myParent.AreaInfo(AreaNo).<AxisX>.<Maximum>.Value
            chkXAxisAutoMax.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<AutoMaximum>.Value
            txtXAxisAnnotInt.Text = myParent.AreaInfo(AreaNo).<AxisX>.<Interval>.Value
            chkXAxisAutoAnnotInt.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<AutoInterval>.Value
            If myParent.AreaInfo(AreaNo).<AxisX>.<IntervalOffset>.Value <> Nothing Then
                txtXAxisIntervalOffset.Text = myParent.AreaInfo(AreaNo).<AxisX>.<IntervalOffset>.Value
            Else
                txtXAxisIntervalOffset.Text = ""
            End If

            'txtXAxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyleFormat>.Value
            txtXAxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Format>.Value
            txtXLabelFont.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Size>.Value
            txtXLabelFont.Font = New Font(myFontName, myFontSize, myFontStyle)

            chkXAxisScrollBar.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<Scrollbar>.Value
            chkLogXAxis.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<Logarithmic>.Value
            If myParent.AreaInfo(AreaNo).<AxisX>.<RoundAxisValues>.Value <> Nothing Then chkRoundXAxisValues.Checked = myParent.AreaInfo(AreaNo).<AxisX>.<RoundAxisValues>.Value

            txtX2AxisTitle.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Text>.Value
            cmbX2AxisTitleAlignment.SelectedIndex = cmbX2AxisTitleAlignment.FindStringExact(myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Alignment>.Value)
            txtX2AxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisX2>.<Title>.<Font>.<Size>.Value
            txtX2AxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtX2AxisMin.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<Minimum>.Value
            chkX2AxisAutoMin.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<AutoMinimum>.Value
            txtX2AxisMax.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<Maximum>.Value
            chkX2AxisAutoMax.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<AutoMaximum>.Value
            txtX2AxisAnnotInt.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<Interval>.Value
            If myParent.AreaInfo(AreaNo).<AxisX2>.<AutoInterval>.Value <> Nothing Then chkX2AxisAutoAnnotInt.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<AutoInterval>.Value

            'txtX2AxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyleFormat>.Value
            txtX2AxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Format>.Value
            txtX2LabelFont.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Size>.Value
            txtX2LabelFont.Font = New Font(myFontName, myFontSize, myFontStyle)

            chkX2AxisScrollBar.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<Scrollbar>.Value
            chkLogX2Axis.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<Logarithmic>.Value
            If myParent.AreaInfo(AreaNo).<AxisX2>.<RoundAxisValues>.Value <> Nothing Then chkRoundX2AxisValues.Checked = myParent.AreaInfo(AreaNo).<AxisX2>.<RoundAxisValues>.Value

            txtYAxisTitle.Text = myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Text>.Value
            cmbYAxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Alignment>.Value)
            txtYAxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisY>.<Title>.<Font>.<Size>.Value
            txtYAxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtYAxisMin.Text = myParent.AreaInfo(AreaNo).<AxisY>.<Minimum>.Value
            chkYAxisAutoMin.Checked = myParent.AreaInfo(AreaNo).<AxisY>.<AutoMinimum>.Value
            txtYAxisMax.Text = myParent.AreaInfo(AreaNo).<AxisY>.<Maximum>.Value
            chkYAxisAutoMax.Checked = myParent.AreaInfo(AreaNo).<AxisY>.<AutoMaximum>.Value
            txtYAxisAnnotInt.Text = myParent.AreaInfo(AreaNo).<AxisY>.<Interval>.Value
            If myParent.AreaInfo(AreaNo).<AxisY>.<AutoInterval>.Value <> Nothing Then chkYAxisAutoAnnotInt.Checked = myParent.AreaInfo(AreaNo).<AxisY>.<AutoInterval>.Value

            'txtYAxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyleFormat>.Value
            txtYAxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Format>.Value
            txtYLabelFont.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Size>.Value
            txtYLabelFont.Font = New Font(myFontName, myFontSize, myFontStyle)

            chkYAxisScrollBar.Checked = myParent.AreaInfo(AreaNo).<AxisY>.<Scrollbar>.Value
            chkLogYAxis.Checked = myParent.AreaInfo(AreaNo).<AxisY>.<Logarithmic>.Value

            txtY2AxisTitle.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Text>.Value
            cmbY2AxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Alignment>.Value)
            txtY2AxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisY2>.<Title>.<Font>.<Size>.Value
            txtY2AxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtY2AxisMin.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<Minimum>.Value
            chkY2AxisAutoMin.Checked = myParent.AreaInfo(AreaNo).<AxisY2>.<AutoMinimum>.Value
            txtY2AxisMax.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<Maximum>.Value
            chkY2AxisAutoMax.Checked = myParent.AreaInfo(AreaNo).<AxisY2>.<AutoMaximum>.Value
            txtY2AxisAnnotInt.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<Interval>.Value
            If myParent.AreaInfo(AreaNo).<AxisY2>.<AutoInterval>.Value <> Nothing Then chkY2AxisAutoAnnotInt.Checked = myParent.AreaInfo(AreaNo).<AxisY2>.<AutoInterval>.Value

            'txtY2AxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyleFormat>.Value
            txtY2AxisLabelStyleFormat.Text = myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Format>.Value
            txtY2LabelFont.ForeColor = Color.FromArgb(myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Size>.Value
            txtY2LabelFont.Font = New Font(myFontName, myFontSize, myFontStyle)

            chkY2AxisScrollBar.Checked = myParent.AreaInfo(AreaNo).<AxisY2>.<Scrollbar>.Value
            chkLogY2Axis.Checked = myParent.AreaInfo(AreaNo).<AxisY2>.<Logarithmic>.Value
        End If
    End Sub


    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        'Save the Chart settings.

        SaveChart()
        Main.SaveDistModel()

        'ChartName = txtSelChartName.Text.Trim

        ''Update the Chart form position in ChartInfo - Dont try to update old ChartInfo formats without these elements
        'If ChartInfo.<ChartSettings>.<FormHeight>.Value <> Nothing Then ChartInfo.<ChartSettings>.<FormHeight>.Value = myParent.Height
        'If ChartInfo.<ChartSettings>.<FormWidth>.Value <> Nothing Then ChartInfo.<ChartSettings>.<FormWidth>.Value = myParent.Width
        'If ChartInfo.<ChartSettings>.<FormTop>.Value <> Nothing Then ChartInfo.<ChartSettings>.<FormTop>.Value = myParent.Top
        'If ChartInfo.<ChartSettings>.<FormLeft>.Value <> Nothing Then ChartInfo.<ChartSettings>.<FormLeft>.Value = myParent.Left

        'If DataSource Is Nothing Then
        '    Main.Message.AddWarning("Unknown data source: " & vbCrLf)
        'Else
        '    DataSource.ChartName = ChartName
        '    If DataSource.ChartList.ContainsKey(ChartName) Then
        '        DataSource.ChartList(ChartName) = ChartInfo
        '    Else
        '        DataSource.ChartList.Add(ChartName, ChartInfo)
        '        Dim myButton As System.Windows.Forms.Button = myParent.Controls("btnUpdate")
        '        myButton.PerformClick()
        '    End If
        '    Main.Distribution.Modified = True
        'End If

        'RefreshChartList()
    End Sub

    Public Sub SaveChart()
        'Save the chart settings

        ChartName = txtSelChartName.Text.Trim

        'Update the Chart form position in ChartInfo - Dont try to update old ChartInfo formats without these elements
        If myParent.ChartInfo.<ChartSettings>.<FormHeight>.Value <> Nothing Then myParent.ChartInfo.<ChartSettings>.<FormHeight>.Value = myParent.Height
        If myParent.ChartInfo.<ChartSettings>.<FormWidth>.Value <> Nothing Then myParent.ChartInfo.<ChartSettings>.<FormWidth>.Value = myParent.Width
        If myParent.ChartInfo.<ChartSettings>.<FormTop>.Value <> Nothing Then myParent.ChartInfo.<ChartSettings>.<FormTop>.Value = myParent.Top
        If myParent.ChartInfo.<ChartSettings>.<FormLeft>.Value <> Nothing Then myParent.ChartInfo.<ChartSettings>.<FormLeft>.Value = myParent.Left

        If DataSource Is Nothing Then
            Main.Message.AddWarning("Unknown data source: " & vbCrLf)
        Else
            DataSource.ChartName = ChartName
            If DataSource.ChartList.ContainsKey(ChartName) Then
                DataSource.ChartList(ChartName) = myParent.ChartInfo
            Else
                DataSource.ChartList.Add(ChartName, myParent.ChartInfo)
                ''Dim myButton As System.Windows.Forms.Button = myParent.Controls("btnUpdate")
                ''myButton.PerformClick()
                'DirectCast(myParent, frmChart).UpdateChartList()
            End If
            Main.Distribution.Modified = True
            Modified = False 'All of the chart modifications have been saved.
            'DirectCast(myParent, frmChart).UpdateChartList()
            myParent.UpdateChartList()
        End If

        RefreshChartList()
    End Sub

    Private Sub RefreshChartList()
        If DataSource Is Nothing Then
        Else
            cmbChartList.Items.Clear()
            For Each item In DataSource.ChartList.Keys
                cmbChartList.Items.Add(item.ToString)
            Next
            cmbChartList.SelectedIndex = cmbChartList.FindStringExact(ChartName)
        End If
    End Sub

    Private Sub btnSelectChart_Click(sender As Object, e As EventArgs) Handles btnSelectChart.Click
        'Select a Chart.

        If cmbChartList.SelectedIndex = -1 Then
            Main.Message.AddWarning("Please select a chart from the list." & vbCrLf)
        Else
            ChartName = cmbChartList.SelectedItem.ToString
            'SelectChart(ChartName)
            PlotChart()
        End If

    End Sub

    Public Sub SelectChart(ByVal ChartName As String)
        'Select the Chart named ChartName.

        If DataSource Is Nothing Then

        Else
            If DataSource.ChartList.ContainsKey(ChartName) Then
                myParent.ChartInfo = DataSource.ChartList(ChartName)
                txtSelChartName.Text = ChartName
                txtSelChartDescr.Text = myParent.ChartInfo.<ChartSettings>.<Description>.Value
                myParent.AreaInfo = From item In myParent.ChartInfo.<ChartSettings>.<ChartAreasCollection>.<ChartArea>
                myParent.SeriesInfo = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series>
                myParent.TitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title>
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
                myParent.AreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation>

                UpdateAreaOptions()
                UpdateTitlesTabSettings()
                UpdateAreasTabSettings()
                UpdateSeriesTabSettings()
                UpdateAnnotationTabSettings()
                UpdateAnnotationDisplaySettings()
                'LoadChartInfo() 'Renamed PlotChart - This is now applied separately
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Else
                Main.Message.AddWarning("Chart not found in the list: " & ChartName & vbCrLf)
            End If
        End If
    End Sub

    Public Sub ReloadChart()
        SelectChart(ChartName)
    End Sub

    'Public Sub LoadChartInfo()

    Public Sub PlotChart()
        'Load the information in ChartInfo into the Chart and set up the Chart design tabs.

        If myParent.ChartInfo Is Nothing Then
            Main.Message.AddWarning("There is no chart information to load." & vbCrLf)
            Exit Sub
        End If

        'Restore the Chart Titles: NOTE: Chart Areas must be restored before the Titles - Titles may be docked to Chart Areas.
        Dim myFontStyle As FontStyle
        Dim myFontSize As Single

        'Restore Chart Areas:
        Dim Areas = From item In myParent.ChartInfo.<ChartSettings>.<ChartAreasCollection>.<ChartArea>
        Dim AreaName As String
        myParent.Chart1.ChartAreas.Clear()

        Dim I As Integer = 0

        For Each item In Areas
            AreaName = item.<Name>.Value
            If AreaName = Nothing Then
                'No area to add.
            Else
                myParent.Chart1.ChartAreas.Add(AreaName)

                If I = 0 Then
                    myParent.Chart1.Legends(0).Name = AreaName
                Else
                    If myParent.Chart1.Legends.IndexOf(AreaName) = -1 Then myParent.Chart1.Legends.Add(AreaName) 'Add the legend if it doesnt exist
                End If

                myParent.Chart1.Legends(I).DockedToChartArea = AreaName
                myParent.Chart1.Legends(I).Alignment = StringAlignment.Center
                myParent.Chart1.Legends(I).BorderColor = Color.Black
                myParent.Chart1.Legends(I).ShadowColor = Color.Gray
                I += 1

                If item.<CursorXIsUserEnabled>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorX.IsUserEnabled = item.<CursorXIsUserEnabled>.Value
                If item.<CursorYIsUserEnabled>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorY.IsUserEnabled = item.<CursorYIsUserEnabled>.Value
                If item.<CursorXInterval>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorX.Interval = item.<CursorXInterval>.Value
                If item.<CursorYInterval>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorY.Interval = item.<CursorYInterval>.Value
                If item.<CursorXIsUserSelectionEnabled>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorX.IsUserSelectionEnabled = item.<CursorXIsUserSelectionEnabled>.Value
                If item.<CursorYIsUserSelectionEnabled>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).CursorY.IsUserSelectionEnabled = item.<CursorYIsUserSelectionEnabled>.Value

                'AxisX Properties:
                myParent.Chart1.ChartAreas(AreaName).AxisX.Title = item.<AxisX>.<Title>.<Text>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisX>.<Title>.<Alignment>.Value)
                myParent.Chart1.ChartAreas(AreaName).AxisX.TitleForeColor = Color.FromArgb(item.<AxisX>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If item.<AxisX>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If item.<AxisX>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If item.<AxisX>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If item.<AxisX>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = item.<AxisX>.<Title>.<Font>.<Size>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX.TitleFont = New Font(item.<AxisX>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If item.<AxisX>.<LabelStyle>.<Format>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisX.LabelStyle.Format = item.<AxisX>.<LabelStyle>.<Format>.Value

                myParent.Chart1.ChartAreas(AreaName).AxisX.Minimum = item.<AxisX>.<Minimum>.Value
                If item.<AxisX>.<AutoMinimum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX.Minimum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisX.Maximum = item.<AxisX>.<Maximum>.Value
                If item.<AxisX>.<AutoMaximum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX.Maximum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisX.LineWidth = item.<AxisX>.<LineWidth>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX.Interval = item.<AxisX>.<Interval>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX.IntervalOffset = item.<AxisX>.<IntervalOffset>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX.Crossing = item.<AxisX>.<Crossing>.Value

                If item.<AxisX>.<AutoInterval>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX.Interval = Double.NaN
                If item.<AxisX>.<ScaleViewZoomable>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisX.ScaleView.Zoomable = item.<AxisX>.<ScaleViewZoomable>.Value
                If item.<AxisX>.<RoundAxisValues>.Value <> Nothing Then
                    If item.<AxisX>.<RoundAxisValues>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX.RoundAxisValues()
                End If

                'AxisX2 Properties:
                myParent.Chart1.ChartAreas(AreaName).AxisX2.Title = item.<AxisX2>.<Title>.<Text>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisX2>.<Title>.<Alignment>.Value)
                myParent.Chart1.ChartAreas(AreaName).AxisX2.TitleForeColor = Color.FromArgb(item.<AxisX2>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If item.<AxisX2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If item.<AxisX2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If item.<AxisX2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If item.<AxisX2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = item.<AxisX2>.<Title>.<Font>.<Size>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX2.TitleFont = New Font(item.<AxisX2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If item.<AxisX2>.<LabelStyle>.<Format>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisX2.LabelStyle.Format = item.<AxisX2>.<LabelStyle>.<Format>.Value

                myParent.Chart1.ChartAreas(AreaName).AxisX2.Minimum = item.<AxisX2>.<Minimum>.Value
                If item.<AxisX2>.<AutoMinimum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX2.Minimum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisX2.Maximum = item.<AxisX2>.<Maximum>.Value
                If item.<AxisX2>.<AutoMaximum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX2.Maximum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisX2.LineWidth = item.<AxisX2>.<LineWidth>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX2.Interval = item.<AxisX2>.<Interval>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX2.IntervalOffset = item.<AxisX2>.<IntervalOffset>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisX2.Crossing = item.<AxisX2>.<Crossing>.Value

                If item.<AxisX2>.<AutoInterval>.Value <> Nothing Then If item.<AxisX2>.<AutoInterval>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisX2.Interval = Double.NaN
                If item.<AxisX2>.<ScaleViewZoomable>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisX2.ScaleView.Zoomable = item.<AxisX2>.<ScaleViewZoomable>.Value

                'AxisY Properties:
                myParent.Chart1.ChartAreas(AreaName).AxisY.Title = item.<AxisY>.<Title>.<Text>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisY>.<Title>.<Alignment>.Value)
                myParent.Chart1.ChartAreas(AreaName).AxisY.TitleForeColor = Color.FromArgb(item.<AxisY>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If item.<AxisY>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If item.<AxisY>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If item.<AxisY>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If item.<AxisY>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = item.<AxisY>.<Title>.<Font>.<Size>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY.TitleFont = New Font(item.<AxisY>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If item.<AxisY>.<LabelStyle>.<Format>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisY.LabelStyle.Format = item.<AxisY>.<LabelStyle>.<Format>.Value

                myParent.Chart1.ChartAreas(AreaName).AxisY.Minimum = item.<AxisY>.<Minimum>.Value
                If item.<AxisY>.<AutoMinimum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY.Minimum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisY.Maximum = item.<AxisY>.<Maximum>.Value
                If item.<AxisY>.<AutoMaximum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY.Maximum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisY.LineWidth = item.<AxisY>.<LineWidth>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY.Interval = item.<AxisY>.<Interval>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY.IntervalOffset = item.<AxisY>.<IntervalOffset>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY.Crossing = item.<AxisY>.<Crossing>.Value

                If item.<AxisY>.<AutoInterval>.Value <> Nothing Then If item.<AxisY>.<AutoInterval>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY.Interval = Double.NaN
                If item.<AxisY>.<ScaleViewZoomable>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisY.ScaleView.Zoomable = item.<AxisY>.<ScaleViewZoomable>.Value

                'AxisY2 Properties:
                myParent.Chart1.ChartAreas(AreaName).AxisY2.Title = item.<AxisY2>.<Title>.<Text>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisY2>.<Title>.<Alignment>.Value)
                myParent.Chart1.ChartAreas(AreaName).AxisY2.TitleForeColor = Color.FromArgb(item.<AxisY2>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If item.<AxisY2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If item.<AxisY2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If item.<AxisY2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If item.<AxisY2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = item.<AxisY2>.<Title>.<Font>.<Size>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY2.TitleFont = New Font(item.<AxisY2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If item.<AxisY2>.<LabelStyle>.<Format>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisY2.LabelStyle.Format = item.<AxisY2>.<LabelStyle>.<Format>.Value

                myParent.Chart1.ChartAreas(AreaName).AxisY2.Minimum = item.<AxisY2>.<Minimum>.Value
                If item.<AxisY2>.<AutoMinimum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY2.Minimum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisY2.Maximum = item.<AxisY2>.<Maximum>.Value
                If item.<AxisY2>.<AutoMaximum>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY2.Maximum = Double.NaN

                myParent.Chart1.ChartAreas(AreaName).AxisY2.LineWidth = item.<AxisY2>.<LineWidth>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY2.Interval = item.<AxisY2>.<Interval>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY2.IntervalOffset = item.<AxisY2>.<IntervalOffset>.Value
                myParent.Chart1.ChartAreas(AreaName).AxisY2.Crossing = item.<AxisY2>.<Crossing>.Value

                If item.<AxisY2>.<AutoInterval>.Value <> Nothing Then If item.<AxisY2>.<AutoInterval>.Value = True Then myParent.Chart1.ChartAreas(AreaName).AxisY2.Interval = Double.NaN
                If item.<AxisY2>.<ScaleViewZoomable>.Value <> Nothing Then myParent.Chart1.ChartAreas(AreaName).AxisY2.ScaleView.Zoomable = item.<AxisY2>.<ScaleViewZoomable>.Value

            End If
        Next

        'Restore the Chart Titles:
        'Dim TitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title>
        Dim myTitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title> 'CHECK: Use myParent.TitleInfo???

        Dim TitleName As String
        myParent.Chart1.Titles.Clear()
        For Each item In myTitleInfo
            TitleName = item.<Name>.Value
            If TitleName = Nothing Then
                'No Title to add.
            Else
                Dim NewTitle As New DataVisualization.Charting.Title
                NewTitle.Name = TitleName
                NewTitle.Text = item.<Text>.Value

                myParent.Chart1.Titles.Add(NewTitle)
                myParent.Chart1.Titles(TitleName).IsDockedInsideChartArea = False

                ''NOTE: The code has been changed. The ChartArea property is set to "" for the main title - the DockedToChartArea will not be set.
                ''  The - If TitleName = "MainTitle" Then - code can be remoded in the future. This just handles old chart files with the Chart Area set for the Main Title.
                'If TitleName = "MainTitle" Then
                '    'Do not set the DockedToChartArea property
                'Else
                '    If item.<ChartArea>.Value <> Nothing Then
                '        If item.<ChartArea>.Value = "" Then

                '        Else
                '            myChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                '        End If
                '    End If
                'End If


                If item.<ChartArea>.Value = "" Then

                Else
                    myParent.Chart1.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                End If

                myParent.Chart1.Titles(TitleName).Text = item.<Text>.Value
                myParent.Chart1.Titles(TitleName).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), item.<TextOrientation>.Value)
                Try
                    myParent.Chart1.Titles(TitleName).Alignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                Catch ex As Exception
                    Main.Message.AddWarning("Loading chart. Chart title alignment: " & ex.Message & vbCrLf)
                End Try

                myParent.Chart1.Titles(TitleName).ForeColor = Color.FromArgb(item.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If item.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If item.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If item.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If item.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = item.<Font>.<Size>.Value
                myParent.Chart1.Titles(TitleName).Font = New Font(item.<Font>.<Name>.Value, myFontSize, myFontStyle)
            End If
        Next

        myParent.Chart1.Series.Clear()
        myParent.Chart1.Annotations.Clear()
        'ApplyAreaShading()
        myParent.ApplyAreaShading()

        'Restore Chart Series:
        Dim Series = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series>
        Dim SeriesName As String
        'myChart.Series.Clear()
        For Each item In Series
            SeriesName = item.<Name>.Value
            If SeriesName = Nothing Then
                'Empty series: <Series></Series>
                'No Series to add.
            Else
                If myParent.Chart1.Series.IndexOf(SeriesName) = -1 Then
                    myParent.Chart1.Series.Add(SeriesName)
                    myParent.Chart1.Series(SeriesName).ChartType = [Enum].Parse(GetType(DataVisualization.Charting.SeriesChartType), item.<ChartType>.Value)
                    If item.<ChartArea>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).ChartArea = item.<ChartArea>.Value
                    myParent.Chart1.Series(SeriesName).Legend = item.<Legend>.Value

                    'Point Chart custom properties
                    If item.<EmptyPointValue>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).SetCustomProperty("EmptyPointValue", item.<EmptyPointValue>.Value)
                    If item.<LabelStyle>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).SetCustomProperty("LabelStyle", item.<LabelStyle>.Value)
                    If item.<PixelPointDepth>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).SetCustomProperty("PixelPointDepth", item.<PixelPointDepth>.Value)
                    If item.<PixelPointGapDepth>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).SetCustomProperty("PixelPointGapDepth", item.<PixelPointGapDepth>.Value)
                    If item.<ShowMarkerLines>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).SetCustomProperty("ShowMarkerLines", item.<ShowMarkerLines>.Value)

                    myParent.Chart1.Series(SeriesName).AxisLabel = item.<AxisLabel>.Value
                    myParent.Chart1.Series(SeriesName).XAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<XAxisType>.Value)
                    myParent.Chart1.Series(SeriesName).YAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<YAxisType>.Value)

                    If item.<XValueType>.Value = Nothing Then
                        item.Add(New XElement("XValueType", "Auto"))
                        myParent.Chart1.Series(SeriesName).XValueType = DataVisualization.Charting.ChartValueType.Auto
                    Else
                        myParent.Chart1.Series(SeriesName).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<XValueType>.Value)
                    End If

                    If item.<YValueType>.Value = Nothing Then
                        item.Add(New XElement("YValueType", "Auto"))
                        myParent.Chart1.Series(SeriesName).YValueType = DataVisualization.Charting.ChartValueType.Auto
                    Else
                        myParent.Chart1.Series(SeriesName).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<YValueType>.Value)
                    End If

                    If item.<Marker>.<BorderColor>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerBorderColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    If item.<Marker>.<BorderWidth>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerBorderWidth = item.<Marker>.<BorderWidth>.Value
                    If item.<Marker>.<Color>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    If item.<Marker>.<Size>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerSize = item.<Marker>.<Size>.Value
                    If item.<Marker>.<Step>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerStep = item.<Marker>.<Step>.Value
                    If item.<Marker>.<Style>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), item.<Marker>.<Style>.Value)
                    If item.<Color>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).Color = Color.FromArgb(item.<Color>.Value)
                    If item.<Width>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).BorderWidth = item.<Width>.Value
                    If item.<ToolTip>.Value <> Nothing Then myParent.Chart1.Series(SeriesName).ToolTip = item.<ToolTip>.Value

                    Try
                        If DataSource Is Nothing Then

                        Else
                            'myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(TableName).DefaultView, item.<YFieldName>.Value)
                            'myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                            If item.<Continuity>.Value = "Continuous" Then
                                myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                            ElseIf item.<Continuity>.Value = "Discrete" Then
                                myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(DiscTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(DiscTableName).DefaultView, item.<YFieldName>.Value)
                            Else
                                Main.Message.AddWarning("ChartSettings-PlotChart-Unknown continuity: " & item.<Continuity>.Value & vbCrLf)
                            End If
                        End If
                    Catch ex As Exception
                        Main.Message.AddWarning("ChartSettings-PlotChart-Error loading Chart information: " & vbCrLf & ex.Message & vbCrLf)
                    End Try
                Else
                    Main.Message.AddWarning("The series name is already used: " & SeriesName & vbCrLf)
                End If
            End If
        Next

        UpdateChartTypes()
        'ApplyAnnotation() 'Temp disable for debugging
        'ApplyAreaShading()
        'ApplyAnnotation(PointAnnotInfo)
        UpdateAnnotation()

    End Sub

    Private Sub UpdateChartTypes()
        'Update the list of chart types in cmbChartType

        cmbChartType.Items.Clear()

        cmbChartType.Items.Add("All")

        'Dim ChartIndex As Integer

        'ChartIndex = myChart.ChartAreas.IndexOf("PdfArea")
        'If ChartIndex > -1 Then cmbChartType.Items.Add("PDF")

        'ChartIndex = myChart.ChartAreas.IndexOf("CdfArea")
        'If ChartIndex > -1 Then cmbChartType.Items.Add("CDF")

        'ChartIndex = myChart.ChartAreas.IndexOf("RevCdfArea")
        'If ChartIndex > -1 Then cmbChartType.Items.Add("RevCDF")

        'ChartIndex = myChart.ChartAreas.IndexOf("InvCdfArea")
        'If ChartIndex > -1 Then cmbChartType.Items.Add("InvCDF")

        'ChartIndex = myChart.ChartAreas.IndexOf("InvRevCdfArea")
        'If ChartIndex > -1 Then cmbChartType.Items.Add("InvRevCDF")

        If myParent.Chart1.ChartAreas.IndexOf("PdfArea") > -1 Then cmbChartType.Items.Add("PDF")
        If myParent.Chart1.ChartAreas.IndexOf("PmfArea") > -1 Then cmbChartType.Items.Add("PMF")
        If myParent.Chart1.ChartAreas.IndexOf("CdfArea") > -1 Then cmbChartType.Items.Add("CDF")
        If myParent.Chart1.ChartAreas.IndexOf("RevCdfArea") > -1 Then cmbChartType.Items.Add("RevCDF")
        If myParent.Chart1.ChartAreas.IndexOf("InvCdfArea") > -1 Then cmbChartType.Items.Add("InvCDF")
        If myParent.Chart1.ChartAreas.IndexOf("InvRevCdfArea") > -1 Then cmbChartType.Items.Add("InvRevDF")

        cmbChartType.SelectedIndex = 0

    End Sub


    Private Sub UpdateTitlesTabSettings()
        'Update the Titles tab settings from ChartInfo.

        Dim NTitles As Integer = myParent.TitleInfo.Count
        txtNTitlesRecords.Text = NTitles
        Dim TitleName As String

        If NTitles = 0 Then
            TitleNo = -1
            txtTitleName.Text = ""
            txtChartTitle.Text = ""
            cmbAlignment.SelectedIndex = -1
            cmbOrientation.SelectedIndex = -1
        Else
            TitleNo = 0
            If myParent.TitleInfo(0).<ChartArea>.Value <> Nothing Then cmbTitleChartArea.SelectedIndex = cmbTitleChartArea.FindStringExact(myParent.TitleInfo(0).<ChartArea>.Value)
            txtTitleName.Text = myParent.TitleInfo(0).<Name>.Value
            txtChartTitle.Text = myParent.TitleInfo(0).<Text>.Value
            txtChartTitle.ForeColor = Color.FromArgb(myParent.TitleInfo(0).<ForeColor>.Value)
            Dim myFontStyle As FontStyle
            Dim myFontSize As Single = myParent.TitleInfo(0).<Font>.<Size>.Value
            myFontStyle = FontStyle.Regular
            If myParent.TitleInfo(0).<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.TitleInfo(0).<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.TitleInfo(0).<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.TitleInfo(0).<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            txtChartTitle.Font = New Font(myParent.TitleInfo(0).<Font>.<Name>.Value, myFontSize, myFontStyle)

            cmbAlignment.SelectedIndex = cmbAlignment.FindStringExact(myParent.TitleInfo(0).<Alignment>.Value)
            cmbOrientation.SelectedIndex = cmbOrientation.FindStringExact(myParent.TitleInfo(0).<TextOrientation>.Value)

            txtLegendFont.ForeColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<Legend>.<ForeColor>.Value)
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Size>.Value
            txtLegendFont.Font = New Font(myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Name>.Value, myFontSize, myFontStyle)

        End If
    End Sub
    Private Sub UpdateSeriesTabSettings_OLD()
        'Update the Series tab settings from ChartInfo.

        Dim NSeries As Integer = myParent.SeriesInfo.Count
        Dim SeriesName As String

        dgvSeries.Rows.Clear()
        dgvSeries.Rows.Add(NSeries)

        If NSeries = 0 Then

        Else
            Dim RowNo As Integer = 0
            For Each item In myParent.SeriesInfo
                dgvSeries.Rows(RowNo).Cells(0).Value = item.<Name>.Value
                dgvSeries.Rows(RowNo).Cells(1).Value = item.<ChartType>.Value
                dgvSeries.Rows(RowNo).Cells(2).Value = item.<ChartArea>.Value
                dgvSeries.Rows(RowNo).Cells(3).Value = item.<XFieldName>.Value
                dgvSeries.Rows(RowNo).Cells(4).Value = item.<XAxisType>.Value

                If item.<XValueType>.Value = Nothing Then
                    item.Add(New XElement("XValueType", "Auto"))
                    dgvSeries.Rows(RowNo).Cells(5).Value = "Auto"
                Else
                    dgvSeries.Rows(RowNo).Cells(5).Value = item.<XValueType>.Value
                End If

                dgvSeries.Rows(RowNo).Cells(6).Value = item.<YFieldName>.Value
                dgvSeries.Rows(RowNo).Cells(7).Value = item.<YAxisType>.Value

                If item.<YValueType>.Value = Nothing Then
                    item.Add(New XElement("YValueType", "Auto"))
                    dgvSeries.Rows(RowNo).Cells(8).Value = "Auto"
                Else
                    dgvSeries.Rows(RowNo).Cells(8).Value = item.<YValueType>.Value
                End If

                'UPDATE 26/6/22
                dgvSeries.Rows(RowNo).Cells(9).Value = item.<LegendText>.Value

                dgvSeries.Rows(RowNo).Cells(10).Value = item.<Marker>.<Fill>.Value
                dgvSeries.Rows(RowNo).Cells(11).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                dgvSeries.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                dgvSeries.Rows(RowNo).Cells(13).Value = item.<Marker>.<BorderWidth>.Value
                dgvSeries.Rows(RowNo).Cells(14).Value = item.<Marker>.<Style>.Value
                dgvSeries.Rows(RowNo).Cells(15).Value = item.<Marker>.<Size>.Value
                dgvSeries.Rows(RowNo).Cells(16).Value = item.<Marker>.<Step>.Value
                dgvSeries.Rows(RowNo).Cells(17).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                dgvSeries.Rows(RowNo).Cells(18).Value = item.<Width>.Value
                dgvSeries.Rows(RowNo).Cells(19).Value = item.<ToolTip>.Value
                RowNo += 1
            Next
        End If
    End Sub

    Private Sub UpdateSeriesTabSettings()
        'Update the Series tab settings from ChartInfo.

        'Dim SeriesName As String
        Dim RowNo As Integer

        dgvSeries.Rows.Clear()
        'dgvDiscrete.Rows.Clear()

        If myParent.SeriesInfo.Count = 0 Then

        Else
            For Each item In myParent.SeriesInfo
                If item.<Continuity>.Value = Nothing Or item.<Continuity>.Value = "Continuous" Then
                    dgvSeries.Rows.Add(item.<Name>.Value, "Continuous", item.<ChartType>.Value, item.<ChartArea>.Value, item.<XFieldName>.Value, item.<XAxisType>.Value, item.<XValueType>.Value, item.<YFieldName>.Value, item.<YAxisType>.Value, item.<YValueType>.Value, item.<LegendText>.Value, item.<Marker>.<Fill>.Value, "", "", item.<Marker>.<BorderWidth>.Value, item.<Marker>.<Style>.Value, item.<Marker>.<Size>.Value, item.<Marker>.<Step>.Value, "", item.<Width>.Value, item.<ToolTip>.Value)
                    RowNo = dgvSeries.RowCount - 1
                    'dgvSeries.Rows(RowNo).Cells(11).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    dgvSeries.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    'dgvSeries.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    dgvSeries.Rows(RowNo).Cells(13).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    'dgvSeries.Rows(RowNo).Cells(17).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                    dgvSeries.Rows(RowNo).Cells(18).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                ElseIf item.<Continuity>.Value = "Discrete" Then
                    dgvSeries.Rows.Add(item.<Name>.Value, "Discrete", item.<ChartType>.Value, item.<ChartArea>.Value, item.<XFieldName>.Value, item.<XAxisType>.Value, item.<XValueType>.Value, item.<YFieldName>.Value, item.<YAxisType>.Value, item.<YValueType>.Value, item.<LegendText>.Value, item.<Marker>.<Fill>.Value, "", "", item.<Marker>.<BorderWidth>.Value, item.<Marker>.<Style>.Value, item.<Marker>.<Size>.Value, item.<Marker>.<Step>.Value, "", item.<Width>.Value, item.<ToolTip>.Value)
                    RowNo = dgvSeries.RowCount - 1
                    'dgvSeries.Rows(RowNo).Cells(11).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    dgvSeries.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    'dgvSeries.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    dgvSeries.Rows(RowNo).Cells(13).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    'dgvSeries.Rows(RowNo).Cells(17).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                    dgvSeries.Rows(RowNo).Cells(18).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                    'dgvDiscrete.Rows.Add(item.<Name>.Value, item.<ChartType>.Value, item.<ChartArea>.Value, item.<XFieldName>.Value, item.<XAxisType>.Value, item.<XValueType>.Value, item.<YFieldName>.Value, item.<YAxisType>.Value, item.<YValueType>.Value, item.<LegendText>.Value, item.<Marker>.<Fill>.Value, "", "", item.<Marker>.<BorderWidth>.Value, item.<Marker>.<Style>.Value, item.<Marker>.<Size>.Value, item.<Marker>.<Step>.Value, "", item.<Width>.Value, item.<ToolTip>.Value)
                    'RowNo = dgvDiscrete.RowCount - 1
                    'dgvDiscrete.Rows(RowNo).Cells(11).Style.BackColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                    'dgvDiscrete.Rows(RowNo).Cells(12).Style.BackColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                    'dgvDiscrete.Rows(RowNo).Cells(17).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                Else

                End If

            Next
        End If
    End Sub

    Private Sub UpdateAreaOptions()
        'Update the Chart Area selection options.
        cboArea.Items.Clear()
        cmbTitleChartArea.Items.Clear()
        'Dim AreaName As String
        'For Each item In AreaInfo
        '    AreaName = item.<Name>.Value
        '    If AreaName = Nothing Then
        '        'No area to add
        '    Else
        '        cboArea.Items.Add(item.<Name>.Value)
        '        cmbTitleChartArea.Items.Add(item.<Name>.Value)
        '    End If
        'Next

        If IsNothing(myParent.Chart1) Then

        Else
            'If myChart.ChartAreas.IndexOf("PdfArea") > -1 Then cboArea.Items.Add("PDF") : cmbTitleChartArea.Items.Add("PDF")
            'If myChart.ChartAreas.IndexOf("PmfArea") > -1 Then cboArea.Items.Add("PMF") : cmbTitleChartArea.Items.Add("PMF")
            'If myChart.ChartAreas.IndexOf("CdfArea") > -1 Then cboArea.Items.Add("CDF") : cmbTitleChartArea.Items.Add("CDF")
            'If myChart.ChartAreas.IndexOf("RevCdfArea") > -1 Then cboArea.Items.Add("RevCDF") : cmbTitleChartArea.Items.Add("RevCDF")
            'If myChart.ChartAreas.IndexOf("InvCdfArea") > -1 Then cboArea.Items.Add("InvCDF") : cmbTitleChartArea.Items.Add("InvCDF")
            'If myChart.ChartAreas.IndexOf("InvRevCdfArea") > -1 Then cboArea.Items.Add("InvRevCDF") : cmbTitleChartArea.Items.Add("InvRevCDF")
            'NOTE: cboArea is the Chart Area selection on the Series tab.
            If myParent.Chart1.ChartAreas.IndexOf("PdfArea") > -1 Then cboArea.Items.Add("PdfArea") : cmbTitleChartArea.Items.Add("PDF")
            If myParent.Chart1.ChartAreas.IndexOf("PmfArea") > -1 Then cboArea.Items.Add("PmfArea") : cmbTitleChartArea.Items.Add("PMF")
            If myParent.Chart1.ChartAreas.IndexOf("CdfArea") > -1 Then cboArea.Items.Add("CdfArea") : cmbTitleChartArea.Items.Add("CDF")
            If myParent.Chart1.ChartAreas.IndexOf("RevCdfArea") > -1 Then cboArea.Items.Add("RevCdfArea") : cmbTitleChartArea.Items.Add("RevCDF")
            If myParent.Chart1.ChartAreas.IndexOf("InvCdfArea") > -1 Then cboArea.Items.Add("InvCdfArea") : cmbTitleChartArea.Items.Add("InvCDF")
            If myParent.Chart1.ChartAreas.IndexOf("InvRevCdfArea") > -1 Then cboArea.Items.Add("InvRevCdfArea") : cmbTitleChartArea.Items.Add("InvRevCDF")
        End If

        'If cmbTitleChartArea.Items.Count > 0 Then cmbTitleChartArea.SelectedIndex = 0

    End Sub

    Private Sub UpdateAreasTabSettings()
        'Update the Areas tab settings from ChartInfo.

        Dim NAreas As Integer = myParent.AreaInfo.Count
        txtNAreaRecords.Text = NAreas
        Dim AreaName As String

        If NAreas = 0 Then
            'txtAreaRecordNo.Text = "0"
            AreaNo = -1
            txtAreaName.Text = ""
            txtXAxisTitle.Text = ""
            txtXAxisMin.Text = ""
            chkXAxisAutoMin.Checked = True
            txtXAxisMax.Text = ""
            chkXAxisAutoMax.Checked = True
            txtXAxisAnnotInt.Text = ""
            chkXAxisAutoAnnotInt.Checked = True
            txtXAxisLabelStyleFormat.Text = ""
            chkXAxisScrollBar.Checked = True
            chkLogXAxis.Text = False

            txtX2AxisTitle.Text = ""
            txtX2AxisMin.Text = ""
            chkX2AxisAutoMin.Checked = True
            txtX2AxisMax.Text = ""
            chkX2AxisAutoMax.Checked = True
            txtX2AxisAnnotInt.Text = ""
            chkX2AxisAutoAnnotInt.Checked = True
            txtX2AxisLabelStyleFormat.Text = ""
            chkX2AxisScrollBar.Checked = True
            chkLogX2Axis.Text = False

            txtYAxisTitle.Text = ""
            txtYAxisMin.Text = ""
            chkYAxisAutoMin.Checked = True
            txtYAxisMax.Text = ""
            chkYAxisAutoMax.Checked = True
            txtYAxisAnnotInt.Text = ""
            chkYAxisAutoAnnotInt.Checked = True
            txtYAxisLabelStyleFormat.Text = ""
            chkYAxisScrollBar.Checked = True
            chkLogYAxis.Text = False

            txtY2AxisTitle.Text = ""
            txtY2AxisMin.Text = ""
            chkY2AxisAutoMin.Checked = True
            txtY2AxisMax.Text = ""
            chkY2AxisAutoMax.Checked = True
            txtY2AxisAnnotInt.Text = ""
            chkY2AxisAutoAnnotInt.Checked = True
            txtY2AxisLabelStyleFormat.Text = ""
            chkY2AxisScrollBar.Checked = True
            chkLogY2Axis.Text = False
        Else
            Dim myFontStyle As FontStyle
            Dim myFontName As String
            Dim myFontSize As Single

            AreaNo = 0
            txtAreaName.Text = myParent.AreaInfo(0).<Name>.Value

            If myParent.AreaInfo(AreaNo).<LegendDocking>.Value = Nothing Then
                Dim legendDocking As New XElement("LegendDocking", "Right")
                myParent.AreaInfo(0).Add(legendDocking)
                cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact("Right")
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Else
                cmbLegendDocking.SelectedIndex = cmbLegendDocking.FindStringExact(myParent.AreaInfo(0).<LegendDocking>.Value)
            End If


            txtXAxisTitle.Text = myParent.AreaInfo(0).<AxisX>.<Title>.<Text>.Value
            cmbXAxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(0).<AxisX>.<Title>.<Alignment>.Value)
            txtXAxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(0).<AxisX>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(0).<AxisX>.<Title>.<Font>.<Size>.Value
            txtXAxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtXAxisMin.Text = myParent.AreaInfo(0).<AxisX>.<Minimum>.Value
            chkXAxisAutoMin.Checked = myParent.AreaInfo(0).<AxisX>.<AutoMinimum>.Value
            txtXAxisMax.Text = myParent.AreaInfo(0).<AxisX>.<Maximum>.Value
            chkXAxisAutoMax.Checked = myParent.AreaInfo(0).<AxisX>.<AutoMaximum>.Value
            txtXAxisAnnotInt.Text = myParent.AreaInfo(0).<AxisX>.<Interval>.Value
            chkXAxisAutoAnnotInt.Checked = myParent.AreaInfo(0).<AxisX>.<AutoInterval>.Value
            txtXAxisLabelStyleFormat.Text = myParent.AreaInfo(0).<AxisX>.<LabelStyle>.<Format>.Value
            chkXAxisScrollBar.Checked = myParent.AreaInfo(0).<AxisX>.<Scrollbar>.Value
            chkLogXAxis.Checked = myParent.AreaInfo(0).<AxisX>.<Logarithmic>.Value
            If myParent.AreaInfo(0).<AxisX>.<RoundAxisValues>.Value <> Nothing Then chkRoundXAxisValues.Checked = myParent.AreaInfo(0).<AxisX>.<RoundAxisValues>.Value

            txtX2AxisTitle.Text = myParent.AreaInfo(0).<AxisX2>.<Title>.<Text>.Value
            cmbX2AxisTitleAlignment.SelectedIndex = cmbX2AxisTitleAlignment.FindStringExact(myParent.AreaInfo(0).<AxisX2>.<Title>.<Alignment>.Value)
            txtX2AxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(0).<AxisX2>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(0).<AxisX2>.<Title>.<Font>.<Size>.Value
            txtX2AxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtX2AxisMin.Text = myParent.AreaInfo(0).<AxisX2>.<Minimum>.Value
            chkX2AxisAutoMin.Checked = myParent.AreaInfo(0).<AxisX2>.<AutoMinimum>.Value
            txtX2AxisMax.Text = myParent.AreaInfo(0).<AxisX2>.<Maximum>.Value
            chkX2AxisAutoMax.Checked = myParent.AreaInfo(0).<AxisX2>.<AutoMaximum>.Value
            txtX2AxisAnnotInt.Text = myParent.AreaInfo(0).<AxisX2>.<Interval>.Value
            chkX2AxisAutoAnnotInt.Checked = myParent.AreaInfo(0).<AxisX2>.<AutoInterval>.Value
            txtX2AxisLabelStyleFormat.Text = myParent.AreaInfo(0).<AxisX2>.<LabelStyle>.<Format>.Value
            chkX2AxisScrollBar.Checked = myParent.AreaInfo(0).<AxisX2>.<Scrollbar>.Value
            chkLogX2Axis.Checked = myParent.AreaInfo(0).<AxisX2>.<Logarithmic>.Value
            If myParent.AreaInfo(0).<AxisX2>.<RoundAxisValues>.Value <> Nothing Then chkRoundX2AxisValues.Checked = myParent.AreaInfo(0).<AxisX2>.<RoundAxisValues>.Value

            txtYAxisTitle.Text = myParent.AreaInfo(0).<AxisY>.<Title>.<Text>.Value
            cmbYAxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(0).<AxisY>.<Title>.<Alignment>.Value)
            txtYAxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(0).<AxisY>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(0).<AxisY>.<Title>.<Font>.<Size>.Value
            txtYAxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtYAxisMin.Text = myParent.AreaInfo(0).<AxisY>.<Minimum>.Value
            chkYAxisAutoMin.Checked = myParent.AreaInfo(0).<AxisY>.<AutoMinimum>.Value
            txtYAxisMax.Text = myParent.AreaInfo(0).<AxisY>.<Maximum>.Value
            chkYAxisAutoMax.Checked = myParent.AreaInfo(0).<AxisY>.<AutoMaximum>.Value
            txtYAxisAnnotInt.Text = myParent.AreaInfo(0).<AxisY>.<Interval>.Value
            chkYAxisAutoAnnotInt.Checked = myParent.AreaInfo(0).<AxisY>.<AutoInterval>.Value
            txtYAxisLabelStyleFormat.Text = myParent.AreaInfo(0).<AxisY>.<LabelStyle>.<Format>.Value
            chkYAxisScrollBar.Checked = myParent.AreaInfo(0).<AxisY>.<Scrollbar>.Value
            chkLogYAxis.Checked = myParent.AreaInfo(0).<AxisY>.<Logarithmic>.Value

            txtY2AxisTitle.Text = myParent.AreaInfo(0).<AxisY2>.<Title>.<Text>.Value
            cmbY2AxisTitleAlignment.SelectedIndex = cmbXAxisTitleAlignment.FindStringExact(myParent.AreaInfo(0).<AxisY2>.<Title>.<Alignment>.Value)
            txtY2AxisTitle.ForeColor = Color.FromArgb(myParent.AreaInfo(0).<AxisY2>.<Title>.<ForeColor>.Value)
            myFontName = myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Name>.Value
            myFontStyle = FontStyle.Regular
            If myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.AreaInfo(0).<AxisY2>.<Title>.<Font>.<Size>.Value
            txtY2AxisTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
            txtY2AxisMin.Text = myParent.AreaInfo(0).<AxisY2>.<Minimum>.Value
            chkY2AxisAutoMin.Checked = myParent.AreaInfo(0).<AxisY2>.<AutoMinimum>.Value
            txtY2AxisMax.Text = myParent.AreaInfo(0).<AxisY2>.<Maximum>.Value
            chkY2AxisAutoMax.Checked = myParent.AreaInfo(0).<AxisY2>.<AutoMaximum>.Value
            txtY2AxisAnnotInt.Text = myParent.AreaInfo(0).<AxisY2>.<Interval>.Value
            chkY2AxisAutoAnnotInt.Checked = myParent.AreaInfo(0).<AxisY2>.<AutoInterval>.Value
            txtY2AxisLabelStyleFormat.Text = myParent.AreaInfo(0).<AxisY2>.<LabelStyle>.<Format>.Value
            chkY2AxisScrollBar.Checked = myParent.AreaInfo(0).<AxisY2>.<Scrollbar>.Value
            chkLogY2Axis.Checked = myParent.AreaInfo(0).<AxisY2>.<Logarithmic>.Value
        End If
    End Sub

    Public Sub UpdateAnnotationTabSettings()
        'Update the Annotation tab settings from ChartInfo.

        'UPDATE THE POINT ANNOTATION SETTINGS:
        'SelDistrib is the selected distribution number.

        'hsUserDef1.Minimum = 1
        'hsUserDef1.LargeChange = 10
        'hsUserDef1.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef1.LargeChange - 1
        'txtUserDef1.Text = Main.Distribution.ContSampling.Minimum
        'hsUserDef1.Value = 1
        'Main.Message.Add("ContSamples NSamples = " & Main.Distribution.ContSampling.NSamples & vbCrLf)


        'hsUserDef2.Minimum = 1
        'hsUserDef2.LargeChange = 10
        'hsUserDef2.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef2.LargeChange - 1
        'txtUserDef2.Text = Main.Distribution.ContSampling.Maximum
        'hsUserDef2.Value = Main.Distribution.ContSampling.NSamples

        dgvPointAnnot.Rows.Clear()

        If IsNothing(myParent.PointAnnotInfo) Then
            Main.Message.Add("PointAnnotInfo is Nothing." & vbCrLf)
        Else
            'Dim SelPointAnnotInfo = From item In PointAnnotInfo Where item.<DistributionNo>.Value = SelDistrib 'THIS STATEMENT MAY BE CORRUPTING PointAnnotInfo
            Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Dim NPoints As Integer = SelPointAnnotInfo.Count
            'Main.Message.Add("The number of annotation points: " & NPoints & vbCrLf)

            'dgvPointAnnot.RowsDefaultCellStyle.WrapMode = DataGridViewTriState.True
            dgvPointAnnot.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders)
            'dgvPointAnnot.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCells)
            'dgvPointAnnot.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader)
            'dgvPointAnnot.AutoResizeRows(DataGridViewAutoSizeRowsMode.DisplayedCells)
            'dgvPointAnnot.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells)

            'dgvPointAnnot.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader
            'dgvPointAnnot.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
            'dgvPointAnnot.AutoResizeColumn()

            'dgvPointAnnot.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader)
            'dgvPointAnnot.Columns(15).Width = 240

            Dim CdfProb As Double
            Dim RevCdfProb As Double
            Dim Value As Double
            Dim ProbDens As Double
            Dim RowNo As Integer = 0
            For Each item In SelPointAnnotInfo
                If item.<CdfProbability>.Value <> Nothing Then CdfProb = item.<CdfProbability>.Value Else CdfProb = Double.NaN
                If item.<RevCdfProbability>.Value <> Nothing Then RevCdfProb = item.<RevCdfProbability>.Value Else RevCdfProb = Double.NaN
                'If item.<Value>.Value <> Nothing Then Value = item.<Value>.Value Else Value = Double.NaN
                If item.<RandVarValue>.Value <> Nothing Then Value = item.<RandVarValue>.Value Else Value = Double.NaN
                If item.<ProbabilityDensity>.Value <> Nothing Then ProbDens = item.<ProbabilityDensity>.Value Else ProbDens = Double.NaN
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.5, "P50", 0.5, "", P50Value, P50PDF, Descr})
                'dgvPointAnnot.Rows.Add({item.<PDF>.Value, item.<PDFLn>.Value, item.<PMF>.Value, item.<PMFLn>.Value, item.<CDF>.Value, item.<RevCDF>.Value, item.<InvCDF>.Value, item.<InvRevCDF>.Value, item.<Type>.Value, item.<Parameter>.Value, item.<Label>.Value, CdfProb, RevCdfProb, Value, ProbDens, item.<Description>.Value})
                'dgvPointAnnot.Rows.Add({item.<Show>.Value, item.<PDF>.Value, item.<PDFLn>.Value, item.<PMF>.Value, item.<PMFLn>.Value, item.<CDF>.Value, item.<RevCDF>.Value, item.<InvCDF>.Value, item.<InvRevCDF>.Value, item.<Type>.Value, item.<Parameter>.Value, item.<Label>.Value, CdfProb, RevCdfProb, Value, ProbDens, item.<Description>.Value})
                'dgvPointAnnot.Rows.Add({item.<Show>.Value, item.<PDF>.Value, item.<PDFLn>.Value, item.<PMF>.Value, item.<PMFLn>.Value, item.<CDF>.Value, item.<RevCDF>.Value, item.<InvCDF>.Value, item.<InvRevCDF>.Value, item.<Type>.Value, item.<Parameter>.Value, item.<Label>.Value, CdfProb, RevCdfProb, Value, ProbDens, "MiddleRight", item.<Description>.Value})
                dgvPointAnnot.Rows.Add({item.<Show>.Value, item.<PDF>.Value, item.<PDFLn>.Value, item.<PMF>.Value, item.<PMFLn>.Value, item.<CDF>.Value, item.<RevCDF>.Value, item.<InvCDF>.Value, item.<InvRevCDF>.Value, item.<Type>.Value, item.<Parameter>.Value, item.<Label>.Value, CdfProb, RevCdfProb, Value, ProbDens, item.<Alignment>.Value, item.<Description>.Value})

                Select Case item.<Type>.Value
                    Case "Probability <="
                        'dgvPointAnnot.Rows(RowNo).Cells(0).ReadOnly = False 'PDF
                        'dgvPointAnnot.Rows(RowNo).Cells(0).Style.BackColor = Color.White
                        dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                        dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                        dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF
                        dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn
                        dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                        dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = True 'RevCDF (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF
                        dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = True 'InvRevCDF
                        dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability
                        dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                        dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = True 'Rev CDF Probability
                        dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.Gainsboro

                        'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "The random variable will be less than or equal to Value with the specified Probability"
                        dgvPointAnnot.Rows(RowNo).Cells(17).Value = "The random variable will be less than or equal to Value with the specified Probability"
                        dgvPointAnnot.AutoResizeRow(RowNo)

                        'AddProbLteAnnot(RowNo)
                        dgvPointAnnot.AutoResizeRow(RowNo)
                        'dgvPointAnnot.AutoResizeColumn(13) 'Value column
                        'dgvPointAnnot.AutoResizeColumn(14) 'Prob Density column
                        dgvPointAnnot.AutoResizeColumn(14) 'Value column
                        dgvPointAnnot.AutoResizeColumn(15) 'Prob Density column

                    Case "Probability >"
                        'dgvPointAnnot.Rows(RowNo).Cells(0).ReadOnly = False 'PDF
                        'dgvPointAnnot.Rows(RowNo).Cells(0).Style.BackColor = Color.White
                        dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                        dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                        dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = True 'CDF (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                        dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = True 'InvCDF (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                        dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                        dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                        dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = True 'CDF Probability (DeActivate)
                        dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.Gainsboro

                        dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                        dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                        'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "The random variable will be greater than Value with the specified Probability"
                        dgvPointAnnot.Rows(RowNo).Cells(17).Value = "The random variable will be greater than Value with the specified Probability"
                        dgvPointAnnot.AutoResizeRow(RowNo)

                        dgvPointAnnot.AutoResizeRow(RowNo)
                        dgvPointAnnot.AutoResizeColumn(14) 'Value column
                        dgvPointAnnot.AutoResizeColumn(15) 'Prob Density column


                    Case "Random Variable Value"


                    Case "Mean"


                    Case "Median"


                    Case "Mode"


                    Case "Standard Deviation"

                    Case "User Defined Value 1"
                        SetUserDef1(item.<Parameter>.Value)

                    Case "User Defined Value 2"
                        SetUserDef2(item.<Parameter>.Value)

                    Case Else

                End Select

                RowNo += 1
            Next
        End If

        dgvPointAnnot.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders

        dgvAreaAnnot.Rows.Clear()

        If IsNothing(myParent.AreaAnnotInfo) Then
            Main.Message.Add("AreaAnnotInfo is Nothing." & vbCrLf)
        Else
            'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Dim NAreas As Integer = SelDistribAreaAnnotInfo.Count
            'Main.Message.Add("The number of annotation areas: " & NAreas & vbCrLf)

            dgvAreaAnnot.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders)
            Dim RowNo As Integer = 0
            For Each item In SelDistribAreaAnnotInfo
                'dgvAreaAnnot.Rows.Add({item.<FromValueType>.Value, item.<FromValueParameter>.Value, item.<FromValue>.Value, item.<FromValueCDF>.Value, item.<ToValueType>.Value, item.<ToValueParameter>.Value, item.<ToValue>.Value, item.<ToValueCDF>.Value, item.<Probability>.Value, "", item.<Thickness>.Value, item.<Density>.Value})
                'dgvAreaAnnot.Rows.Add({item.<Show>.Value, item.<FromValueType>.Value, item.<FromValueParameter>.Value, item.<FromValue>.Value, item.<FromValueCDF>.Value, item.<ToValueType>.Value, item.<ToValueParameter>.Value, item.<ToValue>.Value, item.<ToValueCDF>.Value, item.<Probability>.Value, "", item.<Thickness>.Value, item.<Density>.Value})
                dgvAreaAnnot.Rows.Add({item.<Show>.Value, item.<FromValueType>.Value, item.<FromValueParameter>.Value, item.<FromValue>.Value, item.<FromValueCDF>.Value, item.<ToValueType>.Value, item.<ToValueParameter>.Value, item.<ToValue>.Value, item.<ToValueCDF>.Value, item.<Probability>.Value, "", item.<Thickness>.Value, item.<Density>.Value, item.<Intensity>.Value})
                'dgvAreaAnnot.Rows(RowNo).Cells(9).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.FromArgb(item.<Color>.Value)
                If item.<FromValueType>.Value = "User Defined Value 1" Then SetUserDef1(item.<FromValueParameter>.Value)
                If item.<FromValueType>.Value = "User Defined Value 2" Then SetUserDef2(item.<FromValueParameter>.Value)
                If item.<ToValueType>.Value = "User Defined Value 1" Then SetUserDef1(item.<ToValueParameter>.Value)
                If item.<ToValueType>.Value = "User Defined Value 2" Then SetUserDef2(item.<ToValueParameter>.Value)
                RowNo += 1
            Next
        End If
        dgvAreaAnnot.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders

        'Probability Annotation settings:
        chkDisplayProb.Checked = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value
        chkUseShadingColor.Checked = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value

        Dim myFontStyle As FontStyle = FontStyle.Regular
        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        Dim myFontSize As Single = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
        Dim myFontName As String = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value
        txtProbFont.Font = New Font(myFontName, myFontSize, myFontStyle)
        txtProbFont.Text = "Font"

        txtDefaultTextColor.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
        txtProbFormat.Text = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value

        'hsUserDef1.Minimum = 1
        'hsUserDef1.LargeChange = 10
        'hsUserDef1.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef1.LargeChange - 1
        'txtUserDef1.Text = Main.Distribution.ContSampling.Minimum
        'hsUserDef1.Value = 1
        'Main.Message.Add("ContSamples NSamples = " & Main.Distribution.ContSampling.NSamples & vbCrLf)


        'hsUserDef2.Minimum = 1
        'hsUserDef2.LargeChange = 10
        'hsUserDef2.Maximum = Main.Distribution.ContSampling.NSamples + hsUserDef2.LargeChange - 1
        'txtUserDef2.Text = Main.Distribution.ContSampling.Maximum
        'hsUserDef2.Value = Main.Distribution.ContSampling.NSamples

    End Sub

    Private Sub SetUserDef1(Value As Double)
        'Set User Defined Value 1 textbox and scrollbar to the specified value.

        Dim UserDef1Samp As Integer 'The nearest sample number to Value

        If Value < Main.Distribution.ContSampling.Minimum Then
            txtUserDef1.Text = Main.Distribution.ContSampling.Minimum
            hsUserDef1.Value = 1
        ElseIf Value > Main.Distribution.ContSampling.Maximum Then
            txtUserDef1.Text = Main.Distribution.ContSampling.Maximum
            hsUserDef1.Value = hsUserDef1.Maximum
        Else
            'UserDef1Samp = Int((Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) '+ 1
            UserDef1Samp = Math.Round((Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) '+ 1
            'Main.Message.Add("SampleNo: " & (Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval & "  Int(SampleNo): " & UserDef1Samp & vbCrLf)

            'Code added to fix error: UserDef1Samp = 0 but hsUserDef1.Minimum = 1 : Error!
            If UserDef1Samp = 0 Then UserDef1Samp = 1

            txtUserDef1.Text = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * UserDef1Samp
            hsUserDef1.Value = UserDef1Samp
        End If
    End Sub

    Private Sub SetUserDef2(Value As Double)
        'Set User Defined Value 2 textbox and scrollbar to the specified value.

        Dim UserDef2Samp As Integer 'The nearest sample number to Value

        If Value < Main.Distribution.ContSampling.Minimum Then
            txtUserDef2.Text = Main.Distribution.ContSampling.Minimum
            hsUserDef2.Value = 1
        ElseIf Value > Main.Distribution.ContSampling.Maximum Then
            txtUserDef2.Text = Main.Distribution.ContSampling.Maximum
            hsUserDef2.Value = hsUserDef2.Maximum
        Else
            'UserDef2Samp = Int((Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) '+ 1
            UserDef2Samp = Math.Round((Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval) '+ 1
            'Main.Message.Add("SampleNo: " & (Value - Main.Distribution.ContSampling.Minimum) / Main.Distribution.ContSampling.Interval & "  Int(SampleNo): " & UserDef2Samp & vbCrLf)
            txtUserDef2.Text = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * UserDef2Samp
            hsUserDef2.Value = UserDef2Samp
        End If
    End Sub

    Private Sub UpdateAnnotationDisplaySettings()
        'UPDATE THE DISPLAY SETTINGS:
        'txtPointProbFormat.Text = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<ProbabilityFormat>.Value
        'Update Show Line settings:
        dgvPointDisplay.Rows(0).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(1).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(2).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(3).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(4).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(5).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(6).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Show>.Value
        dgvPointDisplay.Rows(7).Cells(1).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Show>.Value

        'Update Line Color settings:
        dgvPointDisplay.Rows(0).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(1).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(2).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(3).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(4).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(5).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(6).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
        dgvPointDisplay.Rows(7).Cells(2).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)

        'Update Line Thickness settings:
        dgvPointDisplay.Rows(0).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(1).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(2).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(3).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(4).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(5).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(6).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value
        dgvPointDisplay.Rows(7).Cells(3).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value

        'Update Show Line settings:
        dgvPointDisplay.Rows(0).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(1).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(2).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(3).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(4).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(5).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(6).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value
        dgvPointDisplay.Rows(7).Cells(4).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value

        'Update Circle Color settings:
        dgvPointDisplay.Rows(0).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(1).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(2).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(3).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(4).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(5).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(6).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Color>.Value)
        dgvPointDisplay.Rows(7).Cells(5).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Color>.Value)

        'Update Circle Thickness settings:
        dgvPointDisplay.Rows(0).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(1).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(2).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(3).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(4).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(5).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(6).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Thickness>.Value
        dgvPointDisplay.Rows(7).Cells(6).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Thickness>.Value

        'Update Circle Size settings:
        dgvPointDisplay.Rows(0).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(1).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(2).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(3).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(4).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(5).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(6).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Size>.Value
        dgvPointDisplay.Rows(7).Cells(7).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Size>.Value

        'Update Show Text settings:
        dgvPointDisplay.Rows(0).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(1).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(2).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(3).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(4).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(5).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(6).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Show>.Value
        dgvPointDisplay.Rows(7).Cells(8).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Show>.Value

        'Update Text Font settings:
        Dim myFontStyle As FontStyle = FontStyle.Regular
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        Dim myFontSize As Single = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Size>.Value
        Dim myFontName As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(0).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(1).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(2).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(3).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(4).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(5).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(6).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Bold>.Value Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Italic>.Value Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Strikeout>.Value Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Underline>.Value Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<FontName>.Value
        dgvPointDisplay.Rows(7).Cells(9).Style.Font = New Font(myFontName, myFontSize, myFontStyle)

        'Update Text Color settings:
        dgvPointDisplay.Rows(0).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(1).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(2).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(3).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(4).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(5).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(6).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Color>.Value)
        dgvPointDisplay.Rows(7).Cells(10).Style.BackColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Color>.Value)

        'Update Text Show Probability Value settings:
        dgvPointDisplay.Rows(0).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(1).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(2).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(3).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(4).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(5).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(6).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value
        dgvPointDisplay.Rows(7).Cells(11).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value

        'Update Text Value Probability Format settings:
        dgvPointDisplay.Rows(0).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(1).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(2).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(3).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(4).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(5).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(6).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ProbFormat>.Value
        dgvPointDisplay.Rows(7).Cells(12).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ProbFormat>.Value

        'Update Text Show Random Variable Value settings:
        dgvPointDisplay.Rows(0).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(1).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(2).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(3).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(4).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(5).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(6).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value
        dgvPointDisplay.Rows(7).Cells(13).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value

        'Update Text Value Random Variable Format settings:
        dgvPointDisplay.Rows(0).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(1).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(2).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(3).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(4).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(5).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(6).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<RVFormat>.Value
        dgvPointDisplay.Rows(7).Cells(14).Value = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<RVFormat>.Value

    End Sub

    Private Sub btnDisplaySeriesXml_Click(sender As Object, e As EventArgs) Handles btnDisplaySeriesXml.Click
        Dim mySeriesInfo = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series>

        Dim RowNo As Integer = dgvSeries.SelectedCells(0).RowIndex
        Main.Message.AddXml(mySeriesInfo(RowNo).ToString)
    End Sub

    Private Sub btnNewChart_Click(sender As Object, e As EventArgs) Handles btnNewChart.Click
        'Create a new chart

        If DataSource Is Nothing Then
            Main.Message.AddWarning("No Data Source selected." & vbCrLf)
        Else
            'Get the new Chart Name and Description:
            Dim EntryForm As New ADVL_Utilities_Library_1.frmNewDataNameModal
            EntryForm.EntryName = "NewChart"
            EntryForm.Title = "New Chart"
            EntryForm.GetDataName = True
            EntryForm.GetDataDescription = True
            EntryForm.SettingsLocn = Main.Project.SettingsLocn
            EntryForm.DataLocn = Main.Project.DataLocn
            EntryForm.ApplicationName = Main.ApplicationInfo.Name
            Dim NewChartName As String
            If EntryForm.ShowDialog() = DialogResult.OK Then
                NewChartName = EntryForm.DataName

                If DataSource.ChartList.ContainsKey(NewChartName) Then
                    Dim Result As DialogResult = MessageBox.Show("Overwrite existing chart?", "Warning", MessageBoxButtons.YesNo)
                    If Result = DialogResult.No Then Exit Sub
                Else
                    'cmbChartList.Items.Add(NewChartName)
                End If

                txtSelChartName.Text = NewChartName
                txtSelChartDescr.Text = EntryForm.DataDescription
            Else
                Exit Sub
            End If

            'If DataSource.Data.Tables.Contains(TableName) Then
            If DataSource.Data.Tables.Contains(ContTableName) Then
                'If DataSource.Data.Tables(TableName).Columns.Count < 2 Then
                If DataSource.Data.Tables(ContTableName).Columns.Count < 2 Then
                    Main.Message.AddWarning("The data table does not contain enough columns to chart." & vbCrLf)
                Else
                    ChartName = NewChartName
                    'If rbPrimary.Checked Then 'Display the primary distribution only.
                    '    NewPrimaryChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked) 'Create a new chart with the specified curves displayed.
                    'ElseIf rbSecondary.Checked Then 'Display the secondary distributions.
                    '    NewSecondaryChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked) 'Create a new chart with the specified curves displayed.
                    'Else 'Display all distributions.
                    '    NewAllChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked) 'Create a new chart with the specified curves displayed.
                    'End If
                    'NewSecondaryChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked) 'Create a new chart with the specified curves displayed.
                    If rbColorDistrib.Checked Then
                        'NewChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked, "ColorByDistribution") 'Create a new chart with the specified curves displayed.
                        'NewChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkRevCdf.Checked, chkInvCdf.Checked, chkInvRevCdf.Checked, "ColorByDistribution") 'Create a new chart with the specified curves displayed.
                        NewChartInfo(chkPdf.Checked And chkPdf.Enabled, chkPdfLn.Checked And chkPdfLn.Enabled, chkPmf.Checked And chkPmf.Enabled, chkPmfLn.Checked And chkPmfLn.Enabled, chkCdf.Checked And chkCdf.Enabled, chkRevCdf.Checked And chkRevCdf.Enabled, chkInvCdf.Checked And chkInvCdf.Enabled, chkInvRevCdf.Checked And chkInvRevCdf.Enabled, "ColorByDistribution") 'Create a new chart with the specified curves displayed.
                    Else
                        'NewChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkInvCdf.Checked, "ColorByFunctionType") 'Create a new chart with the specified curves displayed.
                        'NewChartInfo(chkPdf.Checked, chkPdfLn.Checked, chkPmf.Checked, chkPmfLn.Checked, chkCdf.Checked, chkRevCdf.Checked, chkInvCdf.Checked, chkInvRevCdf.Checked, "ColorByFunctionType") 'Create a new chart with the specified curves displayed.
                        NewChartInfo(chkPdf.Checked And chkPdf.Enabled, chkPdfLn.Checked And chkPdfLn.Enabled, chkPmf.Checked And chkPmf.Enabled, chkPmfLn.Checked And chkPmfLn.Enabled, chkCdf.Checked And chkCdf.Enabled, chkRevCdf.Checked And chkRevCdf.Enabled, chkInvCdf.Checked And chkInvCdf.Enabled, chkInvRevCdf.Checked And chkInvRevCdf.Enabled, "ColorByFunctionType") 'Create a new chart with the specified curves displayed.
                    End If

                    'If cmbChartList.Items.Contains(NewChartName) Then
                    '    cmbChartList.SelectedIndex = cmbChartList.FindStringExact(NewChartName)
                    'Else
                    '    cmbChartList.Items.Add(NewChartName)
                    '    cmbChartList.SelectedIndex = cmbChartList.FindStringExact(NewChartName)
                    'End If

                    SaveChart()
                End If
            Else
                Main.Message.AddWarning("The data table is empty." & vbCrLf)
            End If
        End If
    End Sub

    Private Sub btnAddSeries_Click(sender As Object, e As EventArgs) Handles btnAddContSeries.Click
        'Add a new series to the chart.

        If ChartName = "" Then
            Main.Message.AddWarning("Please open a chart." & vbCrLf)
            Exit Sub
        End If

        Dim NRows As Integer = dgvSeries.Rows.Count

        Dim Area1 As String = cboArea.Items(0)

        Dim Field1 As String = cboXField.Items(0)
        Dim YFieldItems As Integer = cboYField.Items.Count
        Dim Field2 As String
        If NRows + 2 > YFieldItems Then 'There are more series rows than Fields.
            Field2 = cboYField.Items(YFieldItems - 1) 'Re-plot the last avaialble Field.
        Else
            Field2 = cboYField.Items(NRows) 'Plot the next available Field.
        End If
        Dim NewSeriesName As String = "Series" & NRows + 1
        'DataGridView1.Rows.Add(NewSeriesName, "Point", "ChartArea1", Field1, "Primary", "Auto", Field2, "Primary", "Auto", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0") 'Add a new Series row to the grid.
        'DataGridView1.Rows.Add(NewSeriesName, "Point", Area1, Field1, "Primary", "Auto", Field2, "Primary", "Auto", "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0") 'Add a new Series row to the grid.
        'dgvSeries.Rows.Add(NewSeriesName, "Point", Area1, Field1, "Primary", "Auto", Field2, "Primary", "Auto", NewSeriesName, "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0") 'Add a new Series row to the grid.
        dgvSeries.Rows.Add(NewSeriesName, "Continuous", "Point", Area1, Field1, "Primary", "Auto", Field2, "Primary", "Auto", NewSeriesName, "Yes", "", "", "1", "Circle", "5", "1", "", "1", "0") 'Add a new Series row to the grid.
        'dgvSeries.Rows(NRows).Cells(10).Style.BackColor = Color.Red 'Marker Color
        dgvSeries.Rows(NRows).Cells(12).Style.BackColor = Color.Red 'Marker Color
        'dgvSeries.Rows(NRows).Cells(11).Style.BackColor = Color.Black 'Border Color
        dgvSeries.Rows(NRows).Cells(13).Style.BackColor = Color.Black 'Border Color
        'dgvSeries.Rows(NRows).Cells(16).Style.BackColor = Color.Blue 'Line Color
        dgvSeries.Rows(NRows).Cells(18).Style.BackColor = Color.Blue 'Line Color
        'DataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
        'DataGridView1.AutoResizeColumns()

        myParent.Chart1.Series.Add(NewSeriesName) 'Add the new Series to the Chart.

        'Add the new ChartArea to the ChartInfo XDocument:
        Dim NewSeries As New XElement("Series")
        Dim seriesName As New XElement("Name", NewSeriesName)
        NewSeries.Add(seriesName)
        Dim seriesChartType As New XElement("ChartType", "Point")
        NewSeries.Add(seriesChartType)
        'Dim seriesChartArea As New XElement("ChartArea", "ChartArea1")
        Dim seriesChartArea As New XElement("ChartArea", Area1)
        NewSeries.Add(seriesChartArea)

        'CHECK THIS CODE:
        'Dim seriesLegend As New XElement("Legend", "Legend1")
        Dim seriesLegend As New XElement("Legend", Area1) 'The Legend name will be the same as the Area name
        NewSeries.Add(seriesLegend)

        Dim seriesAxisLabel As New XElement("AxisLabel", "")
        NewSeries.Add(seriesAxisLabel)
        Dim seriesXFieldName As New XElement("XFieldName", Field1)
        NewSeries.Add(seriesXFieldName)
        Dim seriesXAxisType As New XElement("XAxisType", "Primary")
        NewSeries.Add(seriesXAxisType)

        Dim seriesXValueType As New XElement("XValueType", "Auto")
        NewSeries.Add(seriesXValueType)

        Dim seriesYFieldName As New XElement("YFieldName", Field2)
        NewSeries.Add(seriesYFieldName)
        Dim seriesYAxisType As New XElement("YAxisType", "Primary")
        NewSeries.Add(seriesYAxisType)

        Dim seriesMarker As New XElement("Marker")
        Dim seriesMarkerBorderColor As New XElement("BorderColor", "-16777216")
        seriesMarker.Add(seriesMarkerBorderColor)
        Dim seriesMarkerBorderWidth As New XElement("BorderWidth", "1")
        seriesMarker.Add(seriesMarkerBorderWidth)
        Dim seriesMarkerFill As New XElement("Fill", "true")
        seriesMarker.Add(seriesMarkerFill)
        Dim seriesMarkerColor As New XElement("Color", "-65536")
        seriesMarker.Add(seriesMarkerColor)
        Dim seriesMarkerSize As New XElement("Size", "6")
        seriesMarker.Add(seriesMarkerSize)
        Dim seriesMarkerStep As New XElement("Step", "1")
        seriesMarker.Add(seriesMarkerStep)
        Dim seriesMarkerStyle As New XElement("Style", "Circle")
        seriesMarker.Add(seriesMarkerStyle)
        NewSeries.Add(seriesMarker)

        Dim seriesColor As New XElement("Color", "-16776961")
        NewSeries.Add(seriesColor)
        Dim seriesWidth As New XElement("Width", "1")
        NewSeries.Add(seriesWidth)
        Dim seriesToolTip As New XElement("ToolTip", "1")
        NewSeries.Add(seriesToolTip)

        myParent.SeriesInfo(NRows - 1).AddAfterSelf(NewSeries)

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab

    End Sub

    Private Sub btnDeleteSeries_Click(sender As Object, e As EventArgs) Handles btnDeleteSeries.Click
        'Delete the selected Series.
        Dim RowNo As Integer = dgvSeries.SelectedCells(0).RowIndex

        'myChart.Series.RemoveAt(RowNo)

        Dim SeriesName As String = dgvSeries.Rows(RowNo).Cells(0).Value
        Dim SeriesIndex As Integer = myParent.Chart1.Series.IndexOf(SeriesName)
        myParent.Chart1.Series.RemoveAt(SeriesIndex)

        myParent.SeriesInfo(RowNo).Remove()

        myParent.SeriesInfo = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series> 'Refresh SeriesInfo

        UpdateSeriesTabSettings()
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub ChartProperties()
        'This subroutine shows all the Chart Control properties.

        myParent.Chart1.BackColor = Color.White
        myParent.Chart1.BorderlineColor = Color.Black
        myParent.Chart1.SuppressExceptions = True

        Dim AnnotationsCount As Integer = myParent.Chart1.Annotations.Count

        Dim LegendsCount As Integer = myParent.Chart1.Legends.Count

        Dim TitlesCount As Integer = myParent.Chart1.Titles.Count
        myParent.Chart1.Titles(0).Name = "Title1"
        myParent.Chart1.Titles(0).Text = "Chart Title"
        myParent.Chart1.Titles(0).TextOrientation = DataVisualization.Charting.TextOrientation.Auto
        myParent.Chart1.Titles(0).Alignment = ContentAlignment.TopCenter
        myParent.Chart1.Titles(0).ForeColor = Color.Black
        myParent.Chart1.Titles(0).TextStyle = DataVisualization.Charting.TextStyle.Default
        myParent.Chart1.Titles(0).Font = New Font("Microsoft Sans Serif", 12, FontStyle.Regular)

        Dim SeriesCount As Integer = myParent.Chart1.Series.Count
        myParent.Chart1.Series(0).Name = "Series1"
        myParent.Chart1.Series(0).ChartType = DataVisualization.Charting.SeriesChartType.Point
        myParent.Chart1.Series(0).ChartArea = "ChartArea1"
        myParent.Chart1.Series(0).Legend = "Legend1"
        'myParent.Chart1.Series(0).LegendText = "Legend1"
        myParent.Chart1.Series(0).AxisLabel = "Axis Label 1"
        myParent.Chart1.Series(0).IsVisibleInLegend = True
        myParent.Chart1.Series(0).XAxisType = DataVisualization.Charting.AxisType.Primary
        myParent.Chart1.Series(0).XValueType = DataVisualization.Charting.ChartValueType.Single
        myParent.Chart1.Series(0).YAxisType = DataVisualization.Charting.AxisType.Primary
        myParent.Chart1.Series(0).YValueType = DataVisualization.Charting.ChartValueType.Single
        myParent.Chart1.Series(0).MarkerBorderColor = Color.Black
        myParent.Chart1.Series(0).MarkerBorderWidth = 1
        myParent.Chart1.Series(0).MarkerColor = Color.Transparent 'Use Transparent for No Fill
        myParent.Chart1.Series(0).MarkerColor = Color.Red
        myParent.Chart1.Series(0).MarkerSize = 6
        myParent.Chart1.Series(0).MarkerStep = 1
        myParent.Chart1.Series(0).MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
        myParent.Chart1.Series(0).Color = Color.Blue
        myParent.Chart1.Series(0).BorderWidth = 1
        myParent.Chart1.Series(0).ToolTip = ""

        Dim AreasCount As Integer = myParent.Chart1.ChartAreas.Count
        myParent.Chart1.ChartAreas(0).Name = "ChartArea1"
        myParent.Chart1.ChartAreas(0).AxisX.Title = "X Axis"
        myParent.Chart1.ChartAreas(0).AxisX.TitleAlignment = StringAlignment.Center
        myParent.Chart1.ChartAreas(0).AxisX.TitleForeColor = Color.Black
        myParent.Chart1.ChartAreas(0).AxisX.TitleFont = New Font("Microsoft Sans Serif", 12, FontStyle.Regular)
        myParent.Chart1.ChartAreas(0).AxisX.LabelStyle.Format = ""
        myParent.Chart1.ChartAreas(0).AxisX.Minimum = 0 'Set to NaN for Auto Minimum.
        myParent.Chart1.ChartAreas(0).AxisX.Maximum = 10 'Set to NaN for Auto Maximum
        myParent.Chart1.ChartAreas(0).AxisX.LineWidth = 1
        myParent.Chart1.ChartAreas(0).AxisX.IsLogarithmic = False
        myParent.Chart1.ChartAreas(0).AxisX.Interval = 1 'Interval of the Labels and Major tick marks. Set to 0 for Auto Interval.
        myParent.Chart1.ChartAreas(0).AxisX.IntervalType = DataVisualization.Charting.DateTimeIntervalType.Number  'Auto, NotSet, Number, Years, Months, Weeks, Days, Hours, Minutes, Seconds, Milliseconds 
        myParent.Chart1.ChartAreas(0).AxisX.IntervalOffset = 0 'Use the Zero value for the Auto Interval Offset.
        myParent.Chart1.ChartAreas(0).AxisX.Crossing = Single.NaN
        'myChart.ChartAreas(0).AxisX.MajorGrid.Interval = Single.NaN 'Set to NaN so that the Axis Interval property is used to determine the label interval. USE AXIS INTERVAL PROPERTY!

    End Sub

    Private Sub Label36_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub btnUpdateChart_Click(sender As Object, e As EventArgs) Handles btnUpdateChart.Click
        'Update the Chart display with the new Series settings:

        'Replot the chart:
        myParent.PlotChart() 'The replots the existing ChartIngo XML

    End Sub

    Private Sub DataGridView1_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dgvSeries.CellEndEdit
        'A cell in DataGridView1 has been edited.
        Dim RowNo As Integer = e.RowIndex
        UpdateSeries(RowNo)
    End Sub

    Private Sub UpdateSeries(ByVal RowNo As Integer)
        'Update the series settings using the DataGridView1 settings in row number RowNo.

        If RowNo = -1 Then Exit Sub

        'SeriesInfo(RowNo).<Name>.Value = DataGridView1.Rows(RowNo).Cells(0).Value
        'myChart.Series(RowNo).Name = DataGridView1.Rows(RowNo).Cells(0).Value 'ERROR: Series name already exists!

        If myParent.SeriesInfo(RowNo).<Name>.Value = dgvSeries.Rows(RowNo).Cells(0).Value Then
            'The series name has not been changed.
        Else
            If myParent.Chart1.Series.IndexOf(dgvSeries.Rows(RowNo).Cells(0).Value) = -1 Then
                myParent.SeriesInfo(RowNo).<Name>.Value = dgvSeries.Rows(RowNo).Cells(0).Value 'UPDATE 26/6/22
                'myParent.RefreshSeriesInfo() 'UPDATE 26/6/22
                myParent.Chart1.Series(RowNo).Name = dgvSeries.Rows(RowNo).Cells(0).Value
                'myParent.Chart1.Series(RowNo).LegendText = dgvSeries.Rows(RowNo).Cells(0).Value 'UPDATE 26/6/22
                myParent.Chart1.Series(RowNo).LegendText = dgvSeries.Rows(RowNo).Cells(10).Value 'UPDATE 26/6/22
            Else
                Main.Message.AddWarning("The series name " & dgvSeries.Rows(RowNo).Cells(0).Value & " is already in use." & vbCrLf)
            End If
        End If

        'myParent.SeriesInfo(RowNo).<ChartType>.Value = dgvSeries.Rows(RowNo).Cells(1).Value
        myParent.SeriesInfo(RowNo).<ChartType>.Value = dgvSeries.Rows(RowNo).Cells(2).Value
        'Select Case dgvSeries.Rows(RowNo).Cells(1).Value
        Select Case dgvSeries.Rows(RowNo).Cells(2).Value
            Case "Line"
                myParent.Chart1.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Line
            Case "Point"
                myParent.Chart1.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Point
            Case "Bar"
                myParent.Chart1.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Bar
            Case "Column"
                myParent.Chart1.Series(RowNo).ChartType = DataVisualization.Charting.SeriesChartType.Column
        End Select
        'myParent.Chart1.Series(RowNo).ChartArea = dgvSeries.Rows(RowNo).Cells(2).Value
        myParent.Chart1.Series(RowNo).ChartArea = dgvSeries.Rows(RowNo).Cells(3).Value
        'myParent.SeriesInfo(RowNo).<ChartArea>.Value = dgvSeries.Rows(RowNo).Cells(2).Value
        myParent.SeriesInfo(RowNo).<ChartArea>.Value = dgvSeries.Rows(RowNo).Cells(3).Value

        'Update the Legend - The Legend name should be the same as the Area name:
        'myParent.Chart1.Series(RowNo).Legend = dgvSeries.Rows(RowNo).Cells(2).Value
        'myParent.Chart1.Series(RowNo).Legend = dgvSeries.Rows(RowNo).Cells(10).Value 'There is now a separate Legent Text value
        myParent.Chart1.Series(RowNo).Legend = dgvSeries.Rows(RowNo).Cells(3).Value 'The Legend name is the same as the Area name
        'myParent.SeriesInfo(RowNo).<Legend>.Value = dgvSeries.Rows(RowNo).Cells(2).Value
        'myParent.SeriesInfo(RowNo).<Legend>.Value = dgvSeries.Rows(RowNo).Cells(10).Value
        myParent.SeriesInfo(RowNo).<Legend>.Value = dgvSeries.Rows(RowNo).Cells(3).Value


        'If myParent.SeriesInfo(RowNo).<XFieldName>.Value = dgvSeries.Rows(RowNo).Cells(3).Value Then
        If myParent.SeriesInfo(RowNo).<XFieldName>.Value = dgvSeries.Rows(RowNo).Cells(4).Value Then
            'The X Field Name has not been changed.
        Else
            'Dim FieldName As String = dgvSeries.Rows(RowNo).Cells(3).Value
            Dim FieldName As String = dgvSeries.Rows(RowNo).Cells(4).Value
            myParent.SeriesInfo(RowNo).<XFieldName>.Value = FieldName
            'Update XMin and XMax:
            Dim AreaName As String = myParent.SeriesInfo(RowNo).<ChartArea>.Value
            For Each item In myParent.AreaInfo
                If item.<Name>.Value = AreaName Then
                    'Dim Min As Single = DataSource.Data.Tables(TableName).Compute("Min(" & FieldName & ")", "")
                    Dim Min As Single = DataSource.Data.Tables(ContTableName).Compute("Min(" & FieldName & ")", "")
                    If Single.IsInfinity(Min) Then 'This is usually due to an infinity value in the Inverse CDF data.
                        'Min = DataSource.Data.Tables(TableName).Rows(1).Item(FieldName) 'Take the next value, which should be a valid data minimum.
                        Min = DataSource.Data.Tables(ContTableName).Rows(1).Item(FieldName) 'Take the next value, which should be a valid data minimum.
                        'DataSource.Data.Tables(TableName).Rows(0).Item(FieldName) = DBNull.Value
                        DataSource.Data.Tables(ContTableName).Rows(0).Item(FieldName) = DBNull.Value
                    End If

                    'Dim Max As Single = DataSource.Data.Tables(TableName).Compute("Max(" & FieldName & ")", "")
                    Dim Max As Single = DataSource.Data.Tables(ContTableName).Compute("Max(" & FieldName & ")", "")
                    If Single.IsInfinity(Max) Then 'This is usually due to an infinity value in the Inverse CDF data.
                        'Max = DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 2).Item(FieldName) 'Take the next value, which should be a valid data maximum.
                        Max = DataSource.Data.Tables(ContTableName).Rows(DataSource.Data.Tables(ContTableName).Rows.Count - 2).Item(FieldName) 'Take the next value, which should be a valid data maximum.
                        'DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 1).Item(FieldName) = DBNull.Value
                        DataSource.Data.Tables(ContTableName).Rows(DataSource.Data.Tables(ContTableName).Rows.Count - 1).Item(FieldName) = DBNull.Value
                    End If

                    Dim NIntervals As Integer = 5
                    Dim RawInterval As Double = (Max - Min) / NIntervals 'First calculate the Raw Interval
                    Dim PrefInterval As Double = PreferredInterval(RawInterval)
                    Dim PrefMin As Double = Math.Floor(Min / PrefInterval) * PrefInterval
                    Dim PrefMax As Double = Math.Ceiling(Max / PrefInterval) * PrefInterval

                    item.<AxisX>.<Minimum>.Value = PrefMin
                    myParent.Chart1.ChartAreas(AreaName).AxisX.Minimum = PrefMin

                    item.<AxisX>.<Maximum>.Value = PrefMax
                    myParent.Chart1.ChartAreas(AreaName).AxisX.Maximum = PrefMax
                    item.<AxisX>.<Interval>.Value = PrefInterval
                    item.<AxisX>.<AutoInterval>.Value = "false"
                    myParent.Chart1.ChartAreas(AreaName).AxisX.Interval = PrefInterval
                    'NOTE: The titles are now left unchanged:
                    'item.<AxisX>.<Title>.<Text>.Value = FieldName
                    'myChart.ChartAreas(AreaName).AxisX.Title = FieldName
                    Exit For
                End If
            Next
        End If

        'myParent.SeriesInfo(RowNo).<XAxisType>.Value = dgvSeries.Rows(RowNo).Cells(4).Value
        myParent.SeriesInfo(RowNo).<XAxisType>.Value = dgvSeries.Rows(RowNo).Cells(5).Value
        'If dgvSeries.Rows(RowNo).Cells(4).Value = "Primary" Then
        'If dgvSeries.Rows(RowNo).Cells(5).Value = "Primary" Then
        'If dgvSeries.Rows(RowNo).Cells(5).Value = "X1" Then
        If dgvSeries.Rows(RowNo).Cells(5).Value = "Primary" Then
            myParent.Chart1.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Primary
            'ElseIf dgvSeries.Rows(RowNo).Cells(4).Value = "Secondary" Then
            'ElseIf dgvSeries.Rows(RowNo).Cells(5).Value = "Secondary" Then
            'ElseIf dgvSeries.Rows(RowNo).Cells(5).Value = "X2" Then
        ElseIf dgvSeries.Rows(RowNo).Cells(5).Value = "Secondary" Then
            myParent.Chart1.Series(RowNo).XAxisType = DataVisualization.Charting.AxisType.Secondary
        Else
            'Main.Message.AddWarning("Unknown X Axis type specified: " & dgvSeries.Rows(RowNo).Cells(4).Value & vbCrLf)
            Main.Message.AddWarning("Unknown X Axis type specified: " & dgvSeries.Rows(RowNo).Cells(5).Value & vbCrLf)
        End If

        'myParent.SeriesInfo(RowNo).<XValueType>.Value = dgvSeries.Rows(RowNo).Cells(5).Value
        myParent.SeriesInfo(RowNo).<XValueType>.Value = dgvSeries.Rows(RowNo).Cells(6).Value

        'If dgvSeries.Rows(RowNo).Cells(5).Value <> Nothing Then myParent.Chart1.Series(RowNo).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), dgvSeries.Rows(RowNo).Cells(5).Value)
        If dgvSeries.Rows(RowNo).Cells(6).Value <> Nothing Then myParent.Chart1.Series(RowNo).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), dgvSeries.Rows(RowNo).Cells(6).Value)

        'If myParent.SeriesInfo(RowNo).<YFieldName>.Value = dgvSeries.Rows(RowNo).Cells(6).Value Then
        If myParent.SeriesInfo(RowNo).<YFieldName>.Value = dgvSeries.Rows(RowNo).Cells(7).Value Then
            'The Y Field Name has not been changed.
        Else
            'Dim FieldName As String = dgvSeries.Rows(RowNo).Cells(6).Value
            Dim FieldName As String = dgvSeries.Rows(RowNo).Cells(7).Value
            myParent.SeriesInfo(RowNo).<YFieldName>.Value = FieldName
            'Update XMin and XMax:
            Dim AreaName As String = myParent.SeriesInfo(RowNo).<ChartArea>.Value
            For Each item In myParent.AreaInfo
                If item.<Name>.Value = AreaName Then
                    'Dim Min As Single = DataSource.Data.Tables(TableName).Compute("Min(" & FieldName & ")", "")
                    Dim Min As Single = DataSource.Data.Tables(ContTableName).Compute("Min(" & FieldName & ")", "")
                    If Single.IsInfinity(Min) Then 'This is usually due to an infinity value in the Inverse CDF data.
                        'Min = DataSource.Data.Tables(TableName).Rows(1).Item(FieldName) 'Take the next value, which should be a valid data minimum.
                        Min = DataSource.Data.Tables(ContTableName).Rows(1).Item(FieldName) 'Take the next value, which should be a valid data minimum.
                        'DataSource.Data.Tables(TableName).Rows(0).Item(FieldName) = DBNull.Value
                        DataSource.Data.Tables(ContTableName).Rows(0).Item(FieldName) = DBNull.Value
                    End If

                    'Dim Max As Single = DataSource.Data.Tables(TableName).Compute("Max(" & FieldName & ")", "")
                    Dim Max As Single = DataSource.Data.Tables(ContTableName).Compute("Max(" & FieldName & ")", "")
                    If Single.IsInfinity(Max) Then 'This is usually due to an infinity value in the Inverse CDF data.
                        'Max = DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 2).Item(FieldName) 'Take the next value, which should be a valid data maximum.
                        Max = DataSource.Data.Tables(ContTableName).Rows(DataSource.Data.Tables(ContTableName).Rows.Count - 2).Item(FieldName) 'Take the next value, which should be a valid data maximum.
                        'DataSource.Data.Tables(TableName).Rows(DataSource.Data.Tables(TableName).Rows.Count - 1).Item(FieldName) = DBNull.Value
                        DataSource.Data.Tables(ContTableName).Rows(DataSource.Data.Tables(ContTableName).Rows.Count - 1).Item(FieldName) = DBNull.Value
                    End If

                    Dim NIntervals As Integer = 5
                    Dim RawInterval As Double = (Max - Min) / NIntervals 'First calculate the Raw Interval
                    Dim PrefInterval As Double = PreferredInterval(RawInterval)
                    Dim PrefMin As Double = Math.Floor(Min / PrefInterval) * PrefInterval
                    Dim PrefMax As Double = Math.Ceiling(Max / PrefInterval) * PrefInterval

                    item.<AxisY>.<Minimum>.Value = PrefMin
                    myParent.Chart1.ChartAreas(AreaName).AxisY.Minimum = PrefMin
                    item.<AxisY>.<Maximum>.Value = PrefMax
                    myParent.Chart1.ChartAreas(AreaName).AxisY.Maximum = PrefMax
                    item.<AxisY>.<Interval>.Value = PrefInterval
                    item.<AxisY>.<AutoInterval>.Value = "false"
                    myParent.Chart1.ChartAreas(AreaName).AxisY.Interval = PrefInterval
                    'NOTE: The axis titles are noe left unchanged.
                    'item.<AxisY>.<Title>.<Text>.Value = FieldName
                    'myChart.ChartAreas(AreaName).AxisY.Title = FieldName
                    Exit For
                End If
            Next
        End If

        'myParent.SeriesInfo(RowNo).<YAxisType>.Value = dgvSeries.Rows(RowNo).Cells(7).Value
        myParent.SeriesInfo(RowNo).<YAxisType>.Value = dgvSeries.Rows(RowNo).Cells(8).Value
        'If dgvSeries.Rows(RowNo).Cells(7).Value = "Primary" Then
        'If dgvSeries.Rows(RowNo).Cells(8).Value = "Primary" Then
        'If dgvSeries.Rows(RowNo).Cells(8).Value = "Y1" Then
        If dgvSeries.Rows(RowNo).Cells(8).Value = "Primary" Then
            myParent.Chart1.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Primary
            'ElseIf dgvSeries.Rows(RowNo).Cells(7).Value = "Secondary" Then
            'ElseIf dgvSeries.Rows(RowNo).Cells(8).Value = "Secondary" Then
            'ElseIf dgvSeries.Rows(RowNo).Cells(8).Value = "Y2" Then
        ElseIf dgvSeries.Rows(RowNo).Cells(8).Value = "Secondary" Then
            myParent.Chart1.Series(RowNo).YAxisType = DataVisualization.Charting.AxisType.Secondary
        Else
            'Main.Message.AddWarning("Unknown Y Axis type specified: " & dgvSeries.Rows(RowNo).Cells(7).Value & vbCrLf)
            Main.Message.AddWarning("Unknown Y Axis type specified: " & dgvSeries.Rows(RowNo).Cells(8).Value & vbCrLf)
        End If

        'myParent.SeriesInfo(RowNo).<YValueType>.Value = dgvSeries.Rows(RowNo).Cells(8).Value
        myParent.SeriesInfo(RowNo).<YValueType>.Value = dgvSeries.Rows(RowNo).Cells(9).Value

        'If dgvSeries.Rows(RowNo).Cells(8).Value <> Nothing Then myParent.Chart1.Series(RowNo).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), dgvSeries.Rows(RowNo).Cells(8).Value)
        If dgvSeries.Rows(RowNo).Cells(9).Value <> Nothing Then myParent.Chart1.Series(RowNo).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), dgvSeries.Rows(RowNo).Cells(9).Value)

        myParent.Chart1.ChartAreas(0).AxisY.IntervalAutoMode = DataVisualization.Charting.IntervalAutoMode.VariableCount 'ADDED 23Jul20

        'UPDATE 26/6/22:
        'myParent.SeriesInfo(RowNo).<LegendText>.Value = dgvSeries.Rows(RowNo).Cells(9).Value
        myParent.SeriesInfo(RowNo).<LegendText>.Value = dgvSeries.Rows(RowNo).Cells(10).Value


        'myParent.SeriesInfo(RowNo).<Marker>.<Fill>.Value = DataGridView1.Rows(RowNo).Cells(9).Value
        'myParent.SeriesInfo(RowNo).<Marker>.<Fill>.Value = dgvSeries.Rows(RowNo).Cells(10).Value
        myParent.SeriesInfo(RowNo).<Marker>.<Fill>.Value = dgvSeries.Rows(RowNo).Cells(11).Value
        'myParent.SeriesInfo(RowNo).<Marker>.<Color>.Value = dgvSeries.Rows(RowNo).Cells(11).Style.BackColor.ToArgb.ToString
        myParent.SeriesInfo(RowNo).<Marker>.<Color>.Value = dgvSeries.Rows(RowNo).Cells(12).Style.BackColor.ToArgb.ToString
        'If DataGridView1.Rows(RowNo).Cells(9).Value = True Then
        'If dgvSeries.Rows(RowNo).Cells(9).Value = "Yes" Then
        If dgvSeries.Rows(RowNo).Cells(11).Value = "Yes" Then
            'myParent.Chart1.Series(RowNo).MarkerColor = dgvSeries.Rows(RowNo).Cells(11).Style.BackColor
            myParent.Chart1.Series(RowNo).MarkerColor = dgvSeries.Rows(RowNo).Cells(12).Style.BackColor
        Else
            myParent.Chart1.Series(RowNo).MarkerColor = Color.Transparent
        End If

        'myParent.SeriesInfo(RowNo).<Marker>.<BorderColor>.Value = dgvSeries.Rows(RowNo).Cells(12).Style.BackColor.ToArgb.ToString
        myParent.SeriesInfo(RowNo).<Marker>.<BorderColor>.Value = dgvSeries.Rows(RowNo).Cells(13).Style.BackColor.ToArgb.ToString
        'myParent.Chart1.Series(RowNo).MarkerBorderColor = dgvSeries.Rows(RowNo).Cells(12).Style.BackColor
        myParent.Chart1.Series(RowNo).MarkerBorderColor = dgvSeries.Rows(RowNo).Cells(13).Style.BackColor

        'myParent.SeriesInfo(RowNo).<Marker>.<BorderWidth>.Value = dgvSeries.Rows(RowNo).Cells(13).Value
        myParent.SeriesInfo(RowNo).<Marker>.<BorderWidth>.Value = dgvSeries.Rows(RowNo).Cells(14).Value
        'myParent.Chart1.Series(RowNo).MarkerBorderWidth = dgvSeries.Rows(RowNo).Cells(13).Value
        myParent.Chart1.Series(RowNo).MarkerBorderWidth = dgvSeries.Rows(RowNo).Cells(14).Value

        'myParent.SeriesInfo(RowNo).<Marker>.<Style>.Value = dgvSeries.Rows(RowNo).Cells(14).Value
        myParent.SeriesInfo(RowNo).<Marker>.<Style>.Value = dgvSeries.Rows(RowNo).Cells(15).Value
        'If dgvSeries.Rows(RowNo).Cells(14).Value <> Nothing Then myParent.Chart1.Series(RowNo).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), dgvSeries.Rows(RowNo).Cells(14).Value)
        If dgvSeries.Rows(RowNo).Cells(15).Value <> Nothing Then myParent.Chart1.Series(RowNo).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), dgvSeries.Rows(RowNo).Cells(15).Value)

        'myParent.SeriesInfo(RowNo).<Marker>.<Size>.Value = dgvSeries.Rows(RowNo).Cells(15).Value
        myParent.SeriesInfo(RowNo).<Marker>.<Size>.Value = dgvSeries.Rows(RowNo).Cells(16).Value
        'myParent.Chart1.Series(RowNo).MarkerSize = dgvSeries.Rows(RowNo).Cells(15).Value
        myParent.Chart1.Series(RowNo).MarkerSize = dgvSeries.Rows(RowNo).Cells(16).Value

        'myParent.SeriesInfo(RowNo).<Marker>.<Step>.Value = dgvSeries.Rows(RowNo).Cells(16).Value
        myParent.SeriesInfo(RowNo).<Marker>.<Step>.Value = dgvSeries.Rows(RowNo).Cells(17).Value
        'myParent.Chart1.Series(RowNo).MarkerStep = dgvSeries.Rows(RowNo).Cells(16).Value
        myParent.Chart1.Series(RowNo).MarkerStep = dgvSeries.Rows(RowNo).Cells(17).Value

        'myParent.SeriesInfo(RowNo).<Color>.Value = dgvSeries.Rows(RowNo).Cells(17).Style.BackColor.ToArgb.ToString
        myParent.SeriesInfo(RowNo).<Color>.Value = dgvSeries.Rows(RowNo).Cells(18).Style.BackColor.ToArgb.ToString
        'myParent.Chart1.Series(RowNo).Color = dgvSeries.Rows(RowNo).Cells(17).Style.BackColor
        myParent.Chart1.Series(RowNo).Color = dgvSeries.Rows(RowNo).Cells(18).Style.BackColor

        'myParent.SeriesInfo(RowNo).<Width>.Value = dgvSeries.Rows(RowNo).Cells(18).Value
        myParent.SeriesInfo(RowNo).<Width>.Value = dgvSeries.Rows(RowNo).Cells(19).Value
        'myParent.Chart1.Series(RowNo).BorderWidth = dgvSeries.Rows(RowNo).Cells(18).Value
        myParent.Chart1.Series(RowNo).BorderWidth = dgvSeries.Rows(RowNo).Cells(19).Value

        'myParent.SeriesInfo(RowNo).<ToolTip>.Value = dgvSeries.Rows(RowNo).Cells(19).Value
        myParent.SeriesInfo(RowNo).<ToolTip>.Value = dgvSeries.Rows(RowNo).Cells(20).Value
        'myParent.Chart1.Series(RowNo).ToolTip = dgvSeries.Rows(RowNo).Cells(19).Value
        myParent.Chart1.Series(RowNo).ToolTip = dgvSeries.Rows(RowNo).Cells(20).Value

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub txtChartTitle_TextChanged(sender As Object, e As EventArgs) Handles txtChartTitle.TextChanged

    End Sub

    Private Sub chkRoundXAxisValues_CheckedChanged(sender As Object, e As EventArgs) Handles chkRoundXAxisValues.CheckedChanged

        If myParent.AreaInfo(AreaNo).<AxisX>.<RoundAxisValues>.Value = Nothing Then
            Dim roundAxisValues As New XElement("RoundAxisValues", chkRoundXAxisValues.Checked)
            myParent.AreaInfo(AreaNo).Element("AxisX").Add(roundAxisValues)
        Else
            myParent.AreaInfo(AreaNo).<AxisX>.<RoundAxisValues>.Value = chkRoundXAxisValues.Checked
        End If
    End Sub

    Private Sub txtAreaRecordNo_TextChanged(sender As Object, e As EventArgs) Handles txtAreaRecordNo.TextChanged

    End Sub

    Private Sub cmbChartList_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbChartList.SelectedIndexChanged
        'The selected Chart in the Browse Chart List has been changed.
        'Display the chart description.

        Dim BrowseChart As String
        If cmbChartList.SelectedIndex = -1 Then
            BrowseChart = ""
            Exit Sub
        Else
            BrowseChart = cmbChartList.SelectedItem.ToString
        End If

        'OpenChart(BrowseChart)
        ChartName = BrowseChart 'This will also open the chart.

        If DataSource Is Nothing Then
            Main.Message.AddWarning("Unknown data source" & vbCrLf)
        Else
            If DataSource.ChartList.ContainsKey(BrowseChart) Then
                'txtChartDescr.Text = DataSource.ChartList(BrowseChart).<ChartSettings>.<Description>.Value 'Late binding not supported!
                Dim ChartXml As System.Xml.Linq.XDocument
                'ChartXml = DataSource.ChartList(ChartName)
                ChartXml = DataSource.ChartList(BrowseChart)
                txtChartDescr.Text = ChartXml.<ChartSettings>.<Description>.Value
            Else
                txtChartDescr.Text = ""
                Main.Message.AddWarning("The Chart: " & BrowseChart & " was not found in the Chart list." & vbCrLf)
            End If
        End If
    End Sub

    'NOTE: There is an issue when an attempt is made ot open a new ChartName before it has been added to the cmbChartList! - Instead just set the ChartName property to open the chart - then add the chart name to cmbChartList.
    'Public Sub OpenChart(ChartName As String)

    '    cmbChartList.SelectedIndex = cmbChartList.FindStringExact(ChartName)

    '    If cmbChartList.SelectedIndex = -1 Then
    '        Main.Message.AddWarning("Please select a chart from the list." & vbCrLf)
    '    Else
    '        ChartName = cmbChartList.SelectedItem.ToString
    '        'SelectChart(ChartName)
    '    End If

    'End Sub

    Private Sub txtTitlesRecordNo_TextChanged(sender As Object, e As EventArgs) Handles txtTitlesRecordNo.TextChanged

    End Sub

    Private Sub txtXAxisTitle_TextChanged(sender As Object, e As EventArgs) Handles txtXAxisTitle.TextChanged

    End Sub

    Private Sub txtYAxisTitle_TextChanged(sender As Object, e As EventArgs) Handles txtYAxisTitle.TextChanged

    End Sub

    Private Sub txtX2AxisTitle_TextChanged(sender As Object, e As EventArgs) Handles txtX2AxisTitle.TextChanged

    End Sub

    Private Sub txtSelChartName_TextChanged(sender As Object, e As EventArgs) Handles txtSelChartName.TextChanged

    End Sub

    Private Sub DataGridView1_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvSeries.CellContentClick

    End Sub

    Private Sub btnApplySize_Click(sender As Object, e As EventArgs) Handles btnApplySize.Click
        'Apply the Chart form Height and Width settings.

        Dim Height As Integer = Int(txtHeight.Text)
        Dim Width As Integer = Int(txtWidth.Text)
        Dim Top As Integer = Int(txtTop.Text)
        Dim Left As Integer = Int(txtLeft.Text)

        If Height < 200 Then Height = 200 '200 pixels minimum height
        If Width < 200 Then Width = 200 '200 pixels minimum width

        myParent.Height = Height
        myParent.Width = Width
        myParent.Top = Top
        myParent.Left = Left
    End Sub

    'Public Sub AutoApplyChartSize()
    '    'Apply the Chart for height And width settings if chkAuto
    '    If chkAutoApplySize.Checked Then

    '    End If
    'End Sub

    Private Sub txtXAxisAnnotInt_TextChanged(sender As Object, e As EventArgs) Handles txtXAxisAnnotInt.TextChanged

    End Sub

    Private Sub txtXAxisIntervalOffset_TextChanged(sender As Object, e As EventArgs) Handles txtXAxisIntervalOffset.TextChanged

    End Sub

    Private Sub DataGridView1_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles dgvSeries.CellEnter

    End Sub

    Private Sub btnRefresh_Click(sender As Object, e As EventArgs) Handles btnRefresh.Click
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
    End Sub

    Private Sub txtSelChartDescr_TextChanged(sender As Object, e As EventArgs) Handles txtSelChartDescr.TextChanged

    End Sub

    Private Sub txtSelChartDescr_LostFocus(sender As Object, e As EventArgs) Handles txtSelChartDescr.LostFocus
        'Update the Chart Description.
        If myParent.ChartInfo.<ChartSettings>.<Description>.Value <> Nothing Then myParent.ChartInfo.<ChartSettings>.<Description>.Value = txtSelChartDescr.Text.Trim
    End Sub

    Private Sub txtXAxisMin_TextChanged(sender As Object, e As EventArgs) Handles txtXAxisMin.TextChanged

    End Sub

    Private Sub chkCdf_CheckedChanged(sender As Object, e As EventArgs) Handles chkCdf.CheckedChanged

    End Sub

    Private Sub chkPdfLn_CheckedChanged(sender As Object, e As EventArgs) Handles chkPdfLn.CheckedChanged

    End Sub

    Private Sub chkPdf_CheckedChanged(sender As Object, e As EventArgs) Handles chkPdf.CheckedChanged

    End Sub

    Private Sub chkPmf_CheckedChanged(sender As Object, e As EventArgs) Handles chkPmf.CheckedChanged

    End Sub

    Private Sub dgvPointAnnot_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointAnnot.CellContentClick
        'Process any changes to the checkboxes.
        'To make the changes immediate, the EndEditMode() method is required.
        'For more info: http://www.codingeverything.com/2013/01/firing-datagridview-cellvaluechanged.html

        Dim RowNo As Integer = e.RowIndex
        Dim RowCount As Integer = dgvPointAnnot.RowCount
        If RowNo = RowCount - 1 Then
            'This is the last user-add row - not yet editable!
        Else
            Dim ColNo As Integer = e.ColumnIndex
            Dim DistrbNo As Integer = SelDistrib
            Dim AnnotNo As Integer = RowNo
            'UPDATE: <DistribAnnotNo> no longer used. THis will always the the same as the <PointAnnotation> index
            'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
            Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Select Case ColNo
                Case 0 'Show
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<Show>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<Show>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<Show>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<Show>.Value = "true"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                    'Case 0 'PDF
                Case 1 'PDF
                    'See .CellEndEdit
                Case 2 'PDFLn
                    'See .CellEndEdit

            End Select
        End If
    End Sub

    Private Sub EndEditMode(sender As System.Object, e As EventArgs) Handles dgvPointAnnot.CurrentCellDirtyStateChanged
        'This method is used to make changes to the checkboxes immediate - CellContentClick event triggered.
        'For more info: http://www.codingeverything.com/2013/01/firing-datagridview-cellvaluechanged.html
        If dgvPointAnnot.IsCurrentCellDirty Then
            dgvPointAnnot.CommitEdit(DataGridViewDataErrorContexts.Commit)
        End If
    End Sub

    Private Sub dgvPointAnnot_Click(sender As Object, e As EventArgs) Handles dgvPointAnnot.Click

    End Sub

    Private Sub dgvPointAnnot_EditingControlShowing(sender As Object, e As DataGridViewEditingControlShowingEventArgs) Handles dgvPointAnnot.EditingControlShowing

        If dgvPointAnnot.CurrentCell.ColumnIndex = 9 Then 'Annotation Type selected
            Dim combo As ComboBox = CType(e.Control, ComboBox)
            If (combo IsNot Nothing) Then
                combo.Name = "cboAnnotType"
                'Remove current handler:
                RemoveHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf ComboBox_SelectionChangeCommitted)
                'Add the event handler:
                AddHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf ComboBox_SelectionChangeCommitted)
            End If
        ElseIf dgvPointAnnot.CurrentCell.ColumnIndex = 16 Then 'Alignment selected
            Dim combo As ComboBox = CType(e.Control, ComboBox)
            If (combo IsNot Nothing) Then
                combo.Name = "cboAlignment"
                'Remove current handler:
                RemoveHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf ComboBox_SelectionChangeCommitted)
                'Add the event handler:
                AddHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf ComboBox_SelectionChangeCommitted)
            End If
        End If
    End Sub

    Private Sub ComboBox_SelectionChangeCommitted(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim combo As ComboBox = CType(sender, ComboBox)

        If combo.Name = "cboAnnotType" Then
            Dim RowNo As Integer = dgvPointAnnot.SelectedCells(0).RowIndex
            Select Case combo.SelectedItem.ToString
                Case "Probability <="
                    AddProbLteAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White


                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = True 'RevCDF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = True 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = True 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.Gainsboro

                    'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "The random variable will be less than or equal to Value with the specified Probability"
                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "The random variable will be less than or equal to Value with the specified Probability"
                    dgvPointAnnot.AutoResizeRow(RowNo)

                    dgvPointAnnot.AutoResizeRow(RowNo)
                    dgvPointAnnot.AutoResizeColumn(14) 'Value column
                    dgvPointAnnot.AutoResizeColumn(15) 'Prob Density column
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Probability >"
                    AddProbGtAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = True 'CDF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = True 'InvCDF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = True 'CDF Probability (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "The random variable will be greater than Value with the specified Probability"
                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "The random variable will be greater than Value with the specified Probability"
                    dgvPointAnnot.AutoResizeRow(RowNo)

                    dgvPointAnnot.AutoResizeRow(RowNo)
                    dgvPointAnnot.AutoResizeColumn(14) 'Value column
                    dgvPointAnnot.AutoResizeColumn(15) 'Prob Density column
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Random Variable Value"
                    AddValueAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "Calculate the distribution functions at the specified Random Variable Value"
                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the specified Random Variable Value"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Mean"
                    AddMeanAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    'dgvPointAnnot.Rows(RowNo).Cells(16).Value = "Calculate the distribution functions at the Mean Value"
                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the Mean Value"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Median"
                    AddMedianAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the Median Value"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Mode"
                    AddModeAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the Mode Value"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "Standard Deviation"
                    AddStdDevAnnot(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the specified standard deviation Value"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'AddStdDevAnnot(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "User Defined Value 1"
                    AddUserDefVal1(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the specified User Defined Value 1"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case "User Defined Value 2"
                    AddUserDefVal2(RowNo)

                    dgvPointAnnot.Rows(RowNo).Cells(1).ReadOnly = False 'PDF
                    dgvPointAnnot.Rows(RowNo).Cells(1).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(2).ReadOnly = False 'PDFLn
                    dgvPointAnnot.Rows(RowNo).Cells(2).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(3).ReadOnly = True 'PMF (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(3).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(4).ReadOnly = True 'PMFLn (DeActivate)
                    dgvPointAnnot.Rows(RowNo).Cells(4).Style.BackColor = Color.Gainsboro

                    dgvPointAnnot.Rows(RowNo).Cells(5).ReadOnly = False 'CDF
                    dgvPointAnnot.Rows(RowNo).Cells(5).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(6).ReadOnly = False 'RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(6).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(7).ReadOnly = False 'InvCDF 
                    dgvPointAnnot.Rows(RowNo).Cells(7).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(8).ReadOnly = False 'InvRevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(8).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(12).ReadOnly = False 'CDF Probability 
                    dgvPointAnnot.Rows(RowNo).Cells(12).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(13).ReadOnly = False 'Rev CDF Probability
                    dgvPointAnnot.Rows(RowNo).Cells(13).Style.BackColor = Color.White

                    dgvPointAnnot.Rows(RowNo).Cells(17).Value = "Calculate the distribution functions at the specified User Defined Value 2"
                    dgvPointAnnot.AutoResizeRow(RowNo)
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case Else

            End Select

        ElseIf combo.Name = "cboAlignment" Then
            Dim RowNo As Integer = dgvPointAnnot.SelectedCells(0).RowIndex
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'This is the last row - user generated - do not change.
            Else
                'UpdateXmlPointAnnotInfo(RowNo)
                'myParent.PointAnnotInfo(RowNo).<Alignment>.Value = combo.Text 

                Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                SelPointAnnotInfo(RowNo).<Alignment>.Value = combo.Text
                SelPointAnnotInfo = Nothing


                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                myParent.Chart1.Annotations.Clear()
                'ApplyAnnotation(PointAnnotInfo)
                UpdateAnnotation()
            End If



        Else
            Main.Message.AddWarning("Unknown combo box: " & combo.Name & vbCrLf)
        End If
    End Sub

    Private Sub AddProbLteAnnot(RowNo As Integer)
        'Add a probability (less than or equal to) annotation entry at the specified row number.

        Dim P1 As Boolean = False 'If True then the P1 annotation is in the list
        Dim P10 As Boolean = False 'If True then the P10 annotation is in the list
        Dim P50 As Boolean = False 'If True then the P50 annotation is in the list
        Dim P90 As Boolean = False 'If True then the P90 annotation is in the list
        Dim P99 As Boolean = False 'If True then the P99 annotation is in the list

        Dim ProbVal As Double 'The selected probability value

        Dim Descr As String = "The random variable will be less than or equal to Value with the specified Probability"

        dgvPointAnnot.AllowUserToAddRows = False

        Dim I As Integer
        For I = 0 To dgvPointAnnot.RowCount - 1
            'If dgvPointAnnot.Rows(I).Cells(8).Value = "Probability <=" Then
            If dgvPointAnnot.Rows(I).Cells(9).Value = "Probability <=" Then
                'If dgvPointAnnot.Rows(I).Cells(11).Value = 0.01 Then P1 = True
                If dgvPointAnnot.Rows(I).Cells(12).Value = 0.01 Then P1 = True
                If dgvPointAnnot.Rows(I).Cells(12).Value = 0.1 Then P10 = True
                If dgvPointAnnot.Rows(I).Cells(12).Value = 0.5 Then P50 = True
                If dgvPointAnnot.Rows(I).Cells(12).Value = 0.9 Then P90 = True
                If dgvPointAnnot.Rows(I).Cells(12).Value = 0.99 Then P99 = True
            End If
        Next

        If P10 = False Then 'Enter P10 probability annotation settings:
            Dim P10Value As Double = GetInvCdfValue(0.1)
            Dim P10PDF As Double = SelectedDistrib.PDF(P10Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then 'Add a new row:
                'dgvPointAnnot.Rows.Add({True, True, False, True, False, "Probability <=", 0.1, "P10", 0.1, "", P10Value, P10PDF, Descr}) 'PDF - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.1, "P10", 0.1, "", P10Value, P10PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.1, "P10", 0.1, "", P10Value, P10PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.1, "P10", 0.1, "", P10Value, P10PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                AddXmlPointAnnotInfo(RowNo)
            Else 'Update existing row:
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability <="
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.1
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P10"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = 0.1
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P10Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P10PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
                UpdateXmlPointAnnotInfo(RowNo)
            End If
            DisplayAnnot(0.1, P10Value, "P10")
        ElseIf P50 = False Then 'Enter P50 probability annotation settings:
            Dim P50Value As Double = GetInvCdfValue(0.5)
            Dim P50PDF As Double = SelectedDistrib.PDF(P50Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.5, "P50", 0.5, P50Value})
                'dgvPointAnnot.Rows.Add({True, True, False, True, False, "Probability <=", 0.5, "P50", 0.5, "", P50Value, P50PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.5, "P50", 0.5, "", P50Value, P50PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.5, "P50", 0.5, "", P50Value, P50PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.5, "P50", 0.5, "", P50Value, P50PDF, "MiddleRight", Descr})
                AddXmlPointAnnotInfo(RowNo)
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability <="
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.5
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P50"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = 0.5
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P50Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P50PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
                UpdateXmlPointAnnotInfo(RowNo)
            End If
            DisplayAnnot(0.5, P50Value, "P50")
        ElseIf P90 = False Then 'Enter P90 probability annotation settings:
            Dim P90Value As Double = GetInvCdfValue(0.9)
            Dim P90PDF As Double = SelectedDistrib.PDF(P90Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.9, "P90", 0.9, P90Value})
                'dgvPointAnnot.Rows.Add({True, True, False, True, False, "Probability <=", 0.9, "P90", 0.9, "", P90Value, P90PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.9, "P90", 0.9, "", P90Value, P90PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.9, "P90", 0.9, "", P90Value, P90PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.9, "P90", 0.9, "", P90Value, P90PDF, "MiddleRight", Descr})
                AddXmlPointAnnotInfo(RowNo)
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability <="
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.9
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P90"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = 0.9
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P90Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P90PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
                UpdateXmlPointAnnotInfo(RowNo)
            End If
            DisplayAnnot(0.9, P90Value, "P90")
        ElseIf P1 = False Then 'Enter P1 probability annotation settings:
            Dim P1Value As Double = GetInvCdfValue(0.01)
            Dim P1PDF As Double = SelectedDistrib.PDF(P1Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.01, "P1", 0.01, P1Value})
                'dgvPointAnnot.Rows.Add({True, True, False, True, False, "Probability <=", 0.01, "P1", 0.01, "", P1Value, P1PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.01, "P1", 0.01, "", P1Value, P1PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.01, "P1", 0.01, "", P1Value, P1PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.01, "P1", 0.01, "", P1Value, P1PDF, "MiddleRight", Descr})
                AddXmlPointAnnotInfo(RowNo)
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability <="
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.01
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P1"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = 0.01
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P1Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P1PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
                UpdateXmlPointAnnotInfo(RowNo)
            End If
            DisplayAnnot(0.01, P1Value, "P1")
        ElseIf P99 = False Then 'Enter P99 probability annotation settings:
            Dim P99Value As Double = GetInvCdfValue(0.99)
            Dim P99PDF As Double = SelectedDistrib.PDF(P99Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.99, "P99", 0.99, P99Value})
                'dgvPointAnnot.Rows.Add({True, True, False, True, False, "Probability <=", 0.99, "P99", 0.99, "", P99Value, P99PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Probability <=", 0.99, "P99", 0.99, "", P99Value, P99PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.99, "P99", 0.99, "", P99Value, P99PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Probability <=", 0.99, "P99", 0.99, "", P99Value, P99PDF, "MiddleRight", Descr})
                AddXmlPointAnnotInfo(RowNo)
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability <="
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.99
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P99"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = 0.99
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P99Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P99PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
                UpdateXmlPointAnnotInfo(RowNo)
            End If
            DisplayAnnot(0.99, P99Value, "P99")
        Else
            'User defined probability annotation.
        End If
        dgvPointAnnot.AllowUserToAddRows = True

        ''Add an entry to PointAnnotInfo
        ''DistribAnnotNo is the annotation number within the selected distribution.
        ''ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        ''    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        'Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
        '                        <PointAnnotation>
        '                            <DistributionNo><%= SelDistrib %></DistributionNo>
        '                            <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '                            <ChartAnnotNo></ChartAnnotNo>
        '                            <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '                            <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '                            <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '                            <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '                            <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '                            <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '                            <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '                            <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '                            <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '                            <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '                            <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '                            <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '                            <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '                            <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '                            <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '                            <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '                        </PointAnnotation>

        'If IsNothing(PointAnnotInfo) Then
        '    ChartInfo.<ChartSettings>.<PointAnnotCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
        '    PointAnnotInfo = From item In ChartInfo.<ChartSettings>.<PointAnnotCollection>.<PointAnnotation>
        'Else
        '    Dim AnnotCount As Integer = PointAnnotInfo.Count
        '    If AnnotCount = 0 Then
        '        ChartInfo.<ChartSettings>.<PointAnnotCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
        '        PointAnnotInfo = From item In ChartInfo.<ChartSettings>.<PointAnnotCollection>.<PointAnnotation>
        '    Else
        '        PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
        '    End If

        'End If

        'XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(ChartInfo.ToString, True) 'Update the XML tab

    End Sub 'AddProbLteAnnot

    Private Sub AddXmlPointAnnotInfo(RowNo As Integer)
        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<PointAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '</PointAnnotation>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub UpdateXmlPointAnnotInfo(RowNo As Integer)
        'Update the XML Point Annotation Info
        'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = RowNo
        Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib


        'If SelPointAnnotInfo.Count = 0 Then
        If SelDistribPointAnnotInfo.Count < RowNo - 1 Then
            Main.Message.AddWarning("An annotation with Distribution Number = " & SelDistrib & " annotation number = " & RowNo & " was not found." & vbCrLf)
            'Main.Message.AddWarning("Renumbering the annotation numbers for the selected distribution." & vbCrLf)
            'Dim Annotations = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            'Dim I As Integer = 0
            'For Each item In Annotations
            '    item.<DistribAnnotNo>.Value = I
            '    I += 1
            'Next
        Else
            'SelPointAnnotInfo.<Show>.Value = dgvPointAnnot.Rows(RowNo).Cells(0).Value
            SelDistribPointAnnotInfo(RowNo).<Show>.Value = dgvPointAnnot.Rows(RowNo).Cells(0).Value
            SelDistribPointAnnotInfo(RowNo).<PDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(1).Value
            SelDistribPointAnnotInfo(RowNo).<PDFLn>.Value = dgvPointAnnot.Rows(RowNo).Cells(2).Value
            SelDistribPointAnnotInfo(RowNo).<PMF>.Value = dgvPointAnnot.Rows(RowNo).Cells(3).Value
            SelDistribPointAnnotInfo(RowNo).<PMFLn>.Value = dgvPointAnnot.Rows(RowNo).Cells(4).Value
            SelDistribPointAnnotInfo(RowNo).<CDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(5).Value
            SelDistribPointAnnotInfo(RowNo).<RevCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(6).Value
            SelDistribPointAnnotInfo(RowNo).<InvCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(7).Value
            SelDistribPointAnnotInfo(RowNo).<InvRevCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(8).Value
            SelDistribPointAnnotInfo(RowNo).<Type>.Value = dgvPointAnnot.Rows(RowNo).Cells(9).Value
            SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = dgvPointAnnot.Rows(RowNo).Cells(10).Value
            'Main.Message.Add("PointAnnotInfo parameter = " & dgvPointAnnot.Rows(RowNo).Cells(10).Value & vbCrLf)
            SelDistribPointAnnotInfo(RowNo).<Label>.Value = dgvPointAnnot.Rows(RowNo).Cells(11).Value
            SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = dgvPointAnnot.Rows(RowNo).Cells(12).Value
            SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = dgvPointAnnot.Rows(RowNo).Cells(13).Value
            SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = dgvPointAnnot.Rows(RowNo).Cells(14).Value
            SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = dgvPointAnnot.Rows(RowNo).Cells(15).Value
            SelDistribPointAnnotInfo(RowNo).<Alignment>.Value = dgvPointAnnot.Rows(RowNo).Cells(16).Value
            SelDistribPointAnnotInfo(RowNo).<Description>.Value = dgvPointAnnot.Rows(RowNo).Cells(17).Value

            'SelPointAnnotInfo.<PDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(0).Value
            'SelPointAnnotInfo.<PDFLn>.Value = dgvPointAnnot.Rows(RowNo).Cells(1).Value
            'SelPointAnnotInfo.<PMF>.Value = dgvPointAnnot.Rows(RowNo).Cells(2).Value
            'SelPointAnnotInfo.<PMFLn>.Value = dgvPointAnnot.Rows(RowNo).Cells(3).Value
            'SelPointAnnotInfo.<CDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(4).Value
            'SelPointAnnotInfo.<RevCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(5).Value
            'SelPointAnnotInfo.<InvCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(6).Value
            'SelPointAnnotInfo.<InvRevCDF>.Value = dgvPointAnnot.Rows(RowNo).Cells(7).Value
            'SelPointAnnotInfo.<Type>.Value = dgvPointAnnot.Rows(RowNo).Cells(8).Value
            'SelPointAnnotInfo.<Parameter>.Value = dgvPointAnnot.Rows(RowNo).Cells(9).Value
            'SelPointAnnotInfo.<Label>.Value = dgvPointAnnot.Rows(RowNo).Cells(10).Value
            'SelPointAnnotInfo.<CdfProbability>.Value = dgvPointAnnot.Rows(RowNo).Cells(11).Value
            'SelPointAnnotInfo.<RevCdfProbability>.Value = dgvPointAnnot.Rows(RowNo).Cells(12).Value
            'SelPointAnnotInfo.<RandVarValue>.Value = dgvPointAnnot.Rows(RowNo).Cells(13).Value
            'SelPointAnnotInfo.<ProbabilityDensity>.Value = dgvPointAnnot.Rows(RowNo).Cells(14).Value
            'SelPointAnnotInfo.<Description>.Value = dgvPointAnnot.Rows(RowNo).Cells(15).Value

            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
        End If
    End Sub

    Private Function GetInvCdfValue(ByVal Prob As Double) As Double
        'Get the value corresponding the the given probability value.
        If SelectedDistrib.Continuity = "Continuous" Then
            Return SelectedDistrib.InvCDF(Prob)
        Else
            Main.Message.AddWarning("Inverse CDF is not yet supported for discrete distributions." & vbCrLf)
            Return Double.NaN
        End If
    End Function

    Private Function GetInvRevCdfValue(ByVal Prob As Double) As Double
        'Get the Inverse Reverse Cdf value.
        'Get the value corresponding the the given probability value.
        If SelectedDistrib.Continuity = "Continuous" Then
            Return SelectedDistrib.InvCDF(1 - Prob)
        Else
            Main.Message.AddWarning("Inverse Reverse CDF is not yet supported for discrete distributions." & vbCrLf)
            Return Double.NaN
        End If
    End Function

    Private Sub DisplayAnnot(ByVal Prob As Double, ByVal Value As Double, ByVal Text As String)
        'Display the probability annotation on the Series Analysis charts.

        'Display the annotation on the CDF chart: ========================================================

        'Add the vertical bar:
        Dim CDFPoint As New DataVisualization.Charting.DataPoint
        CDFPoint.XValue = Value
        CDFPoint.SetValueY(Prob)
        'Chart1.Series("CdfVertBar").Points.Add(CDFPoint)

        'Add the label:
        Dim Annot As New DataVisualization.Charting.TextAnnotation
        'Annot.AxisX = Chart1.ChartAreas(0).AxisX
        'Annot.AxisY = Chart1.ChartAreas(0).AxisY
        Annot.AnchorX = Value
        Annot.AnchorY = Prob

        Annot.AnchorAlignment = ContentAlignment.MiddleRight

        Annot.Text = Text
        Annot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)

        'Chart1.Annotations.Add(Annot)

        'Display the annotation on the Histogram: ====================================================

        Dim HistPoint As New DataVisualization.Charting.DataPoint
        HistPoint.XValue = Value
        'Dim YValue As Double = GetHistProb(Value)
        'HistPoint.SetValueY(YValue)
        'Chart1.Series("HistPoints").Points.Add(HistPoint)

    End Sub

    Private Sub AddProbGtAnnot(RowNo As Integer)
        'Add a probability (greater than) annotation entry at the specified row number.

        Dim P1 As Boolean = False 'If True then the P1 annotation is in the list
        Dim P10 As Boolean = False 'If True then the P10 annotation is in the list
        Dim P50 As Boolean = False 'If True then the P50 annotation is in the list
        Dim P90 As Boolean = False 'If True then the P90 annotation is in the list
        Dim P99 As Boolean = False 'If True then the P99 annotation is in the list

        Dim ProbVal As Double 'The selected probability value

        Dim Descr As String = "The random variable will be greater than Value with the specified Probability"

        dgvPointAnnot.AllowUserToAddRows = False

        Dim I As Integer
        For I = 0 To dgvPointAnnot.RowCount - 1
            'If dgvPointAnnot.Rows(I).Cells(8).Value = "Probability >" Then
            If dgvPointAnnot.Rows(I).Cells(9).Value = "Probability >" Then
                'If dgvPointAnnot.Rows(I).Cells(12).Value = 0.01 Then P1 = True
                If dgvPointAnnot.Rows(I).Cells(13).Value = 0.01 Then P1 = True
                If dgvPointAnnot.Rows(I).Cells(13).Value = 0.1 Then P10 = True
                If dgvPointAnnot.Rows(I).Cells(13).Value = 0.5 Then P50 = True
                If dgvPointAnnot.Rows(I).Cells(13).Value = 0.9 Then P90 = True
                If dgvPointAnnot.Rows(I).Cells(13).Value = 0.99 Then P99 = True
            End If
        Next

        If P10 = False Then 'Enter P10 probability annotation settings:
            'Dim P10Value As Double = GetInvCdfValue(0.1)
            Dim P10Value As Double = GetInvRevCdfValue(0.1)
            Dim P10PDF As Double = SelectedDistrib.PDF(P10Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.1, "P10", 0.1, P10Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, False, True, False, True, "Probability >", 0.1, "P10", "", 0.1, P10Value, P10PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.1, "P10", "", 0.1, P10Value, P10PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.1, "P10", "", 0.1, P10Value, P10PDF, "MiddleRight", Descr})
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(2).Value = "Probability"
                'dgvPointAnnot.Rows(RowNo).Cells(3).Value = 0.1
                'dgvPointAnnot.Rows(RowNo).Cells(4).Value = "P10"
                'dgvPointAnnot.Rows(RowNo).Cells(5).Value = 0.1
                'dgvPointAnnot.Rows(RowNo).Cells(6).Value = P10Value
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = False 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability >"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.1
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P10"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = 0.1
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P10Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P10PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr

            End If
            DisplayAnnot(0.1, P10Value, "P10")
        ElseIf P50 = False Then 'Enter P50 probability annotation settings:
            'Dim P50Value As Double = GetInvCdfValue(0.5)
            Dim P50Value As Double = GetInvRevCdfValue(0.5)
            Dim P50PDF As Double = SelectedDistrib.PDF(P50Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.5, "P50", 0.5, P50Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, False, True, False, True, "Probability >", 0.5, "P50", "", 0.5, P50Value, P50PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.5, "P50", "", 0.5, P50Value, P50PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.5, "P50", "", 0.5, P50Value, P50PDF, "MiddleRight", Descr})
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(2).Value = "Probability"
                'dgvPointAnnot.Rows(RowNo).Cells(3).Value = 0.5
                'dgvPointAnnot.Rows(RowNo).Cells(4).Value = "P50"
                'dgvPointAnnot.Rows(RowNo).Cells(5).Value = 0.5
                'dgvPointAnnot.Rows(RowNo).Cells(6).Value = P50Value
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = False 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability >"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.5
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P10"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = 0.5
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P50Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P50PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(0.5, P50Value, "P50")
        ElseIf P90 = False Then 'Enter P90 probability annotation settings:
            'Dim P90Value As Double = GetInvCdfValue(0.9)
            Dim P90Value As Double = GetInvRevCdfValue(0.9)
            Dim P90PDF As Double = SelectedDistrib.PDF(P90Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.9, "P90", 0.9, P90Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, False, True, False, True, "Probability >", 0.9, "P90", "", 0.9, P90Value, P90PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.9, "P90", "", 0.9, P90Value, P90PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.9, "P90", "", 0.9, P90Value, P90PDF, "MiddleRight", Descr})
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(2).Value = "Probability"
                'dgvPointAnnot.Rows(RowNo).Cells(3).Value = 0.9
                'dgvPointAnnot.Rows(RowNo).Cells(4).Value = "P90"
                'dgvPointAnnot.Rows(RowNo).Cells(5).Value = 0.9
                'dgvPointAnnot.Rows(RowNo).Cells(6).Value = P90Value
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = False 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability >"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.9
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P90"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = 0.9
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P90Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P90PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(0.9, P90Value, "P90")
        ElseIf P1 = False Then 'Enter P1 probability annotation settings:
            'Dim P1Value As Double = GetInvCdfValue(0.01)
            Dim P1Value As Double = GetInvRevCdfValue(0.01)
            Dim P1PDF As Double = SelectedDistrib.PDF(P1Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Probability", 0.01, "P1", 0.01, P1Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, False, True, False, True, "Probability >", 0.01, "P1", "", 0.01, P1Value, P1PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.01, "P1", "", 0.01, P1Value, P1PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.01, "P1", "", 0.01, P1Value, P1PDF, "MiddleRight", Descr})
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(2).Value = "Probability"
                'dgvPointAnnot.Rows(RowNo).Cells(3).Value = 0.01
                'dgvPointAnnot.Rows(RowNo).Cells(4).Value = "P1"
                'dgvPointAnnot.Rows(RowNo).Cells(5).Value = 0.01
                'dgvPointAnnot.Rows(RowNo).Cells(6).Value = P1Value
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = False 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability >"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.01
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P1"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = 0.01
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P1Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P1PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(0.01, P1Value, "P1")
        ElseIf P99 = False Then 'Enter P99 probability annotation settings:
            'Dim P99Value As Double = GetInvCdfValue(0.99)
            Dim P99Value As Double = GetInvRevCdfValue(0.99)
            Dim P99PDF As Double = SelectedDistrib.PDF(P99Value)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                dgvPointAnnot.Rows.Add({True, True, "Probability", 0.99, "P99", 0.99, P99Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, False, True, False, True, "Probability >", 0.99, "P99", "", 0.99, P99Value, P99PDF, Descr})
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.99, "P99", "", 0.99, P99Value, P99PDF, Descr})
                dgvPointAnnot.Rows.Add({True, True, True, False, False, False, True, False, True, "Probability >", 0.99, "P99", "", 0.99, P99Value, P99PDF, "MiddleRight", Descr})
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(1).Value = True
                'dgvPointAnnot.Rows(RowNo).Cells(2).Value = "Probability"
                'dgvPointAnnot.Rows(RowNo).Cells(3).Value = 0.99
                'dgvPointAnnot.Rows(RowNo).Cells(4).Value = "P99"
                'dgvPointAnnot.Rows(RowNo).Cells(5).Value = 0.99
                'dgvPointAnnot.Rows(RowNo).Cells(6).Value = P99Value
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = False 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Probability >"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0.99
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = "P99"
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = ""
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = 0.99
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = P99Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = P99PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(0.99, P99Value, "P99")
        Else
            'User defined probability annotation.
        End If
        dgvPointAnnot.AllowUserToAddRows = True



        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>


        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<PointAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '</PointAnnotation>


        '<Value><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></Value>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnoationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If
        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab

    End Sub 'AddProbGTAnnot

    Private Sub AddValueAnnot(RowNo As Integer)
        'Add a Random Variable Value annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value - Use the Mean value as default

        Dim MeanVal As Double = SelectedDistrib.Mean
        Dim Descr As String = "Calculate the distribution functions at the specified Random Variable Value"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, False, False, True, True, False, True, "Random Variable Value", MeanVal, "Value: " & MeanVal, SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Random Variable Value", MeanVal, "Value: " & MeanVal, SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Random Variable Value", MeanVal, "", SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Random Variable Value", MeanVal, "", SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'Show
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Random Variable Value"
            'dgvPointAnnot.Rows(RowNo).Cells(9).Value = SelectedDistrib.Mean 'Use the Mean value as default
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = MeanVal 'Use the Mean value as default
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Value: " & MeanVal 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "" 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = MeanVal
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If

        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab

    End Sub

    Private Sub AddMeanAnnot(RowNo As Integer)
        'Add a Random Variable Value annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value - Use the Mean value as default

        Dim MeanVal As Double = SelectedDistrib.Mean
        Dim Descr As String = "Calculate the distribution functions at the Mean Value"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, False, False, True, True, False, True, "Mean", MeanVal, "Mean: " & MeanVal, SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mean", MeanVal, "Mean: " & MeanVal, SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mean", MeanVal, "Mean ", SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mean", MeanVal, "Mean ", SelectedDistrib.CDF(MeanVal), SelectedDistrib.RevCDF(MeanVal), MeanVal, SelectedDistrib.PDF(MeanVal), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Mean"
            'dgvPointAnnot.Rows(RowNo).Cells(9).Value = SelectedDistrib.Mean 'Use the Mean value as default
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = MeanVal
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Mean: " & MeanVal 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Mean " 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = MeanVal
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(MeanVal)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If



        'dgvPointAnnot.Rows(RowNo).Cells(9).Value = MeanVal 'Use the Mean value as default
        'dgvPointAnnot.Rows(RowNo).Cells(10).Value = "Mean: " & MeanVal 'Add a label
        'dgvPointAnnot.Rows(RowNo).Cells(11).Value = SelectedDistrib.CDF(MeanVal)
        'dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.RevCDF(MeanVal)
        'dgvPointAnnot.Rows(RowNo).Cells(13).Value = MeanVal
        'dgvPointAnnot.Rows(RowNo).Cells(14).Value = SelectedDistrib.PDF(MeanVal)

        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<PointAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '</PointAnnotation>

        If IsNothing(myParent.PointAnnotInfo) Then
            'myParent.ChartInfo.<ChartSettings>.<PointAnnotionCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            'myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotionCollection>.<PointAnnotation>
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                'myParent.ChartInfo.<ChartSettings>.<PointAnnotionCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                'myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotionCollection>.<PointAnnotation>
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub AddModeAnnot(RowNo As Integer)
        'Add a Mode Value annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value - Use the Mean value as default

        Dim ModeVal As Double = SelectedDistrib.Mode
        Dim Descr As String = "Calculate the distribution functions at the Mode Value"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, False, False, True, True, False, True, "Mode", ModeVal, "Mode: " & ModeVal, SelectedDistrib.CDF(ModeVal), SelectedDistrib.RevCDF(ModeVal), ModeVal, SelectedDistrib.PDF(ModeVal), Descr})  'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mode", ModeVal, "Mode: " & ModeVal, SelectedDistrib.CDF(ModeVal), SelectedDistrib.RevCDF(ModeVal), ModeVal, SelectedDistrib.PDF(ModeVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mode", ModeVal, "Mode ", SelectedDistrib.CDF(ModeVal), SelectedDistrib.RevCDF(ModeVal), ModeVal, SelectedDistrib.PDF(ModeVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Mode", ModeVal, "Mode ", SelectedDistrib.CDF(ModeVal), SelectedDistrib.RevCDF(ModeVal), ModeVal, SelectedDistrib.PDF(ModeVal), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Mode"
            'dgvPointAnnot.Rows(RowNo).Cells(9).Value = SelectedDistrib.Mode
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = ModeVal
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Mode: " & ModeVal 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Mode "  'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(ModeVal)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(ModeVal)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = ModeVal
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(ModeVal)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If


        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub AddMedianAnnot(RowNo As Integer)
        'Add a Median Value annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value - Use the Mean value as default

        Dim MedianVal As Double = SelectedDistrib.Median
        Dim Descr As String = "Calculate the distribution functions at the Median Value"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, False, False, True, True, False, True, "Median", MedianVal, "Median: " & MedianVal, SelectedDistrib.CDF(MedianVal), SelectedDistrib.RevCDF(MedianVal), MedianVal, SelectedDistrib.PDF(MedianVal), Descr})  'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Median", MedianVal, "Median: " & MedianVal, SelectedDistrib.CDF(MedianVal), SelectedDistrib.RevCDF(MedianVal), MedianVal, SelectedDistrib.PDF(MedianVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Median", MedianVal, "Median ", SelectedDistrib.CDF(MedianVal), SelectedDistrib.RevCDF(MedianVal), MedianVal, SelectedDistrib.PDF(MedianVal), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "Median", MedianVal, "Median ", SelectedDistrib.CDF(MedianVal), SelectedDistrib.RevCDF(MedianVal), MedianVal, SelectedDistrib.PDF(MedianVal), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Median"
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = MedianVal
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Median: " & MedianVal 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Median "  'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(MedianVal)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(MedianVal)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = MedianVal
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(MedianVal)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If

        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<PointAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '</PointAnnotation>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub AddStdDevAnnot(RowNo As Integer)
        'Add a standard deviation annotation entry at the specified row number.

        dgvPointAnnot.AllowUserToAddRows = False

        Dim SDev1 As Boolean = False 'Corresonds to a Standard Deviation parameter of 1
        Dim SDevN1 As Boolean = False 'Corresonds to a Standard Deviation parameter of -1
        Dim SDev2 As Boolean = False 'Corresonds to a Standard Deviation parameter of 2
        Dim SDevN2 As Boolean = False 'Corresonds to a Standard Deviation parameter of -2
        Dim SDev3 As Boolean = False 'Corresonds to a Standard Deviation parameter of 3
        Dim SDevN3 As Boolean = False 'Corresonds to a Standard Deviation parameter of -3

        'Check if any Standard Deviation values are already annotated:
        Dim I As Integer
        For I = 0 To dgvPointAnnot.RowCount - 1
            'If dgvPointAnnot.Rows(I).Cells(8).Value = "Standard Deviation" Then
            If dgvPointAnnot.Rows(I).Cells(9).Value = "Standard Deviation" Then
                'If dgvPointAnnot.Rows(I).Cells(9).Value = 1 Then SDev1 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = 1 Then SDev1 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = -1 Then SDevN1 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = 2 Then SDev2 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = -2 Then SDevN2 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = 3 Then SDev3 = True
                If dgvPointAnnot.Rows(I).Cells(10).Value = -3 Then SDevN3 = True
            End If
        Next

        Dim StdDev As Double = SelectedDistrib.StdDev 'The Standard Deviation of the series
        Dim Mean As Double = SelectedDistrib.Mean 'The Mean value of the series
        Dim Descr As String = "The Standard Deviation of the distribution."

        If SDev1 = False Then
            Dim SDev1Value As Double = Mean + StdDev
            Dim SDev1PDF As Double = SelectedDistrib.PDF(SDev1Value)
            Dim SDev1CDF As Double = SelectedDistrib.CDF(SDev1Value)
            Dim SDev1RevCDF As Double = SelectedDistrib.RevCDF(SDev1Value)
            'Dim Label As String = "1" & ChrW(963)
            Dim Label As String = ChrW(956) & "+1" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", 1, Label, SDev1CDF, SDev1RevCDF, SDev1Value, SDev1PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 1, Label, SDev1CDF, SDev1RevCDF, SDev1Value, SDev1PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 1, Label, SDev1CDF, SDev1RevCDF, SDev1Value, SDev1PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 1
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDev1CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDev1RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDev1Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDev1PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr

            End If
            DisplayAnnot(SDev1PDF, SDev1Value, Label)
        ElseIf SDevN1 = False Then
            Dim SDevN1Value As Double = Mean - StdDev
            Dim SDevN1PDF As Double = SelectedDistrib.PDF(SDevN1Value)
            Dim SDevN1CDF As Double = SelectedDistrib.CDF(SDevN1Value)
            Dim SDevN1RevCDF As Double = SelectedDistrib.RevCDF(SDevN1Value)
            'Dim Label As String = "-1" & ChrW(963)
            Dim Label As String = ChrW(956) & "-1" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", -1, Label, SDevN1CDF, SDevN1RevCDF, SDevN1Value, SDevN1PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -1, Label, SDevN1CDF, SDevN1RevCDF, SDevN1Value, SDevN1PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -1, Label, SDevN1CDF, SDevN1RevCDF, SDevN1Value, SDevN1PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = -1
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDevN1CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDevN1RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDevN1Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDevN1PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(SDevN1PDF, SDevN1Value, Label)
        ElseIf SDev2 = False Then
            Dim SDev2Value As Double = Mean + 2 * StdDev
            Dim SDev2PDF As Double = SelectedDistrib.PDF(SDev2Value)
            Dim SDev2CDF As Double = SelectedDistrib.CDF(SDev2Value)
            Dim SDev2RevCDF As Double = SelectedDistrib.RevCDF(SDev2Value)
            'Dim Label As String = "2" & ChrW(963)
            Dim Label As String = ChrW(956) & "+2" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", 2, Label, SDev2CDF, SDev2RevCDF, SDev2Value, SDev2PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 2, Label, SDev2CDF, SDev2RevCDF, SDev2Value, SDev2PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 2, Label, SDev2CDF, SDev2RevCDF, SDev2Value, SDev2PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 2
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDev2CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDev2RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDev2Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDev2PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(SDev2PDF, SDev2Value, Label)
        ElseIf SDevN2 = False Then
            Dim SDevN2Value As Double = Mean - 2 * StdDev
            Dim SDevN2PDF As Double = SelectedDistrib.PDF(SDevN2Value)
            Dim SDevN2CDF As Double = SelectedDistrib.CDF(SDevN2Value)
            Dim SDevN2RevCDF As Double = SelectedDistrib.RevCDF(SDevN2Value)
            'Dim Label As String = "-2" & ChrW(963)
            Dim Label As String = ChrW(956) & "-2" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", -2, Label, SDevN2CDF, SDevN2RevCDF, SDevN2Value, SDevN2PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -2, Label, SDevN2CDF, SDevN2RevCDF, SDevN2Value, SDevN2PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -2, Label, SDevN2CDF, SDevN2RevCDF, SDevN2Value, SDevN2PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = -2
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDevN2CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDevN2RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDevN2Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDevN2PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(SDevN2PDF, SDevN2Value, Label)
        ElseIf SDev3 = False Then
            Dim SDev3Value As Double = Mean + 3 * StdDev
            Dim SDev3PDF As Double = SelectedDistrib.PDF(SDev3Value)
            Dim SDev3CDF As Double = SelectedDistrib.CDF(SDev3Value)
            Dim SDev3RevCDF As Double = SelectedDistrib.RevCDF(SDev3Value)
            'Dim Label As String = "3" & ChrW(963)
            Dim Label As String = ChrW(956) & "+3" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", 3, Label, SDev3CDF, SDev3RevCDF, SDev3Value, SDev3PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 3, Label, SDev3CDF, SDev3RevCDF, SDev3Value, SDev3PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 3, Label, SDev3CDF, SDev3RevCDF, SDev3Value, SDev3PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = 3
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDev3CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDev3RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDev3Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDev3PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            DisplayAnnot(SDev3PDF, SDev3Value, Label)
        ElseIf SDevN3 = False Then
            Dim SDevN3Value As Double = Mean - 3 * StdDev
            Dim SDevN3PDF As Double = SelectedDistrib.PDF(SDevN3Value)
            Dim SDevN3CDF As Double = SelectedDistrib.CDF(SDevN3Value)
            Dim SDevN3RevCDF As Double = SelectedDistrib.RevCDF(SDevN3Value)
            'Dim Label As String = "-3" & ChrW(963)
            Dim Label As String = ChrW(956) & "-3" & ChrW(963)
            If RowNo > dgvPointAnnot.RowCount - 1 Then
                'dgvPointAnnot.Rows.Add({True, True, "Standard Deviation", -3, Label, SDevN3Prob, SDevN3Value})
                'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", -3, Label, SDevN3CDF, SDevN3RevCDF, SDevN3Value, SDevN3PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -3, Label, SDevN3CDF, SDevN3RevCDF, SDevN3Value, SDevN3PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
                dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", -3, Label, SDevN3CDF, SDevN3RevCDF, SDevN3Value, SDevN3PDF, "MiddleRight", Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            Else
                'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
                dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
                dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
                dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
                dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
                dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
                dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
                dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
                dgvPointAnnot.Rows(RowNo).Cells(10).Value = -3
                dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
                dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDevN3CDF
                dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDevN3RevCDF
                dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDevN3Value
                dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDevN3PDF
                dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
                dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
            End If
            'DisplayAnnot(SDevN3Prob, SDevN3Value, Label)
            DisplayAnnot(SDevN3PDF, SDevN3Value, Label)
            'Else
            '    Dim SDev0Value As Double = Mean
            '    'Dim SDev0Prob As Double = GetProb(SDev0Value)
            '    Dim SDev0PDF As Double = SelectedDistrib.PDF(SDev0Value)
            '    Dim SDev0CDF As Double = SelectedDistrib.CDF(SDev0Value)
            '    Dim SDev0RevCDF As Double = SelectedDistrib.RevCDF(SDev0Value)
            '    'Dim Label As String = "0" & ChrW(963)
            '    Dim Label As String = ChrW(956) & "0" & ChrW(963)
            '    If RowNo > dgvPointAnnot.RowCount - 1 Then
            '        'dgvPointAnnot.Rows.Add({True, True, False, False, True, False, True, False, "Standard Deviation", 0, Label, SDev0CDF, SDev0RevCDF, SDev0Value, SDev0PDF, Descr}) 'PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            '        dgvPointAnnot.Rows.Add({True, True, True, False, False, True, False, True, False, "Standard Deviation", 0, Label, SDev0CDF, SDev0RevCDF, SDev0Value, SDev0PDF, Descr}) 'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            '    Else
            '        'dgvPointAnnot.Rows(RowNo).Cells(0).Value = True 'PDF
            '        dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            '        dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            '        dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            '        dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            '        dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            '        dgvPointAnnot.Rows(RowNo).Cells(6).Value = False 'RevCDF
            '        dgvPointAnnot.Rows(RowNo).Cells(7).Value = True 'InvCDF
            '        dgvPointAnnot.Rows(RowNo).Cells(8).Value = False 'InvRevCDF
            '        dgvPointAnnot.Rows(RowNo).Cells(9).Value = "Standard Deviation"
            '        dgvPointAnnot.Rows(RowNo).Cells(10).Value = 0
            '        dgvPointAnnot.Rows(RowNo).Cells(11).Value = Label
            '        dgvPointAnnot.Rows(RowNo).Cells(12).Value = SDev0CDF
            '        dgvPointAnnot.Rows(RowNo).Cells(13).Value = SDev0RevCDF
            '        dgvPointAnnot.Rows(RowNo).Cells(14).Value = SDev0Value
            '        dgvPointAnnot.Rows(RowNo).Cells(15).Value = SDev0PDF
            '        dgvPointAnnot.Rows(RowNo).Cells(16).Value = Descr
            '    End If
            '    DisplayAnnot(SDev0PDF, SDev0Value, Label)
        End If

        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<PointAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></PDF>
        '    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDFLn>
        '    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PMF>
        '    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMFLn>
        '    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></CDF>
        '    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></RevCDF>
        '    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></InvCDF>
        '    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvRevCDF>
        '    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></Type>
        '    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Parameter>
        '    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Label>
        '    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></CdfProbability>
        '    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></RevCdfProbability>
        '    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RandVarValue>
        '    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></ProbabilityDensity>
        '    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></Description>
        '</PointAnnotation>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab

    End Sub

    Private Sub AddUserDefVal1(RowNo As Integer)
        'Add a User Defined Value 1 annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value

        Dim UserDef1 As Double = Val(txtUserDef1.Text)
        Dim Descr As String = "Calculate the distribution functions at the User Defined Random Variable Value 1"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 1", UserDef1, "Value: " & UserDef1, SelectedDistrib.CDF(UserDef1), SelectedDistrib.RevCDF(UserDef1), UserDef1, SelectedDistrib.PDF(UserDef1), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 1", UserDef1, "", SelectedDistrib.CDF(UserDef1), SelectedDistrib.RevCDF(UserDef1), UserDef1, SelectedDistrib.PDF(UserDef1), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 1", UserDef1, UserDef1, SelectedDistrib.CDF(UserDef1), SelectedDistrib.RevCDF(UserDef1), UserDef1, SelectedDistrib.PDF(UserDef1), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 1", UserDef1, "", SelectedDistrib.CDF(UserDef1), SelectedDistrib.RevCDF(UserDef1), UserDef1, SelectedDistrib.PDF(UserDef1), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 1", UserDef1, "", SelectedDistrib.CDF(UserDef1), SelectedDistrib.RevCDF(UserDef1), UserDef1, SelectedDistrib.PDF(UserDef1), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "User Defined Value 1"
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = UserDef1 'Use the Mean value as default
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Value: " & UserDef1 'Add a label
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "" 'Add a label
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = UserDef1 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "" 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(UserDef1)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(UserDef1)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = UserDef1
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(UserDef1)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If
        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub AddUserDefVal2(RowNo As Integer)
        'Add a User Defined Value 2 annotation.
        'The Parameter cell (Col 9) will contain the Random Variable value

        Dim UserDef2 As Double = Val(txtUserDef2.Text)
        Dim Descr As String = "Calculate the distribution functions at the User Defined Random Variable Value 2"
        dgvPointAnnot.AllowUserToAddRows = False
        If RowNo > dgvPointAnnot.RowCount - 1 Then
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 2", UserDef2, "", SelectedDistrib.CDF(UserDef2), SelectedDistrib.RevCDF(UserDef2), UserDef2, SelectedDistrib.PDF(UserDef2), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 2", UserDef2, UserDef2, SelectedDistrib.CDF(UserDef2), SelectedDistrib.RevCDF(UserDef2), UserDef2, SelectedDistrib.PDF(UserDef2), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            'dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 2", UserDef2, "", SelectedDistrib.CDF(UserDef2), SelectedDistrib.RevCDF(UserDef2), UserDef2, SelectedDistrib.PDF(UserDef2), Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
            dgvPointAnnot.Rows.Add({True, True, True, False, False, True, True, False, True, "User Defined Value 2", UserDef2, "", SelectedDistrib.CDF(UserDef2), SelectedDistrib.RevCDF(UserDef2), UserDef2, SelectedDistrib.PDF(UserDef2), "MiddleRight", Descr})  'Show - PDF - PDFLn - PMF - PMFLn - CDF - RevCDF - InvCDF - InvRevCDF
        Else
            dgvPointAnnot.Rows(RowNo).Cells(1).Value = True 'PDF
            dgvPointAnnot.Rows(RowNo).Cells(2).Value = True 'PDFLn
            dgvPointAnnot.Rows(RowNo).Cells(3).Value = False 'PMF
            dgvPointAnnot.Rows(RowNo).Cells(4).Value = False 'PMFLn
            dgvPointAnnot.Rows(RowNo).Cells(5).Value = True 'CDF
            dgvPointAnnot.Rows(RowNo).Cells(6).Value = True 'RevCDF
            dgvPointAnnot.Rows(RowNo).Cells(7).Value = False 'InvCDF
            dgvPointAnnot.Rows(RowNo).Cells(8).Value = True 'InvRevCDF
            dgvPointAnnot.Rows(RowNo).Cells(9).Value = "User Defined Value 2"
            dgvPointAnnot.Rows(RowNo).Cells(10).Value = UserDef2 'Use the Mean value as default
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "Value: " & UserDef2 'Add a label
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = "" 'Add a label
            'dgvPointAnnot.Rows(RowNo).Cells(11).Value = UserDef2 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(11).Value = "" 'Add a label
            dgvPointAnnot.Rows(RowNo).Cells(12).Value = SelectedDistrib.CDF(UserDef2)
            dgvPointAnnot.Rows(RowNo).Cells(13).Value = SelectedDistrib.RevCDF(UserDef2)
            dgvPointAnnot.Rows(RowNo).Cells(14).Value = UserDef2
            dgvPointAnnot.Rows(RowNo).Cells(15).Value = SelectedDistrib.PDF(UserDef2)
            dgvPointAnnot.Rows(RowNo).Cells(16).Value = "MiddleRight"
            dgvPointAnnot.Rows(RowNo).Cells(17).Value = Descr
        End If
        dgvPointAnnot.AllowUserToAddRows = True

        'Add an entry to PointAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewPointAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                                <PointAnnotation>
                                    <DistributionNo><%= SelDistrib %></DistributionNo>
                                    <Show><%= dgvPointAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                    <PDF><%= dgvPointAnnot.Rows(RowNo).Cells(1).Value %></PDF>
                                    <PDFLn><%= dgvPointAnnot.Rows(RowNo).Cells(2).Value %></PDFLn>
                                    <PMF><%= dgvPointAnnot.Rows(RowNo).Cells(3).Value %></PMF>
                                    <PMFLn><%= dgvPointAnnot.Rows(RowNo).Cells(4).Value %></PMFLn>
                                    <CDF><%= dgvPointAnnot.Rows(RowNo).Cells(5).Value %></CDF>
                                    <RevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(6).Value %></RevCDF>
                                    <InvCDF><%= dgvPointAnnot.Rows(RowNo).Cells(7).Value %></InvCDF>
                                    <InvRevCDF><%= dgvPointAnnot.Rows(RowNo).Cells(8).Value %></InvRevCDF>
                                    <Type><%= dgvPointAnnot.Rows(RowNo).Cells(9).Value %></Type>
                                    <Parameter><%= dgvPointAnnot.Rows(RowNo).Cells(10).Value %></Parameter>
                                    <Label><%= dgvPointAnnot.Rows(RowNo).Cells(11).Value %></Label>
                                    <CdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(12).Value %></CdfProbability>
                                    <RevCdfProbability><%= dgvPointAnnot.Rows(RowNo).Cells(13).Value %></RevCdfProbability>
                                    <RandVarValue><%= dgvPointAnnot.Rows(RowNo).Cells(14).Value %></RandVarValue>
                                    <ProbabilityDensity><%= dgvPointAnnot.Rows(RowNo).Cells(15).Value %></ProbabilityDensity>
                                    <Alignment><%= dgvPointAnnot.Rows(RowNo).Cells(16).Value %></Alignment>
                                    <Description><%= dgvPointAnnot.Rows(RowNo).Cells(17).Value %></Description>
                                </PointAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>


        If IsNothing(myParent.PointAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
            myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.PointAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.First.Add(NewPointAnnotInfo.<PointAnnotation>)
                myParent.PointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>
            Else
                myParent.PointAnnotInfo(AnnotCount - 1).AddAfterSelf(NewPointAnnotInfo.<PointAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub btnPrevDistrib_Click(sender As Object, e As EventArgs) Handles btnPrevDistrib.Click
        If NDistribs = 0 Then

        Else
            If SelDistrib > 1 Then
                SelDistrib -= 1
                SelectedDistrib = Main.Distribution.Info(SelDistrib - 1)
                'LoadParamInfo()
                txtDistribColor.BackColor = SelectedDistrib.Display.MarkerColor
            End If
        End If

    End Sub

    Private Sub btnNextDistrib_Click(sender As Object, e As EventArgs) Handles btnNextDistrib.Click
        If NDistribs = 0 Then

        Else
            If SelDistrib < NDistribs Then
                SelDistrib += 1
                SelectedDistrib = Main.Distribution.Info(SelDistrib - 1)
                'LoadParamInfo()
                txtDistribColor.BackColor = SelectedDistrib.Display.MarkerColor
            End If
        End If

    End Sub

    Private Sub btnMean_Click(sender As Object, e As EventArgs) Handles btnMean.Click
        'Show the Mean of the distribution.
        txtMean.Text = SelectedDistrib.Mean
    End Sub

    Private Sub btnStdDev_Click(sender As Object, e As EventArgs) Handles btnStdDev.Click
        'Show the Standard Deviation of the distribution
        txtStdDev.Text = SelectedDistrib.StdDev
    End Sub

    Private Sub dgvPointDisplay_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointDisplay.CellContentClick
        'Process any changes to the checkboxes.
        'To make the changes immediate, the EndPointDisplayEditMode() method is required.
        'For more info: http://www.codingeverything.com/2013/01/firing-datagridview-cellvaluechanged.html

        Dim RowNo As Integer = e.RowIndex
        Dim RowCount As Integer = dgvPointDisplay.RowCount
        If RowNo = RowCount - 1 Then
            'This is the last user-add row - not yet editable!
        Else
            Dim ColNo As Integer = e.ColumnIndex
            Dim DistrbNo As Integer = SelDistrib
            Dim AnnotNo As Integer = RowNo
            'Dim SelPointAnnotInfo = From item In ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
            Select Case ColNo
                Case 1 'Show Line
                    Select Case RowNo
                        Case 0
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 1
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 2
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 3
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 4
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 5
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 6
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 7
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                    End Select
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case 4 'Show Circle
                    Select Case RowNo
                        Case 0
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 1
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 2
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 3
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 4
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 5
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 6
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 7
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                    End Select
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case 8 'Show Text
                    Select Case RowNo
                        Case 0
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 1
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 2
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 3
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 4
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 5
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 6
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 7
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Show>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                    End Select
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case 11 'Show Probability value
                    Select Case RowNo
                        Case 0
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 1
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 2
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 3
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 4
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 5
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 6
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 7
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                    End Select
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case 13 'Show Random Variable value
                    Select Case RowNo
                        Case 0
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 1
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 2
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 3
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 4
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 5
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 6
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                        Case 7
                            myParent.ChartInfo.<ChartSettings>.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = dgvPointDisplay.Rows(RowNo).Cells(ColNo).Value
                    End Select
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                    'Case 0 'Show
                    '    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                    '        SelPointAnnotInfo.<Show>.Value = "true"
                    '    Else
                    '        SelPointAnnotInfo.<Show>.Value = "false"
                    '    End If
                    '    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(ChartInfo.ToString, True) 'Update the XML display
                    '    ApplyAnnotation()
                    '    'Case 0 'PDF
            End Select
        End If

    End Sub

    Private Sub EndPointDisplayEditMode(sender As System.Object, e As EventArgs) Handles dgvPointDisplay.CurrentCellDirtyStateChanged
        'This method is used to make changes to the checkboxes immediate - CellContentClick event triggered.
        'For more info: http://www.codingeverything.com/2013/01/firing-datagridview-cellvaluechanged.html
        If dgvPointDisplay.IsCurrentCellDirty Then
            dgvPointDisplay.CommitEdit(DataGridViewDataErrorContexts.Commit)
        End If
    End Sub


    Private Sub dgvPointDisplay_EditingControlShowing(sender As Object, e As DataGridViewEditingControlShowingEventArgs) Handles dgvPointDisplay.EditingControlShowing

    End Sub

    Private Sub dgvPointDisplay_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointDisplay.CellClick
        Dim CellCol As Integer = e.ColumnIndex
        If CellCol = 2 Then 'The line color has changed.
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.Color = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor
            'ColorDialog1.ShowDialog()
            Dim Result As DialogResult = ColorDialog1.ShowDialog()
            If Result = DialogResult.OK Then
                If dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                    'The marker color has not been changed.
                Else
                    dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                    If CellRow = 0 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 1 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 2 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 3 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 4 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 5 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 6 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 7 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                End If
            End If

        ElseIf CellCol = 5 Then 'The circle color has changed.
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.Color = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor
            'ColorDialog1.ShowDialog()
            Dim Result As DialogResult = ColorDialog1.ShowDialog()
            If Result = DialogResult.OK Then
                If dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                    'The marker color has not been changed.
                Else
                    dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                    If CellRow = 0 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 1 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 2 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 3 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 4 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 5 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 6 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 7 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                End If
            End If

        ElseIf CellCol = 9 Then 'The text font has changed.
            Dim CellRow As Integer = e.RowIndex
            FontDialog1.Font = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.Font
            Dim Result As DialogResult = FontDialog1.ShowDialog()
            If Result = DialogResult.OK Then
                'If dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.Font = FontDialog1.Font Then
                '    'The font has not been changed.
                'Else
                '    dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.Font = FontDialog1.Font
                'End If
                dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.Font = FontDialog1.Font
                If CellRow = 0 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 1 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 2 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 3 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 4 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 5 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 6 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                ElseIf CellRow = 7 Then
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Size>.Value = FontDialog1.Font.Size
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<FontName>.Value = FontDialog1.Font.Name
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Bold>.Value = FontDialog1.Font.Bold
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Italic>.Value = FontDialog1.Font.Italic
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                    myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Underline>.Value = FontDialog1.Font.Underline
                End If
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
            End If

        ElseIf CellCol = 10 Then 'The text color has changed.
            Dim CellRow As Integer = e.RowIndex
            ColorDialog1.Color = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor
            'ColorDialog1.ShowDialog()
            Dim Result As DialogResult = ColorDialog1.ShowDialog()
            If Result = DialogResult.OK Then
                If dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color Then
                    'The marker color has not been changed.
                Else
                    dgvPointDisplay.Rows(CellRow).Cells(CellCol).Style.BackColor = ColorDialog1.Color
                    If CellRow = 0 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 1 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 2 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 3 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 4 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 5 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 6 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    ElseIf CellRow = 7 Then
                        myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                End If
            End If

        End If
    End Sub

    Private Sub dgvPointDisplay_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointDisplay.CellEndEdit

        Dim CellCol As Integer = e.ColumnIndex
        If CellCol = 1 Then 'The show line selection has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Show As Boolean = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Show>.Value = Show
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Show>.Value = Show
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 3 Then 'The line thickness has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Thickness As Integer = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value = Thickness
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value = Thickness
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 4 Then 'The show circle has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Show As Boolean = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value = Show
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value = Show
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 6 Then 'The circle thickness has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Thickness As Integer = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Thickness>.Value = Thickness
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Thickness>.Value = Thickness
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 7 Then 'The circle size has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Size As Integer = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Size>.Value = Size
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Size>.Value = Size
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 8 Then 'The show text has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Show As Boolean = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Show>.Value = Show
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Show>.Value = Show
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 11 Then 'The show prob value has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Show As Boolean = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value = Show
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value = Show
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 12 Then 'The prob format has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Format As String = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ProbFormat>.Value = Format
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ProbFormat>.Value = Format
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 13 Then 'The show RV value has changed
            Dim CellRow As Integer = e.RowIndex
            Dim Show As Boolean = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = Show
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = Show
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        ElseIf CellCol = 14 Then 'The RV format has changed
            Dim CellRow As Integer = e.RowIndex
            Dim RVFormat As String = dgvPointDisplay.Rows(CellRow).Cells(CellCol).Value
            If CellRow = 0 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 1 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 2 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 3 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMFLn>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 4 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 5 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 6 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<RVFormat>.Value = RVFormat
            ElseIf CellRow = 7 Then
                myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<RVFormat>.Value = RVFormat
            End If
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

        End If
    End Sub

    Private Sub btnUpdateAnnot_Click(sender As Object, e As EventArgs) Handles btnUpdateAnnot.Click
        'Update the Annotation

        'UpdateAnnotationTabSettings()

        RecalcPointAnnot()

        myParent.Chart1.Annotations.Clear()
        myParent.ApplyAreaShading()
        UpdateAnnotation()
    End Sub

    'For Testing:

    'Private Sub ApplyPdfAreaAnnot()
    '    'Apply only the PdfArea Annotation:

    '    myChart.Annotations.Clear()

    '    'Dim NumberFormat As String = ChartInfo.<ChartSettings>.<AnnotationSettings>.<PDF>.<Text>.<Format>.Value


    '    Dim XVal As Double

    '    Dim PdfArea As Integer = myChart.ChartAreas.IndexOf("PdfArea")
    '    If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
    '        'Add a series used to plot vertical bars on the CDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("PdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named CdfVerBar does not exist
    '            myChart.Series.Add("PdfAreaVertBar")
    '            myChart.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("PdfAreaVertBar").Color = Color.Orange
    '            myChart.Series("PdfAreaVertBar").ChartArea = "PdfArea"
    '            myChart.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", "2")
    '            myChart.Series("PdfAreaVertBar").IsVisibleInLegend = False
    '            'https://social.msdn.microsoft.com/Forums/en-US/fb6da2c5-bb8e-40cc-bfe4-68bd76e1d826/chart-controls-faq?forum=MSWinWebChart
    '        Else
    '            myChart.Series("PdfAreaVertBar").Points.Clear()
    '        End If

    '        Dim NumberFormat As String = ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value

    '        For Each item In PointAnnotInfo
    '            XVal = item.<RandVarValue>.Value
    '            'If XVal = 0 Then XVal = 0.00001
    '            If item.<PDF>.Value = "true" Then 'Add this annotation to the PDF Area
    '                'Add the vertical bar:
    '                Dim PdfPoint As New DataVisualization.Charting.DataPoint
    '                PdfPoint.XValue = XVal
    '                Main.Message.Add("PdfPoint.XValue = " & XVal & vbCrLf)
    '                PdfPoint.SetValueY(item.<ProbabilityDensity>.Value)
    '                myChart.Series("PdfAreaVertBar").Points.Add(PdfPoint)
    '                'Main.Message.Add(" myChart.Series(PdfAreaVertBar).Points.Count = " & myChart.Series("PdfAreaVertBar").Points.Count & vbCrLf)
    '                'Add the label:
    '                Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                PdfAnnot.AxisX = myChart.ChartAreas("PdfArea").AxisX
    '                PdfAnnot.AxisY = myChart.ChartAreas("PdfArea").AxisY
    '                PdfAnnot.AnchorX = item.<RandVarValue>.Value
    '                PdfAnnot.AnchorY = item.<ProbabilityDensity>.Value
    '                PdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                PdfAnnot.Text = item.<Label>.Value & " (" & Format(XVal, NumberFormat) & ")"
    '                PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(PdfAnnot)
    '            End If
    '        Next
    '    End If

    'End Sub

    Public Sub UpdateAnnotationSettings()
        'Update the CDF Prob, Rev CDF Prob, RV Val, and Prob Dens for each of the annotations defiend for the selected distribution.

        dgvPointAnnot.AllowUserToAddRows = False
        Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
        Dim CdfProb As Double
        Dim RevCdfProb As Double
        Dim RVValue As Double
        Dim ProbDens As Double
        Dim RowNo As Integer = 0
        For Each item In SelPointAnnotInfo
            Select Case item.<Type>.Value
                Case "Probability <="
                    CdfProb = item.<CdfProbability>.Value
                    RVValue = GetInvCdfValue(CdfProb)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Probability >"
                    RevCdfProb = item.<RevCdfProbability>.Value
                    RVValue = GetInvRevCdfValue(RevCdfProb)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Random Variable Value"
                    RVValue = item.<RandVarValue>.Value
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Mean"
                    RVValue = SelectedDistrib.Mean
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Mode"
                    RVValue = SelectedDistrib.Mode
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Median"
                    RVValue = SelectedDistrib.Median
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "Standard Deviation"
                    Dim Mean As Double = SelectedDistrib.Mean
                    Dim StdDev As Double = SelectedDistrib.StdDev
                    Dim Param As Double = item.<Parameter>.Value
                    RVValue = Mean + Param * StdDev
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<RandVarValue>.Value = RVValue
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "User Defined Value 1"
                    RVValue = item.<RandVarValue>.Value
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case "User Defined Value 2"
                    RVValue = item.<RandVarValue>.Value
                    CdfProb = SelectedDistrib.CDF(RVValue)
                    RevCdfProb = SelectedDistrib.RevCDF(RVValue)
                    ProbDens = SelectedDistrib.PDF(RVValue)
                    item.<CdfProbability>.Value = CdfProb
                    item.<RevCdfProbability>.Value = RevCdfProb
                    item.<ProbabilityDensity>.Value = ProbDens
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCdfProb
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = ProbDens

                Case Else
                    Main.Message.AddWarning("Unknown annotation type: " & item.<Type>.Value & vbCrLf)
            End Select
            RowNo += 1
        Next

        dgvPointAnnot.AllowUserToAddRows = True

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

    End Sub

    Public Sub UpdateAnnotation()
        'Update the chart annotation.

        'Get the annotation fonts:
        Dim myFontStyle As FontStyle
        Dim myFontSize As Single
        Dim myFontName As String

        myParent.Chart1.Annotations.Clear()

        'Get PMF annotation font and color:
        myFontStyle = FontStyle.Regular
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<FontName>.Value
        Dim PmfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
        Dim PmfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Color>.Value)

        Dim ProbFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value
        Dim RVFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value

        'PDF Area Annotation:
        Dim PdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("PdfArea")
        If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
            'Get PDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<FontName>.Value
            Dim PdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim PdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Color>.Value)
            'Add a series used to plot vertical bars on the CDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("PdfAreaVertBar")
            If IndexNo = -1 Then 'Series named PdfVerBar does not exist
                myParent.Chart1.Series.Add("PdfAreaVertBar")
            Else
                myParent.Chart1.Series("PdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("PdfAreaVertBar").ChartArea = "PdfArea"
            myParent.Chart1.Series("PdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("PdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("PdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("PdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("PdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("PdfAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<PDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the PDF Area
                    'Add the vertical bar:
                    Dim PdfPoint As New DataVisualization.Charting.DataPoint
                    PdfPoint.XValue = item.<RandVarValue>.Value
                    PdfPoint.SetValueY(item.<ProbabilityDensity>.Value)
                    myParent.Chart1.Series("PdfAreaVertBar").Points.Add(PdfPoint)
                    'Add the label:
                    Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
                    PdfAnnot.AxisX = myParent.Chart1.ChartAreas("PdfArea").AxisX
                    PdfAnnot.AxisY = myParent.Chart1.ChartAreas("PdfArea").AxisY
                    PdfAnnot.AnchorX = item.<RandVarValue>.Value
                    PdfAnnot.AnchorY = item.<ProbabilityDensity>.Value
                    PdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    PdfAnnot.Font = PdfAnnotFont
                    PdfAnnot.ForeColor = PdfAnnotColor
                    myParent.Chart1.Annotations.Add(PdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("PdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("PdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("PdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'PDFLn Area Annotation:
        Dim PdfLnArea As Integer = myParent.Chart1.ChartAreas.IndexOf("PdfLnArea")
        If PdfLnArea > -1 Then 'Annotation can be added to the PdfLn Area
            'Get PDFLn annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<FontName>.Value
            Dim PdfLnAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim PdfLnAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<Color>.Value)
            'Add a series used to plot vertical bars on the PDFLn chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("PdfLnAreaVertBar")
            If IndexNo = -1 Then 'Series named PdfVerBar does not exist
                myParent.Chart1.Series.Add("PdfLnAreaVertBar")
            Else
                myParent.Chart1.Series("PdfLnAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("PdfLnAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("PdfLnAreaVertBar").ChartArea = "PdfLnArea"
            myParent.Chart1.Series("PdfLnAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Color>.Value)
            myParent.Chart1.Series("PdfLnAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("PdfLnAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("PdfLnAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("PdfLnAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Size>.Value
            myParent.Chart1.Series("PdfLnAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("PdfLnAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("PdfLnAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("PdfLnAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<PDFLn>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the PDFLn Area
                    'Add the vertical bar:
                    Dim PdfLnPoint As New DataVisualization.Charting.DataPoint
                    PdfLnPoint.XValue = item.<RandVarValue>.Value
                    PdfLnPoint.SetValueY(Math.Log(item.<ProbabilityDensity>.Value))
                    myParent.Chart1.Series("PdfLnAreaVertBar").Points.Add(PdfLnPoint)
                    'Add the label:
                    Dim PdfLnAnnot As New DataVisualization.Charting.TextAnnotation
                    PdfLnAnnot.AxisX = myParent.Chart1.ChartAreas("PdfLnArea").AxisX
                    PdfLnAnnot.AxisY = myParent.Chart1.ChartAreas("PdfLnArea").AxisY
                    PdfLnAnnot.AnchorX = item.<RandVarValue>.Value
                    PdfLnAnnot.AnchorY = Math.Log(item.<ProbabilityDensity>.Value)
                    PdfLnAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            PdfLnAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(Math.Log(item.<ProbabilityDensity>.Value)), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfLnAnnot.Text = item.<Label>.Value & " (" & Format(Val(Math.Log(item.<ProbabilityDensity>.Value)), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDFLn>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            PdfLnAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfLnAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    PdfLnAnnot.Font = PdfLnAnnotFont
                    PdfLnAnnot.ForeColor = PdfLnAnnotColor
                    myParent.Chart1.Annotations.Add(PdfLnAnnot)
                End If
            Next
            If myParent.Chart1.Series("PdfLnAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("PdfLnAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("PdfLnAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'CDF Area Annotation:
        Dim CdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("CdfArea")
        If CdfArea > -1 Then 'Annotation can be added to the Cdf Area
            'Get CDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<FontName>.Value
            Dim CdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim CdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the CDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("CdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named CdfVerBar does not exist
                myParent.Chart1.Series.Add("CdfAreaVertBar")
            Else
                myParent.Chart1.Series("CdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("CdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("CdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("CdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("CdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("CdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("CdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("CdfAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<CDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the CDF Area
                    'Add the vertical bar:
                    Dim CdfPoint As New DataVisualization.Charting.DataPoint
                    CdfPoint.XValue = item.<RandVarValue>.Value
                    CdfPoint.SetValueY(item.<CdfProbability>.Value)
                    myParent.Chart1.Series("CdfAreaVertBar").Points.Add(CdfPoint)
                    'Add the label:
                    Dim CdfAnnot As New DataVisualization.Charting.TextAnnotation
                    CdfAnnot.AxisX = myParent.Chart1.ChartAreas("CdfArea").AxisX
                    CdfAnnot.AxisY = myParent.Chart1.ChartAreas("CdfArea").AxisY
                    CdfAnnot.AnchorX = item.<RandVarValue>.Value
                    CdfAnnot.AnchorY = item.<CdfProbability>.Value
                    CdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    CdfAnnot.Font = CdfAnnotFont
                    CdfAnnot.ForeColor = CdfAnnotColor
                    myParent.Chart1.Annotations.Add(CdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("CdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("CdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("CdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'RevCDF Area Annotation:
        Dim RevCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("RevCdfArea")
        If RevCdfArea > -1 Then 'Annotation can be added to the RevCdf Area
            'Get RevCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<FontName>.Value
            Dim RevCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim RevCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the RevCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("RevCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named RevCdfVerBar does not exist
                myParent.Chart1.Series.Add("RevCdfAreaVertBar")
            Else
                myParent.Chart1.Series("RevCdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("RevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            'myParent.Chart1.Series("RevCdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("RevCdfAreaVertBar").ChartArea = "RevCdfArea"
            myParent.Chart1.Series("RevCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("RevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("RevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("RevCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<RevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the RevCDF Area
                    'Add the vertical bar:
                    Dim RevCdfPoint As New DataVisualization.Charting.DataPoint
                    RevCdfPoint.XValue = item.<RandVarValue>.Value
                    RevCdfPoint.SetValueY(item.<RevCdfProbability>.Value)
                    myParent.Chart1.Series("RevCdfAreaVertBar").Points.Add(RevCdfPoint)
                    'Add the label:
                    Dim RevCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    RevCdfAnnot.AxisX = myParent.Chart1.ChartAreas("RevCdfArea").AxisX
                    RevCdfAnnot.AxisY = myParent.Chart1.ChartAreas("RevCdfArea").AxisY
                    RevCdfAnnot.AnchorX = item.<RandVarValue>.Value
                    RevCdfAnnot.AnchorY = item.<RevCdfProbability>.Value
                    RevCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    RevCdfAnnot.Font = RevCdfAnnotFont
                    RevCdfAnnot.ForeColor = RevCdfAnnotColor
                    myParent.Chart1.Annotations.Add(RevCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("RevCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("RevCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("RevCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'InvCDF Area Annotation:
        Dim InvCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("InvCdfArea")
        If InvCdfArea > -1 Then 'Annotation can be added to the InvCdf Area
            'Get InvCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<FontName>.Value
            Dim InvCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim InvCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the InvCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("InvCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named InvCdfVerBar does not exist
                myParent.Chart1.Series.Add("InvCdfAreaVertBar")
            Else
                myParent.Chart1.Series("InvCdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("InvCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("InvCdfAreaVertBar").ChartArea = "InvCdfArea"
            myParent.Chart1.Series("InvCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("InvCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("InvCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("InvCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<InvCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvCDF Area
                    'Add the vertical bar:
                    Dim InvCdfPoint As New DataVisualization.Charting.DataPoint
                    InvCdfPoint.XValue = item.<CdfProbability>.Value
                    InvCdfPoint.SetValueY(item.<RandVarValue>.Value)
                    myParent.Chart1.Series("InvCdfAreaVertBar").Points.Add(InvCdfPoint)
                    'Add the label:
                    Dim InvCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    InvCdfAnnot.AxisX = myParent.Chart1.ChartAreas("InvCdfArea").AxisX
                    InvCdfAnnot.AxisY = myParent.Chart1.ChartAreas("InvCdfArea").AxisY
                    InvCdfAnnot.AnchorX = item.<CdfProbability>.Value
                    InvCdfAnnot.AnchorY = item.<RandVarValue>.Value
                    InvCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    InvCdfAnnot.Font = InvCdfAnnotFont
                    InvCdfAnnot.ForeColor = InvCdfAnnotColor
                    myParent.Chart1.Annotations.Add(InvCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("InvCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("InvCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("InvCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'InvRevCDF Area Annotation:
        Dim InvRevCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("InvRevCdfArea")
        If InvRevCdfArea > -1 Then 'Annotation can be added to the InvRevCdf Area
            'Get InvRevCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<FontName>.Value
            Dim InvRevCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim InvRevCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the InvRevCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("InvRevCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named InvRevCdfVerBar does not exist
                myParent.Chart1.Series.Add("InvRevCdfAreaVertBar")
            Else
                myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("InvRevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("InvRevCdfAreaVertBar").ChartArea = "InvRevCdfArea"
            myParent.Chart1.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("InvRevCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In myParent.PointAnnotInfo
                If item.<InvRevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvRevCDF Area
                    'Add the vertical bar:
                    Dim InvRevCdfPoint As New DataVisualization.Charting.DataPoint
                    InvRevCdfPoint.XValue = item.<RevCdfProbability>.Value
                    InvRevCdfPoint.SetValueY(item.<RandVarValue>.Value)
                    myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Add(InvRevCdfPoint)
                    'Add the label:
                    Dim InvRevCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    InvRevCdfAnnot.AxisX = myParent.Chart1.ChartAreas("InvRevCdfArea").AxisX
                    InvRevCdfAnnot.AxisY = myParent.Chart1.ChartAreas("InvRevCdfArea").AxisY
                    InvRevCdfAnnot.AnchorX = item.<RevCdfProbability>.Value
                    InvRevCdfAnnot.AnchorY = item.<RandVarValue>.Value
                    InvRevCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    InvRevCdfAnnot.Font = InvRevCdfAnnotFont
                    InvRevCdfAnnot.ForeColor = InvRevCdfAnnotColor
                    myParent.Chart1.Annotations.Add(InvRevCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("InvRevCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("InvRevCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If
    End Sub

    Private Sub ApplyAnnotation_XXX(ByRef PointAnnotInfo As IEnumerable(Of XElement)) 'NOTE: This is now done from within frmChart.
        'Apply the Annotation
        'COPIED FROM frmChart
        'https://docs.microsoft.com/en-us/previous-versions/dd489233(v=vs.140)

        'myChart.Annotations.Clear()

        'Get the annotation fonts:
        Dim myFontStyle As FontStyle
        Dim myFontSize As Single
        Dim myFontName As String

        'Get PMF annotation font and color:
        myFontStyle = FontStyle.Regular
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Size>.Value
        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<FontName>.Value
        Dim PmfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
        Dim PmfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Color>.Value)

        Dim ProbFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value
        Dim RVFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value

        'PDF Area Annotation:
        Dim PdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("PdfArea")
        If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
            'Get PDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<FontName>.Value
            Dim PdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim PdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Color>.Value)
            'Add a series used to plot vertical bars on the CDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("PdfAreaVertBar")
            If IndexNo = -1 Then 'Series named PdfVerBar does not exist
                myParent.Chart1.Series.Add("PdfAreaVertBar")
                'myChart.Series.Insert(0, "PdfAreaVertBar")
                'myChart.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                'myChart.Series("PdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
                'myChart.Series("PdfAreaVertBar").ChartArea = "PdfArea"
                'myChart.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
                'If ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value = True Then
                '    myChart.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
                'Else
                '    myChart.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
                'End If
                'myChart.Series("PdfAreaVertBar").MarkerSize = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value
                'myChart.Series("PdfAreaVertBar").MarkerBorderWidth = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value
                'myChart.Series("PdfAreaVertBar").MarkerBorderColor = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value)
                'myChart.Series("PdfAreaVertBar").MarkerColor = Color.Transparent
                'myChart.Series("PdfAreaVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("PdfAreaVertBar").Points.Clear()
                'myChart.Series("PdfAreaVertBar").ChartArea = "PdfArea"
                'myChart.Series("PdfAreaVertBar").IsVisibleInLegend = False
                'myChart.Series("PdfAreaVertBar").SetCustomProperty("MinPixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
                'myChart.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
                'myChart.Series("PdfAreaVertBar").MarkerSize = 12
                'myChart.Series("PdfAreaVertBar").MarkerBorderWidth = 2
            End If
            myParent.Chart1.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("PdfAreaVertBar").ChartArea = "PdfArea"
            myParent.Chart1.Series("PdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("PdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("PdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("PdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("PdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("PdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("PdfAreaVertBar").IsVisibleInLegend = False

            For Each item In PointAnnotInfo
                If item.<PDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the PDF Area
                    'Add the vertical bar:
                    Dim PdfPoint As New DataVisualization.Charting.DataPoint
                    PdfPoint.XValue = item.<RandVarValue>.Value
                    PdfPoint.SetValueY(item.<ProbabilityDensity>.Value)
                    myParent.Chart1.Series("PdfAreaVertBar").Points.Add(PdfPoint)
                    'Add the label:
                    Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
                    PdfAnnot.AxisX = myParent.Chart1.ChartAreas("PdfArea").AxisX
                    PdfAnnot.AxisY = myParent.Chart1.ChartAreas("PdfArea").AxisY
                    PdfAnnot.AnchorX = item.<RandVarValue>.Value
                    PdfAnnot.AnchorY = item.<ProbabilityDensity>.Value
                    'PdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
                    PdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            'PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability Density value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            PdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    'PdfAnnot.Text = item.<Label>.Value & " (" & Format(PdfPoint.XValue, RVFormat) & ")"
                    'PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                    PdfAnnot.Font = PdfAnnotFont
                    PdfAnnot.ForeColor = PdfAnnotColor
                    myParent.Chart1.Annotations.Add(PdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("PdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("PdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("PdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'CDF Area Annotation:
        Dim CdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("CdfArea")
        If CdfArea > -1 Then 'Annotation can be added to the Cdf Area
            'Get CDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<FontName>.Value
            Dim CdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim CdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the CDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("CdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named CdfVerBar does not exist
                myParent.Chart1.Series.Add("CdfAreaVertBar")
                'myChart.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                'myChart.Series("CdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value)
                'myChart.Series("CdfAreaVertBar").ChartArea = "CdfArea"
                'myChart.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value)
                'myChart.Series("CdfAreaVertBar").IsVisibleInLegend = False
                'If ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value = True Then
                '    myChart.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
                'Else
                '    myChart.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
                'End If
                'myChart.Series("CdfAreaVertBar").MarkerSize = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value
                'myChart.Series("CdfAreaVertBar").MarkerBorderWidth = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value
                'myChart.Series("CdfAreaVertBar").MarkerBorderColor = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value)
                'myChart.Series("CdfAreaVertBar").MarkerColor = Color.Transparent
                'myChart.Series("CdfAreaVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("CdfAreaVertBar").Points.Clear()
            End If
            myParent.Chart1.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("CdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("CdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("CdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("CdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("CdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("CdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("CdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("CdfAreaVertBar").IsVisibleInLegend = False

            For Each item In PointAnnotInfo
                If item.<CDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the CDF Area
                    'Add the vertical bar:
                    Dim CdfPoint As New DataVisualization.Charting.DataPoint
                    CdfPoint.XValue = item.<RandVarValue>.Value
                    CdfPoint.SetValueY(item.<CdfProbability>.Value)
                    myParent.Chart1.Series("CdfAreaVertBar").Points.Add(CdfPoint)
                    'Add the label:
                    Dim CdfAnnot As New DataVisualization.Charting.TextAnnotation
                    CdfAnnot.AxisX = myParent.Chart1.ChartAreas("CdfArea").AxisX
                    CdfAnnot.AxisY = myParent.Chart1.ChartAreas("CdfArea").AxisY
                    CdfAnnot.AnchorX = item.<RandVarValue>.Value
                    CdfAnnot.AnchorY = item.<CdfProbability>.Value
                    'CdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
                    CdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    'CdfAnnot.Text = item.<Label>.Value & " (" & Format(CdfPoint.XValue, RVFormat) & ")"
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            'CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            CdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    'CdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                    CdfAnnot.Font = CdfAnnotFont
                    CdfAnnot.ForeColor = CdfAnnotColor
                    myParent.Chart1.Annotations.Add(CdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("CdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("CdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("CdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'RevCDF Area Annotation:
        Dim RevCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("RevCdfArea")
        If RevCdfArea > -1 Then 'Annotation can be added to the RevCdf Area
            'Get RevCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<FontName>.Value
            Dim RevCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim RevCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the RevCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("RevCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named RevCdfVerBar does not exist
                myParent.Chart1.Series.Add("RevCdfAreaVertBar")
                'myChart.Series("RevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                'myChart.Series("RevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
                'myChart.Series("RevCdfAreaVertBar").ChartArea = "RevCdfArea"
                'myChart.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
                'myChart.Series("RevCdfAreaVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("RevCdfAreaVertBar").Points.Clear()
                'myChart.Series("RevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
                'myChart.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
            End If
            myParent.Chart1.Series("RevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("RevCdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("RevCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("RevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("RevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("RevCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("RevCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In PointAnnotInfo
                If item.<RevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the RevCDF Area
                    'Add the vertical bar:
                    Dim RevCdfPoint As New DataVisualization.Charting.DataPoint
                    RevCdfPoint.XValue = item.<RandVarValue>.Value
                    RevCdfPoint.SetValueY(item.<RevCdfProbability>.Value)
                    myParent.Chart1.Series("RevCdfAreaVertBar").Points.Add(RevCdfPoint)
                    'Add the label:
                    Dim RevCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    RevCdfAnnot.AxisX = myParent.Chart1.ChartAreas("RevCdfArea").AxisX
                    RevCdfAnnot.AxisY = myParent.Chart1.ChartAreas("RevCdfArea").AxisY
                    RevCdfAnnot.AnchorX = item.<RandVarValue>.Value
                    RevCdfAnnot.AnchorY = item.<RevCdfProbability>.Value
                    'RevCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
                    RevCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    'RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(RevCdfPoint.XValue, RVFormat) & ")"
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            'RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            RevCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    'RevCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                    RevCdfAnnot.Font = RevCdfAnnotFont
                    RevCdfAnnot.ForeColor = RevCdfAnnotColor
                    myParent.Chart1.Annotations.Add(RevCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("RevCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("RevCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("RevCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'InvCDF Area Annotation:
        Dim InvCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("InvCdfArea")
        If InvCdfArea > -1 Then 'Annotation can be added to the InvCdf Area
            'Get InvCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<FontName>.Value
            Dim InvCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim InvCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the InvCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("InvCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named InvCdfVerBar does not exist
                myParent.Chart1.Series.Add("InvCdfAreaVertBar")
                'myChart.Series("InvCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                'myChart.Series("InvCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
                'myChart.Series("InvCdfAreaVertBar").ChartArea = "InvCdfArea"
                'myChart.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
                'myChart.Series("InvCdfAreaVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("InvCdfAreaVertBar").Points.Clear()
                'myChart.Series("InvCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
                'myChart.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
            End If
            myParent.Chart1.Series("InvCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("InvCdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("InvCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("InvCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("InvCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("InvCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("InvCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In PointAnnotInfo
                If item.<InvCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvCDF Area
                    'Add the vertical bar:
                    Dim InvCdfPoint As New DataVisualization.Charting.DataPoint
                    InvCdfPoint.XValue = item.<CdfProbability>.Value
                    InvCdfPoint.SetValueY(item.<RandVarValue>.Value)
                    myParent.Chart1.Series("InvCdfAreaVertBar").Points.Add(InvCdfPoint)
                    'Add the label:
                    Dim InvCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    InvCdfAnnot.AxisX = myParent.Chart1.ChartAreas("InvCdfArea").AxisX
                    InvCdfAnnot.AxisY = myParent.Chart1.ChartAreas("InvCdfArea").AxisY
                    InvCdfAnnot.AnchorX = item.<CdfProbability>.Value
                    InvCdfAnnot.AnchorY = item.<RandVarValue>.Value
                    'InvCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
                    InvCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    'InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            'InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    'InvCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                    InvCdfAnnot.Font = InvCdfAnnotFont
                    InvCdfAnnot.ForeColor = InvCdfAnnotColor
                    myParent.Chart1.Annotations.Add(InvCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("InvCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("InvCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("InvCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'InvRevCDF Area Annotation:
        Dim InvRevCdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("InvRevCdfArea")
        If InvRevCdfArea > -1 Then 'Annotation can be added to the InvRevCdf Area
            'Get InvRevCDF annotation font and color:
            myFontStyle = FontStyle.Regular
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
            myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Size>.Value
            myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<FontName>.Value
            Dim InvRevCdfAnnotFont As New Font(myFontName, myFontSize, myFontStyle)
            Dim InvRevCdfAnnotColor As Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Color>.Value)

            'Add a series used to plot vertical bars on the InvRevCDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("InvRevCdfAreaVertBar")
            ProbFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ProbFormat>.Value
            RVFormat = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<RVFormat>.Value
            If IndexNo = -1 Then 'Series named InvRevCdfVerBar does not exist
                myParent.Chart1.Series.Add("InvRevCdfAreaVertBar")
                'myChart.Series("InvRevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                'myChart.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)
                'myChart.Series("InvRevCdfAreaVertBar").ChartArea = "InvRevCdfArea"
                'myChart.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
                'myChart.Series("InvRevCdfAreaVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Clear()
                'myChart.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)
                'myChart.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
            End If
            myParent.Chart1.Series("InvRevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            myParent.Chart1.Series("InvRevCdfAreaVertBar").ChartArea = "CdfArea"
            myParent.Chart1.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)
            myParent.Chart1.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
            If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value = True Then
                myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
            Else
                myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
            End If
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Size>.Value
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerBorderWidth = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Thickness>.Value
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerBorderColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Color>.Value)
            myParent.Chart1.Series("InvRevCdfAreaVertBar").MarkerColor = Color.Transparent
            myParent.Chart1.Series("InvRevCdfAreaVertBar").IsVisibleInLegend = False

            For Each item In PointAnnotInfo
                If item.<InvRevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvRevCDF Area
                    'Add the vertical bar:
                    Dim InvRevCdfPoint As New DataVisualization.Charting.DataPoint
                    InvRevCdfPoint.XValue = item.<RevCdfProbability>.Value
                    InvRevCdfPoint.SetValueY(item.<RandVarValue>.Value)
                    myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Add(InvRevCdfPoint)
                    'Add the label:
                    Dim InvRevCdfAnnot As New DataVisualization.Charting.TextAnnotation
                    InvRevCdfAnnot.AxisX = myParent.Chart1.ChartAreas("InvRevCdfArea").AxisX
                    InvRevCdfAnnot.AxisY = myParent.Chart1.ChartAreas("InvRevCdfArea").AxisY
                    InvRevCdfAnnot.AnchorX = item.<RevCdfProbability>.Value
                    InvRevCdfAnnot.AnchorY = item.<RandVarValue>.Value
                    'InvRevCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
                    InvRevCdfAnnot.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    'InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                    If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value = True Then 'Show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                        End If
                    Else 'Do not show the Probability value
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value = True Then 'Show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        Else 'Do not show the Random Variable value
                            InvRevCdfAnnot.Text = item.<Label>.Value
                        End If
                    End If
                    'InvRevCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                    InvRevCdfAnnot.Font = InvRevCdfAnnotFont
                    InvRevCdfAnnot.ForeColor = InvRevCdfAnnotColor
                    myParent.Chart1.Annotations.Add(InvRevCdfAnnot)
                End If
            Next
            If myParent.Chart1.Series("InvRevCdfAreaVertBar").Points.Count = 1 Then
                If myParent.Chart1.Series("InvRevCdfAreaVertBar").Points(0).XValue = 0 Then myParent.Chart1.Series("InvRevCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
            End If
        End If

        'Main.Message.Add("Chart: Completed ApplyAnnotation()" & vbCrLf)

    End Sub



    'Private Sub ApplyAnnotation()
    '    'Update the Annotation
    '    'NOT UPDATING THE ANNOTATION BARS - COPIED ApplyAnnotation(PointAnnotInfo) from frmChart (see method above)

    '    myChart.Annotations.Clear()

    '    Dim ProbFormat As String = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value
    '    Dim RVFormat As String = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value

    '    Dim PdfArea As Integer = myChart.ChartAreas.IndexOf("PdfArea")
    '    If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
    '        'Add a series used to plot vertical bars on the CDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("PdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named CdfVerBar does not exist
    '            myChart.Series.Add("PdfAreaVertBar")
    '            myChart.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("PdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
    '            myChart.Series("PdfAreaVertBar").ChartArea = "PdfArea"
    '            myChart.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
    '            myChart.Series("PdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("PdfAreaVertBar").Points.Clear()
    '            myChart.Series("PdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
    '            myChart.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value)
    '            Main.Message.Add("PdfAreaVertBar Line width: " & ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value & vbCrLf)
    '        End If

    '        For Each item In PointAnnotInfo
    '            If item.<PDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the PDF Area
    '                'Add the vertical bar:
    '                Dim PdfPoint As New DataVisualization.Charting.DataPoint
    '                PdfPoint.XValue = item.<RandVarValue>.Value
    '                PdfPoint.SetValueY(item.<ProbabilityDensity>.Value)
    '                myChart.Series("PdfAreaVertBar").Points.Add(PdfPoint)
    '                Main.Message.Add("PdfAreaVertBar points: " & myChart.Series("PdfAreaVertBar").Points.Count & vbCrLf)

    '                'Add the label:
    '                Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                PdfAnnot.AxisX = myChart.ChartAreas("PdfArea").AxisX
    '                PdfAnnot.AxisY = myChart.ChartAreas("PdfArea").AxisY
    '                PdfAnnot.AnchorX = item.<RandVarValue>.Value
    '                PdfAnnot.AnchorY = item.<ProbabilityDensity>.Value
    '                PdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                PdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
    '                PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(PdfAnnot)
    '            End If
    '        Next
    '        If myChart.Series("PdfAreaVertBar").Points.Count = 1 Then
    '            If myChart.Series("PdfAreaVertBar").Points(0).XValue = 0 Then myChart.Series("PdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
    '        End If
    '    End If

    '    Dim CdfArea As Integer = myChart.ChartAreas.IndexOf("CdfArea")
    '    If CdfArea > -1 Then 'Annotation can be added to the Cdf Area
    '        'Add a series used to plot vertical bars on the CDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("CdfAreaVertBar")
    '        ProbFormat = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ProbFormat>.Value
    '        RVFormat = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<RVFormat>.Value
    '        If IndexNo = -1 Then 'Series named CdfVerBar does not exist
    '            myChart.Series.Add("CdfAreaVertBar")
    '            myChart.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("CdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<ÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("CdfAreaVertBar").ChartArea = "CdfArea"
    '            myChart.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value)
    '            myChart.Series("CdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("CdfAreaVertBar").Points.Clear()
    '            myChart.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("CdfAreaVertBar").ChartArea = "CdfArea"
    '            myChart.Series("CdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<ÇDF>.<Line>.<Color>.Value)
    '            Main.Message.Add("CdfAreaVertBar Line color: " & ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value & vbCrLf)
    '            myChart.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value)
    '            Main.Message.Add("CdfAreaVertBar Line width: " & ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value & vbCrLf)
    '        End If

    '        For Each item In PointAnnotInfo
    '            If item.<CDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the CDF Area
    '                'Add the vertical bar:
    '                Dim CdfPoint As New DataVisualization.Charting.DataPoint
    '                CdfPoint.XValue = item.<RandVarValue>.Value
    '                CdfPoint.SetValueY(item.<CdfProbability>.Value)
    '                myChart.Series("CdfAreaVertBar").Points.Add(CdfPoint)
    '                Main.Message.Add("CdfAreaVertBar points: " & myChart.Series("CdfAreaVertBar").Points.Count & vbCrLf)

    '                'Add the label:
    '                Dim CdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                CdfAnnot.AxisX = myChart.ChartAreas("CdfArea").AxisX
    '                CdfAnnot.AxisY = myChart.ChartAreas("CdfArea").AxisY
    '                CdfAnnot.AnchorX = item.<RandVarValue>.Value
    '                CdfAnnot.AnchorY = item.<CdfProbability>.Value
    '                CdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                CdfAnnot.Text = item.<Label>.Value & " (" & Format(CdfPoint.XValue, RVFormat) & ")"
    '                CdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(CdfAnnot)
    '            End If
    '        Next
    '        If myChart.Series("CdfAreaVertBar").Points.Count = 1 Then
    '            If myChart.Series("CdfAreaVertBar").Points(0).XValue = 0 Then myChart.Series("CdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
    '        End If
    '    End If

    '    'Exit Sub 'For testing

    '    Dim RevCdfArea As Integer = myChart.ChartAreas.IndexOf("RevCdfArea")
    '    If RevCdfArea > -1 Then 'Annotation can be added to the RevCdf Area
    '        'Add a series used to plot vertical bars on the RevCDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("RevCdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named RevCdfVerBar does not exist
    '            myChart.Series.Add("RevCdfAreaVertBar")
    '            myChart.Series("RevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("RevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("RevCdfAreaVertBar").ChartArea = "RevCdfArea"
    '            myChart.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
    '            myChart.Series("RevCdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("RevCdfAreaVertBar").Points.Clear()
    '            myChart.Series("RevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("RevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value)
    '        End If

    '        For Each item In PointAnnotInfo
    '            If item.<RevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the RevCDF Area
    '                'Add the vertical bar:
    '                Dim RevCdfPoint As New DataVisualization.Charting.DataPoint
    '                RevCdfPoint.XValue = item.<RandVarValue>.Value
    '                RevCdfPoint.SetValueY(item.<RevCdfProbability>.Value)
    '                myChart.Series("RevCdfAreaVertBar").Points.Add(RevCdfPoint)
    '                'Add the label:
    '                Dim RevCdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                RevCdfAnnot.AxisX = myChart.ChartAreas("RevCdfArea").AxisX
    '                RevCdfAnnot.AxisY = myChart.ChartAreas("RevCdfArea").AxisY
    '                RevCdfAnnot.AnchorX = item.<RandVarValue>.Value
    '                RevCdfAnnot.AnchorY = item.<RevCdfProbability>.Value
    '                RevCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                RevCdfAnnot.Text = item.<Label>.Value & " (" & Format(RevCdfPoint.XValue, RVFormat) & ")"
    '                RevCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(RevCdfAnnot)
    '            End If
    '        Next
    '        If myChart.Series("RevCdfAreaVertBar").Points.Count = 1 Then
    '            If myChart.Series("RevCdfAreaVertBar").Points(0).XValue = 0 Then myChart.Series("RevCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
    '        End If
    '    End If

    '    Dim InvCdfArea As Integer = myChart.ChartAreas.IndexOf("InvCdfArea")
    '    If InvCdfArea > -1 Then 'Annotation can be added to the InvCdf Area
    '        'Add a series used to plot vertical bars on the InvCDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("InvCdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named InvCdfAreaVerBar does not exist
    '            myChart.Series.Add("InvCdfAreaVertBar")
    '            myChart.Series("InvCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("InvCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("InvCdfAreaVertBar").ChartArea = "InvCdfArea"
    '            myChart.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
    '            myChart.Series("InvCdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("InvCdfAreaVertBar").Points.Clear()
    '            myChart.Series("InvCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("InvCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value)
    '        End If

    '        For Each item In PointAnnotInfo
    '            'For Each item In Points
    '            If item.<InvCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvCDF Area
    '                'Add the vertical bar:
    '                Dim InvCdfPoint As New DataVisualization.Charting.DataPoint
    '                InvCdfPoint.XValue = item.<CdfProbability>.Value
    '                InvCdfPoint.SetValueY(item.<RandVarValue>.Value)
    '                myChart.Series("InvCdfAreaVertBar").Points.Add(InvCdfPoint)
    '                'Add the label:
    '                Dim InvCdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                InvCdfAnnot.AxisX = myChart.ChartAreas("InvCdfArea").AxisX
    '                InvCdfAnnot.AxisY = myChart.ChartAreas("InvCdfArea").AxisY
    '                InvCdfAnnot.AnchorX = item.<CdfProbability>.Value
    '                InvCdfAnnot.AnchorY = item.<RandVarValue>.Value
    '                InvCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                InvCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
    '                InvCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(InvCdfAnnot)
    '            End If
    '        Next
    '        If myChart.Series("InvCdfAreaVertBar").Points.Count = 1 Then
    '            If myChart.Series("InvCdfAreaVertBar").Points(0).XValue = 0 Then myChart.Series("InvCdfAreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes thay are categories.
    '        End If
    '    End If

    '    Dim InvRevCdfArea As Integer = myChart.ChartAreas.IndexOf("InvRevCdfArea")
    '    If InvRevCdfArea > -1 Then 'Annotation can be added to the InvRevCdf Area
    '        'Add a series used to plot vertical bars on the InvRevCDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("InvRevCdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named InvRevCdfAreaVertBar does not exist
    '            myChart.Series.Add("InvRevCdfAreaVertBar")
    '            myChart.Series("InvRevCdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("InvRevCdfAreaVertBar").ChartArea = "InvRevCdfArea"
    '            myChart.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
    '            myChart.Series("InvRevCdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("InvRevCdfAreaVertBar").Points.Clear()
    '            myChart.Series("InvRevCdfAreaVertBar").Color = Color.FromArgb(ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevÇDF>.<Line>.<Color>.Value)
    '            myChart.Series("InvRevCdfAreaVertBar").SetCustomProperty("PixelPointWidth", ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value)
    '        End If

    '        For Each item In PointAnnotInfo
    '            If item.<InvRevCDF>.Value = True And item.<Show>.Value = True Then 'Add this annotation to the InvRevCDF Area
    '                'Add the vertical bar:
    '                Dim InvRevCdfPoint As New DataVisualization.Charting.DataPoint
    '                InvRevCdfPoint.XValue = item.<RevCdfProbability>.Value
    '                InvRevCdfPoint.SetValueY(item.<RandVarValue>.Value)
    '                myChart.Series("InvRevCdfAreaVertBar").Points.Add(InvRevCdfPoint)
    '                'Add the label:
    '                Dim InvRevCdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                InvRevCdfAnnot.AxisX = myChart.ChartAreas("InvRevCdfArea").AxisX
    '                InvRevCdfAnnot.AxisY = myChart.ChartAreas("InvRevCdfArea").AxisY
    '                InvRevCdfAnnot.AnchorX = item.<RevCdfProbability>.Value
    '                InvRevCdfAnnot.AnchorY = item.<RandVarValue>.Value
    '                InvRevCdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                InvRevCdfAnnot.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
    '                InvRevCdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(InvRevCdfAnnot)
    '            End If
    '        Next
    '        If myChart.Series("InvRevCdfAreaVertBar").Points.Count = 1 Then
    '            If myChart.Series("InvRevCdfAreaVertBar").Points(0).XValue = 0 Then myChart.Series("InvCdfInvRevCdfAreaVertBarreaVertBar").Points(0).XValue = 0.00000001 'If all the XValues are 0, the Chart control assumes they are categories.
    '        End If
    '    End If

    '    'Main.Message.Add("ChartSettings: Completed ApplyAnnotation()" & vbCrLf)

    'End Sub

    Private Sub ApplyAreaShading_XXX() 'NOTE: This is now done within frmChart
        'Apply the area shading to the PDF chart.
        'https://docs.microsoft.com/en-us/previous-versions/dd489233(v=vs.140)

        Dim PdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("PdfArea")

        If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
            ''Add a series used to plot vertical shading bars on the PDF chart:
            'Dim IndexNo As Integer = myChart.Series.IndexOf("PdfShadingVertBar")
            'If IndexNo = -1 Then 'Series named PdfShadingVertBar does not exist
            '    myChart.Series.Add("PdfShadingVertBar")
            '    myChart.Series("PdfShadingVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
            '    myChart.Series("PdfShadingVertBar").Color = Color.Red
            '    myChart.Series("PdfShadingVertBar").ChartArea = "PdfArea"
            '    myChart.Series("PdfShadingVertBar").SetCustomProperty("PixelPointWidth", "2")
            '    myChart.Series("PdfShadingVertBar").IsVisibleInLegend = False
            'Else
            '    myChart.Series("PdfShadingVertBar").Points.Clear()
            'End If

            'Distribution sampling parameters:
            'Minimum: Main.Distribution.ContSampling.Minimum
            'Interval: Main.Distribution.ContSampling.Interval
            'Maximum: Main.Distribution.ContSampling.Maximum

            For Each item In myParent.AreaAnnotInfo
                Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1 'DistributionNo uses zero-based index: index number conversion required.
                'Dim DistribAnnotNo As Integer = item.<DistribAnnotNo>.Value
                'Dim DistribAnnotNo As Integer = myParent.AreaAnnotInfo.IndexOf(item)
                Dim DistribAnnotNo As Integer = myParent.AreaAnnotInfo.ToList().IndexOf(item)
                Dim ShadingSeriesName As String = "PdfShadingVertBar_" & DistributionNo & "_" & DistribAnnotNo
                Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf(ShadingSeriesName)
                If IndexNo = -1 Then  'The Series does not exist
                Else
                    myParent.Chart1.Series(ShadingSeriesName).Points.Clear()
                    myParent.Chart1.Series(ShadingSeriesName).IsVisibleInLegend = False
                    'myChart.Series(ShadingSeriesName).SetCustomProperty("PixelPointGapDepth", "0")
                    'myChart.Series(ShadingSeriesName).SetCustomProperty("PointWidth", "0")
                    'myChart.Series(ShadingSeriesName).
                    'myChart.Series(ShadingSeriesName).SetCustomProperty("MaxPixelPointWidth", "1")


                End If
                If item.<Show>.Value = True Then 'Show the shading
                    'Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1
                    If IndexNo = -1 Then   'The Series does not exist
                        myParent.Chart1.Series.Add(ShadingSeriesName)
                        myParent.Chart1.Series(ShadingSeriesName).ChartType = DataVisualization.Charting.SeriesChartType.Column
                        myParent.Chart1.Series(ShadingSeriesName).MarkerStyle = DataVisualization.Charting.MarkerStyle.None
                        myParent.Chart1.Series(ShadingSeriesName).ChartArea = "PdfArea"
                        myParent.Chart1.Series(ShadingSeriesName).IsVisibleInLegend = False
                    Else
                        myParent.Chart1.Series(ShadingSeriesName).Points.Clear()
                        myParent.Chart1.Series(ShadingSeriesName).ChartType = DataVisualization.Charting.SeriesChartType.Column
                        myParent.Chart1.Series(ShadingSeriesName).MarkerStyle = DataVisualization.Charting.MarkerStyle.None
                        'myChart.Series(ShadingSeriesName).BorderWidth = 0
                        myParent.Chart1.Series(ShadingSeriesName).IsVisibleInLegend = False
                    End If
                    Dim ShadingStart As Double = Main.Distribution.ContSampling.Minimum
                    If item.<FromValue>.Value <> Nothing Then
                        If item.<FromValue>.Value > ShadingStart Then ShadingStart = item.<FromValue>.Value
                    End If
                    Dim ShadingInterval As Double = Main.Distribution.ContSampling.Interval / item.<Density>.Value
                    Dim ShadingEnd As Double = Main.Distribution.ContSampling.Maximum
                    If item.<ToValue>.Value <> Nothing Then
                        If item.<ToValue>.Value < ShadingEnd Then ShadingEnd = item.<ToValue>.Value
                    End If
                    Dim NShadingLines As Integer = Math.Round((ShadingEnd - ShadingStart) / ShadingInterval)
                    Dim I As Integer
                    Dim XPos As Double
                    'Dim YPos As Double
                    myParent.Chart1.Series(ShadingSeriesName).SetCustomProperty("PixelPointWidth", item.<Thickness>.Value)
                    'myChart.Series(ShadingSeriesName).SetCustomProperty("PixelPointWidth", "0.5")
                    'myChart.Series(ShadingSeriesName).SetCustomProperty("MinPixelPointWidth", item.<Thickness>.Value)
                    myParent.Chart1.Series(ShadingSeriesName).Color = Color.FromArgb(item.<Color>.Value)
                    'myChart.Series(ShadingSeriesName).BorderDashStyle = DataVisualization.Charting.ChartDashStyle.Dot
                    'myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.DashedHorizontal
                    'myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Horizontal
                    'myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.NarrowHorizontal
                    'myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.DottedGrid
                    'myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent50
                    Select Case item.<Intensity>.Value
                        'Case "5"
                        '    myChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent05
                        Case "10"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent90
                        Case "20"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent80
                        Case "25"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent75
                        Case "30"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent70
                        Case "40"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent60
                        Case "50"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent50
                        Case "60"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent40
                        Case "70"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent30
                        Case "75"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent25
                        Case "80"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent20
                        Case "90"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent10
                        Case "95"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent05
                        Case "100"
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.None
                        Case Else
                            myParent.Chart1.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.None
                    End Select

                    'X value weighted average calculation - used to determine the optimal X position for the probability (area) label
                    Dim WtXTotal As Double = 0 'The sum of the X values weighted with the Y values
                    Dim WtTotal As Double = 0 'The sum of the Y weight values
                    Dim YValue As Double

                    'For I = 0 To NShadingLines
                    For I = 0 To NShadingLines - 1 'Omit the last shading line - trying to show the vertical annotation bar more clearly.
                        'For I = 0 To NShadingLines - 2 'Omit the last shading line - trying to show the vertical annotation bar more clearly.
                        Dim PdfPoint As New DataVisualization.Charting.DataPoint
                        XPos = ShadingStart + I * ShadingInterval
                        PdfPoint.XValue = XPos
                        'PdfPoint.SetValueY(Main.Distribution.PdfValue(DistributionNo, XPos))
                        YValue = Main.Distribution.PdfValue(DistributionNo, XPos)
                        PdfPoint.SetValueY(YValue)
                        'myChart.Series("PdfShadingVertBar").Points.Add(PdfPoint)
                        myParent.Chart1.Series(ShadingSeriesName).Points.Add(PdfPoint)
                        WtXTotal += XPos * YValue
                        WtTotal += YValue
                    Next

                    If NShadingLines <= 1 Then 'No shading lines drawn and no WtXTotal or WtTotal values calculated
                        WtXTotal = ShadingStart
                        WtTotal = 1
                    End If

                    'Annotate the Probability (Area):
                    If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value = True Then
                        Dim NumberFormat As String = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value
                        Dim YMin As Double = myParent.Chart1.ChartAreas("PdfArea").AxisY.Minimum
                        Dim YMax As Double = myParent.Chart1.ChartAreas("PdfArea").AxisY.Maximum
                        Dim YOffset As Double = (YMax - YMin) / 10 'The offset from YMin to display the Probability annotation
                        'Dim XAnnotPos As Double = (ShadingStart + ShadingEnd) / 2 'Annotate the Probability in the middle of the shaded area
                        Dim XAnnotPos As Double = WtXTotal / WtTotal
                        Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
                        PdfAnnot.AxisX = myParent.Chart1.ChartAreas("PdfArea").AxisX
                        PdfAnnot.AxisY = myParent.Chart1.ChartAreas("PdfArea").AxisY
                        PdfAnnot.AnchorX = XAnnotPos
                        PdfAnnot.AnchorY = YMin + YOffset
                        PdfAnnot.AnchorAlignment = ContentAlignment.MiddleCenter
                        PdfAnnot.Text = Format(Val(item.<Probability>.Value), NumberFormat)

                        Dim myFontStyle As FontStyle
                        Dim myFontSize As Single = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        PdfAnnot.Font = New Font(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value, myFontSize, myFontStyle)
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = True Then
                            PdfAnnot.ForeColor = Color.FromArgb(item.<Color>.Value)
                        Else
                            PdfAnnot.ForeColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
                        End If
                        myParent.Chart1.Annotations.Add(PdfAnnot)
                        item.<ChartAnnotNo>.Value = myParent.Chart1.Annotations.Count - 1 'Save the annotation number - this will be needed if the annotation is updated.
                    End If
                End If
            Next
        Else
            'There is no PDF area to display the shading.
        End If
        'ShowSeriesInfo()
    End Sub

    Private Sub ShowSeriesInfo()
        'Show information about each series in the chart.

        Main.Message.Add("Chart series information: " & vbCrLf)

        For Each Item As DataVisualization.Charting.Series In myParent.Chart1.Series
            Main.Message.Add("Series name: " & Item.Name & "  Series index: " & myParent.Chart1.Series.IndexOf(Item.Name) & "  Series chart area: " & Item.ChartArea & vbCrLf)
        Next
        Main.Message.Add("--------------------------------------------------------------" & vbCrLf)

    End Sub

    Private Sub ApplyAreaShading_Old()
        'Apply the area shading to the PDF chart.

        Dim PdfArea As Integer = myParent.Chart1.ChartAreas.IndexOf("PdfArea")

        If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
            'Add a series used to plot vertical shading bars on the PDF chart:
            Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf("PdfShadingVertBar")
            If IndexNo = -1 Then 'Series named PdfShadingVertBar does not exist
                myParent.Chart1.Series.Add("PdfShadingVertBar")
                myParent.Chart1.Series("PdfShadingVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                myParent.Chart1.Series("PdfShadingVertBar").Color = Color.Red
                myParent.Chart1.Series("PdfShadingVertBar").ChartArea = "PdfArea"
                myParent.Chart1.Series("PdfShadingVertBar").SetCustomProperty("PixelPointWidth", "2")
                myParent.Chart1.Series("PdfShadingVertBar").IsVisibleInLegend = False
            Else
                myParent.Chart1.Series("PdfShadingVertBar").Points.Clear()
                myParent.Chart1.Series("PdfShadingVertBar").IsVisibleInLegend = False
            End If

            'Distribution sampling parameters:
            'Minimum: Main.Distribution.ContSampling.Minimum
            'Interval: Main.Distribution.ContSampling.Interval
            'Maximum: Main.Distribution.ContSampling.Maximum

            For Each item In myParent.AreaAnnotInfo
                If item.<Show>.Value = True Then 'Show the shading
                    Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1
                    Dim ShadingStart As Double = Main.Distribution.ContSampling.Minimum
                    If item.<FromValue>.Value <> Nothing Then
                        If item.<FromValue>.Value > ShadingStart Then ShadingStart = item.<FromValue>.Value
                    End If
                    Dim ShadingInterval As Double = Main.Distribution.ContSampling.Interval / item.<Density>.Value
                    Dim ShadingEnd As Double = Main.Distribution.ContSampling.Maximum
                    If item.<ToValue>.Value <> Nothing Then
                        If item.<ToValue>.Value < ShadingEnd Then ShadingEnd = item.<ToValue>.Value
                    End If
                    'Dim NShadingLines As Integer = Int((ShadingEnd - ShadingStart) / ShadingInterval)
                    Dim NShadingLines As Integer = Math.Round((ShadingEnd - ShadingStart) / ShadingInterval)
                    Dim I As Integer
                    Dim XPos As Double
                    Dim YPos As Double
                    'myChart.Series("PdfShadingVertBar").BorderWidth = item.<Thickness>.Value
                    myParent.Chart1.Series("PdfShadingVertBar").SetCustomProperty("PixelPointWidth", item.<Thickness>.Value)
                    myParent.Chart1.Series("PdfShadingVertBar").Color = Color.FromArgb(item.<Color>.Value)
                    For I = 0 To NShadingLines
                        Dim PdfPoint As New DataVisualization.Charting.DataPoint
                        XPos = ShadingStart + I * ShadingInterval
                        PdfPoint.XValue = XPos
                        PdfPoint.SetValueY(Main.Distribution.PdfValue(DistributionNo, XPos))
                        myParent.Chart1.Series("PdfShadingVertBar").Points.Add(PdfPoint)
                    Next
                    'Annotate the Probability (Area):
                    If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value = True Then
                        Dim NumberFormat As String = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value
                        Dim YMin As Double = myParent.Chart1.ChartAreas("PdfArea").AxisY.Minimum
                        Dim YMax As Double = myParent.Chart1.ChartAreas("PdfArea").AxisY.Maximum
                        Dim YOffset As Double = (YMax - YMin) / 10 'The offset from YMin to display the Probability annotation
                        'Dim XAnnotPos As Double = (ShadingEnd - ShadingStart) / 2 'Annotate the Probability in the middle of the shaded area
                        Dim XAnnotPos As Double = (ShadingStart + ShadingEnd) / 2 'Annotate the Probability in the middle of the shaded area
                        Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
                        PdfAnnot.AxisX = myParent.Chart1.ChartAreas("PdfArea").AxisX
                        PdfAnnot.AxisY = myParent.Chart1.ChartAreas("PdfArea").AxisY
                        PdfAnnot.AnchorX = XAnnotPos
                        PdfAnnot.AnchorY = YMin + YOffset
                        PdfAnnot.AnchorAlignment = ContentAlignment.MiddleCenter
                        PdfAnnot.Text = Format(Val(item.<Probability>.Value), NumberFormat)

                        Dim myFontStyle As FontStyle
                        Dim myFontSize As Single = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        'PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                        PdfAnnot.Font = New Font(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value, myFontSize, myFontStyle)
                        If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = True Then
                            PdfAnnot.ForeColor = Color.FromArgb(item.<Color>.Value)
                        Else
                            PdfAnnot.ForeColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
                        End If
                        myParent.Chart1.Annotations.Add(PdfAnnot)
                        item.<ChartAnnotNo>.Value = myParent.Chart1.Annotations.Count - 1 'Save the annotation number - this will be needed if the annotation is updated.
                    End If
                End If
            Next
        Else
            'There is no PDF area to display the shading.
        End If
    End Sub

    'NOTE: All annotation will now be re-applied rather than updated - coding to update is more difficult!
    'Private Sub UpdateAreaShading()
    '    'Update the arera shading to the PDF chart.

    '    Dim PdfArea As Integer = myChart.ChartAreas.IndexOf("PdfArea")

    '    If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
    '        'Add a series used to plot vertical shading bars on the PDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("PdfShadingVertBar")
    '        If IndexNo = -1 Then 'Series named PdfShadingVertBar does not exist
    '            myChart.Series.Add("PdfShadingVertBar")
    '            myChart.Series("PdfShadingVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("PdfShadingVertBar").Color = Color.Red
    '            myChart.Series("PdfShadingVertBar").ChartArea = "PdfArea"
    '            myChart.Series("PdfShadingVertBar").SetCustomProperty("PixelPointWidth", "2")
    '            myChart.Series("PdfShadingVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("PdfShadingVertBar").Points.Clear()
    '        End If

    '        'Distribution sampling parameters:
    '        'Minimum: Main.Distribution.ContSampling.Minimum
    '        'Interval: Main.Distribution.ContSampling.Interval
    '        'Maximum: Main.Distribution.ContSampling.Maximum

    '        For Each item In AreaAnnotInfo
    '            If item.<Show>.Value = True Then 'Show the shading
    '                Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1
    '                Dim ShadingStart As Double = Main.Distribution.ContSampling.Minimum
    '                If item.<FromValue>.Value <> Nothing Then
    '                    If item.<FromValue>.Value > ShadingStart Then ShadingStart = item.<FromValue>.Value
    '                End If
    '                Dim ShadingInterval As Double = Main.Distribution.ContSampling.Interval / item.<Density>.Value
    '                Dim ShadingEnd As Double = Main.Distribution.ContSampling.Maximum
    '                If item.<ToValue>.Value <> Nothing Then
    '                    If item.<ToValue>.Value < ShadingEnd Then ShadingEnd = item.<ToValue>.Value
    '                End If
    '                'Dim NShadingLines As Integer = Int((ShadingEnd - ShadingStart) / ShadingInterval)
    '                Dim NShadingLines As Integer = Math.Round((ShadingEnd - ShadingStart) / ShadingInterval)
    '                Dim I As Integer
    '                Dim XPos As Double
    '                Dim YPos As Double
    '                myChart.Series("PdfShadingVertBar").BorderWidth = item.<Thickness>.Value
    '                For I = 0 To NShadingLines
    '                    Dim PdfPoint As New DataVisualization.Charting.DataPoint
    '                    XPos = ShadingStart + I * ShadingInterval
    '                    PdfPoint.XValue = XPos
    '                    PdfPoint.SetValueY(Main.Distribution.PdfValue(DistributionNo, XPos))
    '                    myChart.Series("PdfShadingVertBar").Points.Add(PdfPoint)
    '                Next
    '                'myChart.Series("PdfShadingVertBar").
    '                'Annotate the Probability (Area):
    '                If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value = True Then
    '                    Dim NumberFormat As String = ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value
    '                    Dim YMin As Double = myChart.ChartAreas("PdfArea").AxisY.Minimum
    '                    Dim YMax As Double = myChart.ChartAreas("PdfArea").AxisY.Maximum
    '                    Dim YOffset As Double = (YMax - YMin) / 10 'The offset from YMin to display the Probability annotation
    '                    Dim XAnnotPos As Double = (ShadingStart + ShadingEnd) / 2 'Annotate the Probability in the middle of the shaded area

    '                    'Main.Message.Add("ShadingStart: " & ShadingStart & "  ShadingEnd: " & ShadingEnd & "  XAnnotPos: " & XAnnotPos & vbCrLf)


    '                    'Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation

    '                    Dim AnnotNo As Integer = item.<ChartAnnotNo>.Value
    '                    myChart.Annotations(AnnotNo).AnchorX = XAnnotPos
    '                    'myChart.Annotations(AnnotNo).Text = Format(Val(item.<Probability>.Value), NumberFormat)
    '                    DirectCast(myChart.Annotations(AnnotNo), DataVisualization.Charting.TextAnnotation).Text = Format(Val(item.<Probability>.Value), NumberFormat)

    '                    Dim myFontStyle As FontStyle
    '                    Dim myFontSize As Single = ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
    '                    myFontStyle = FontStyle.Regular
    '                    If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '                    If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '                    If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '                    If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '                    'myChart.Annotations(AnnotNo).Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                    myChart.Annotations(AnnotNo).Font = New Font(ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value, myFontSize, myFontStyle)

    '                    If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = True Then
    '                        myChart.Annotations(AnnotNo).ForeColor = Color.FromArgb(item.<Color>.Value)
    '                    Else
    '                        myChart.Annotations(AnnotNo).ForeColor = Color.FromArgb(ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
    '                    End If

    '                    'PdfAnnot.AxisX = myChart.ChartAreas("PdfArea").AxisX
    '                    'PdfAnnot.AxisY = myChart.ChartAreas("PdfArea").AxisY
    '                    'PdfAnnot.AnchorX = XAnnotPos
    '                    'PdfAnnot.AnchorY = YMin + YOffset
    '                    'PdfAnnot.AnchorAlignment = ContentAlignment.MiddleCenter
    '                    'PdfAnnot.Text = Format(Val(item.<Probability>.Value), NumberFormat)
    '                    'PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                    'If ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = True Then
    '                    '    PdfAnnot.ForeColor = Color.FromArgb(item.<Color>.Value)
    '                    'Else
    '                    '    PdfAnnot.ForeColor = Color.FromArgb(ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
    '                    'End If
    '                    'myChart.Annotations.Add(PdfAnnot)
    '                    'item.<ChartAnnotNo>.Value = myChart.Annotations.Count - 1 'Save the annotation number - this will be needed if the annotation is updated.
    '                End If
    '            End If
    '        Next
    '    Else
    '        'There is no PDF area to display the shading.
    '    End If
    'End Sub

    'Private Sub UpdateAnnotation_Old()
    '    'Update the Annotation
    '    myChart.Annotations.Clear()

    '    'Code test:
    '    'Main.Message.Add("PdfArea index = " & myChart.ChartAreas.IndexOf("PdfArea") & vbCrLf)
    '    'Main.Message.Add("PdfLnArea index = " & myChart.ChartAreas.IndexOf("PdfLnArea") & vbCrLf)
    '    'Main.Message.Add("PmfArea index = " & myChart.ChartAreas.IndexOf("PmfArea") & vbCrLf)
    '    'Main.Message.Add("PmfLnArea index = " & myChart.ChartAreas.IndexOf("PmfLnArea") & vbCrLf)
    '    'Main.Message.Add("CdfArea index = " & myChart.ChartAreas.IndexOf("CdfArea") & vbCrLf)
    '    'Main.Message.Add("RevCdfArea index = " & myChart.ChartAreas.IndexOf("RevCdfArea") & vbCrLf)
    '    'Main.Message.Add("InvCdfArea index = " & myChart.ChartAreas.IndexOf("InvCdfArea") & vbCrLf)
    '    'Main.Message.Add("InvRevCdfArea index = " & myChart.ChartAreas.IndexOf("InvRevCdfArea") & vbCrLf)
    '    'Main.Message.Add("MissingArea index = " & myChart.ChartAreas.IndexOf("MissingArea") & vbCrLf) '-1 if missing

    '    Dim NumberFormat As String = ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Format>.Value
    '    'Dim Points = From item In ChartInfo.<ChartSettings>.<PointAnnotCollection>.<PointAnnotation>
    '    Dim Points = From item In ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>

    '    Dim PdfArea As Integer = myChart.ChartAreas.IndexOf("PdfArea")
    '    If PdfArea > -1 Then 'Annotation can be added to the Pdf Area
    '        'myChart.Series("PdfAreaVertBar").Points.Clear()
    '        'Dim NewAreaAnnotInfo = <?xml version="1.0" encoding="utf-8"?>

    '        'Add a series used to plot vertical bars on the CDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("PdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named CdfVerBar does not exist
    '            myChart.Series.Add("PdfAreaVertBar")
    '            myChart.Series("PdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("PdfAreaVertBar").Color = Color.Orange
    '            myChart.Series("PdfAreaVertBar").ChartArea = "PdfArea"
    '            myChart.Series("PdfAreaVertBar").SetCustomProperty("PixelPointWidth", "2")
    '            myChart.Series("PdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("PdfAreaVertBar").Points.Clear()
    '        End If

    '        'Dim Points = From item In ChartInfo.<ChartSettings>.<PointAnnotCollection>.<PointAnnotation>

    '        'For Each item In PointAnnotInfo
    '        'For Each item In PointAnnotInfo.<PointAnnotation>
    '        'For Each item.<PointAnnotation> In PointAnnotInfo
    '        For Each item In Points
    '            'Main.Message.Add("item.<PDF>.Value = " & item.<PDF>.Value & vbCrLf)
    '            'Main.Message.Add("item.<Type>.Value = " & item.<Type>.Value & vbCrLf)
    '            'If item.<PointAnnotation>.<PDF>.Value = True Then 'Add this annotation to the PDF Area
    '            If item.<PDF>.Value = "true" Then 'Add this annotation to the PDF Area
    '                'Add the vertical bar:
    '                Dim PdfPoint As New DataVisualization.Charting.DataPoint
    '                PdfPoint.XValue = item.<Value>.Value
    '                PdfPoint.SetValueY(item.<ProbabilityDensity>.Value)
    '                myChart.Series("PdfAreaVertBar").Points.Add(PdfPoint)
    '                'Add the label:
    '                Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                'PdfAnnot.AxisX = myChart.ChartAreas(0).AxisX
    '                'PdfAnnot.AxisY = myChart.ChartAreas(0).AxisY
    '                PdfAnnot.AxisX = myChart.ChartAreas("PdfArea").AxisX
    '                PdfAnnot.AxisY = myChart.ChartAreas("PdfArea").AxisY
    '                PdfAnnot.AnchorX = item.<Value>.Value
    '                PdfAnnot.AnchorY = item.<ProbabilityDensity>.Value
    '                PdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                'PdfAnnot.Text = item.<Label>.Value & " (" & Format(item.<ProbabilityDensity>.Value, NumberFormat) & ")"
    '                'PdfAnnot.Text = item.<Label>.Value & " (" & Format(PdfAnnot.AnchorY, NumberFormat) & ")"
    '                PdfAnnot.Text = item.<Label>.Value & " (" & Format(PdfPoint.XValue, NumberFormat) & ")"
    '                PdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(PdfAnnot)
    '            End If
    '        Next
    '    End If

    '    Dim CdfArea As Integer = myChart.ChartAreas.IndexOf("CdfArea")
    '    If CdfArea > -1 Then 'Annotation can be added to the Cdf Area
    '        'Add a series used to plot vertical bars on the CDF chart:
    '        Dim IndexNo As Integer = myChart.Series.IndexOf("CdfAreaVertBar")
    '        If IndexNo = -1 Then 'Series named CdfVerBar does not exist
    '            myChart.Series.Add("CdfAreaVertBar")
    '            myChart.Series("CdfAreaVertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
    '            myChart.Series("CdfAreaVertBar").Color = Color.Orange
    '            myChart.Series("CdfAreaVertBar").ChartArea = "CdfArea"
    '            myChart.Series("CdfAreaVertBar").SetCustomProperty("PixelPointWidth", "2")
    '            myChart.Series("CdfAreaVertBar").IsVisibleInLegend = False
    '        Else
    '            myChart.Series("CdfAreaVertBar").Points.Clear()
    '        End If

    '        For Each item In Points
    '            If item.<CDF>.Value = "true" Then 'Add this annotation to the CDF Area
    '                'Add the vertical bar:
    '                Dim CdfPoint As New DataVisualization.Charting.DataPoint
    '                CdfPoint.XValue = item.<Value>.Value
    '                CdfPoint.SetValueY(item.<CdfProbability>.Value)
    '                myChart.Series("CdfAreaVertBar").Points.Add(CdfPoint)
    '                'Add the label:
    '                Dim CdfAnnot As New DataVisualization.Charting.TextAnnotation
    '                'CdfAnnot.AxisX = myChart.ChartAreas(0).AxisX
    '                'CdfAnnot.AxisY = myChart.ChartAreas(0).AxisY
    '                CdfAnnot.AxisX = myChart.ChartAreas("CdfArea").AxisX
    '                CdfAnnot.AxisY = myChart.ChartAreas("CdfArea").AxisY
    '                CdfAnnot.AnchorX = item.<Value>.Value
    '                CdfAnnot.AnchorY = item.<CdfProbability>.Value
    '                CdfAnnot.AnchorAlignment = ContentAlignment.MiddleRight
    '                CdfAnnot.Text = item.<Label>.Value & " (" & Format(CdfPoint.XValue, NumberFormat) & ")"
    '                CdfAnnot.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
    '                myChart.Annotations.Add(CdfAnnot)
    '            End If
    '        Next
    '    End If


    'End Sub

    Private Sub btnSaveAnnot_Click(sender As Object, e As EventArgs) Handles btnSaveAnnot.Click
        'Save the Annotation Settings.
        'SelDistrib contains the selected distribution number
        Dim SelPointAnnotInfo = From item In myParent.PointAnnotInfo Where item.<DistribNo>.Value = SelDistrib
    End Sub

    Private Sub TabPage6_GotFocus(sender As Object, e As EventArgs) Handles TabPage6.GotFocus

    End Sub

    Private Sub TabPage7_GotFocus(sender As Object, e As EventArgs) Handles TabPage7.GotFocus

    End Sub

    Private Sub btnDelete_Click(sender As Object, e As EventArgs) Handles btnDelete.Click
        'Delete the selected Point or Area annotation.

        If TabControl2.SelectedIndex = 0 Then 'Point Annotation tab selected
            'Main.Message.Add("Point annotation tab selected." & vbCrLf)
            If dgvPointAnnot.SelectedRows.Count > 0 Then
                Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib 'SelDistrib  and <DistributionNo> are one-based

                Dim I As Integer
                For I = dgvPointAnnot.SelectedRows.Count - 1 To 0 Step -1
                    If dgvPointAnnot.SelectedRows(I).Index < SelPointAnnotInfo.Count Then
                        SelPointAnnotInfo(dgvPointAnnot.SelectedRows(I).Index).Remove()
                        dgvPointAnnot.Rows.Remove(dgvPointAnnot.Rows(dgvPointAnnot.SelectedRows(I).Index))
                        ''Renumber the <PointAnnotation>.<DistribAnnotNo> values:
                        'For Each AnnotItem In SelPointAnnotInfo
                        '    If AnnotItem.<DistribAnnotNo>.Value > I Then AnnotItem.<DistribAnnotNo>.Value = AnnotItem.<DistribAnnotNo>.Value - 1
                        'Next
                    End If
                Next
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
            End If
        ElseIf TabControl2.SelectedIndex = 1 Then 'Area Annotation tab selected
            'Main.Message.Add("Area annotation tab selected." & vbCrLf)
            If dgvAreaAnnot.SelectedRows.Count > 0 Then
                'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib 'SelDistrib  and <DistributionNo> are one-based
                Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib 'SelDistrib  and <DistributionNo> are one-based
                Main.Message.Add("Deleting an Area Annotation" & vbCrLf)
                Dim I As Integer
                Dim DeletedAnnotNo As Integer
                For I = dgvAreaAnnot.SelectedRows.Count - 1 To 0 Step -1
                    Main.Message.Add("I = " & I & vbCrLf)
                    'Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1 'DistributionNo uses zero-based index: index number conversion required.
                    Dim DistributionNo As Integer = SelDistribAreaAnnotInfo(dgvAreaAnnot.SelectedRows(I).Index).<DistributionNo>.Value - 1 'DistributionNo uses zero-based index: index number conversion required.
                    'Dim DistribAnnotNo As Integer = SelAreaAnnotInfo(dgvAreaAnnot.SelectedRows(I).Index).<DistribAnnotNo>.Value
                    Dim DistribAnnotNo As Integer = I
                    Dim ShadingSeriesName As String = "PdfShadingVertBar_" & DistributionNo & "_" & DistribAnnotNo
                    Dim IndexNo As Integer = myParent.Chart1.Series.IndexOf(ShadingSeriesName)
                    If IndexNo = -1 Then  'The Series does not exist
                    Else
                        myParent.Chart1.Series(ShadingSeriesName).Points.Clear()
                        'myParent.Chart1.Series("PdfShadingVertBar").IsVisibleInLegend = False
                        myParent.Chart1.Series(ShadingSeriesName).IsVisibleInLegend = False
                    End If

                    DeletedAnnotNo = dgvAreaAnnot.SelectedRows(I).Index
                    SelDistribAreaAnnotInfo(dgvAreaAnnot.SelectedRows(I).Index).Remove()
                    dgvAreaAnnot.Rows.Remove(dgvAreaAnnot.Rows(dgvAreaAnnot.SelectedRows(I).Index))
                    ''Renumber the <AreaAnnotation>.<DistribAnnotNo> values:
                    'For Each AnnotItem In SelAreaAnnotInfo
                    '    Main.Message.Add("Checking annotation with DistribAnnotNo = " & AnnotItem.<DistribAnnotNo>.Value & vbCrLf)
                    '    If AnnotItem.<DistribAnnotNo>.Value > DeletedAnnotNo Then
                    '        AnnotItem.<DistribAnnotNo>.Value = AnnotItem.<DistribAnnotNo>.Value - 1
                    '    End If
                    'Next
                Next
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
            End If
        Else
            Main.Message.Add("No annotation tab selected." & vbCrLf)
        End If
    End Sub

    Private Sub btnMoveUp_Click(sender As Object, e As EventArgs) Handles btnMoveUp.Click
        'Move the selected Point or Area annotation up.

        If TabControl2.SelectedIndex = 0 Then 'Point Annotation tab selected
            'Main.Message.Add("Point annotation tab selected." & vbCrLf)
            If dgvPointAnnot.SelectedRows.Count > 0 Then
                If dgvPointAnnot.SelectedRows.Count > 1 Then
                    Main.Message.Add("Please select only one item to move." & vbCrLf)
                Else
                    Dim SelAnnotNo = dgvPointAnnot.SelectedRows(0).Index
                    If SelAnnotNo = 0 Then
                        Main.Message.Add("The first item has been selected. This cannot be moved up." & vbCrLf)
                    Else
                        Dim NewAnnotNo = SelAnnotNo - 1
                        'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo
                        'Dim DestPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo - 1
                        Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        Dim IntInfo As Integer
                        Dim FlagInfo As Boolean
                        Dim TextInfo As String
                        Dim ValInfo As Double

                        'FlagInfo = DestPointAnnotInfo.<Show>.Value
                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Show>.Value
                        'DestPointAnnotInfo.<Show>.Value = SelPointAnnotInfo.<Show>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Show>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Show>.Value
                        'SelPointAnnotInfo.<Show>.Value = FlagInfo
                        SelDistribPointAnnotInfo(SelAnnotNo).<Show>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(0).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(0).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(0).Value = FlagInfo

                        'FlagInfo = DestPointAnnotInfo.<PDF>.Value
                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<PDF>.Value
                        'DestPointAnnotInfo.<PDF>.Value = SelPointAnnotInfo.<PDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<PDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PDF>.Value
                        'SelPointAnnotInfo.<PDF>.Value = FlagInfo
                        SelDistribPointAnnotInfo(SelAnnotNo).<PDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(1).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(1).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(1).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<PDFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<PDFLn>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PDFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PDFLn>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(2).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(2).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(2).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<PMF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<PMF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PMF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PMF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(3).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(3).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(3).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<PMFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<PMFLn>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PMFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PMFLn>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(4).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(4).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(4).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<CDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<CDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<CDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<CDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(5).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(5).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(5).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<RevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<RevCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RevCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(6).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(6).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(6).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<InvCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<InvCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<InvCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<InvCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(7).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(7).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(7).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<InvRevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<InvRevCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<InvRevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<InvRevCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(8).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(8).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(8).Value = FlagInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Type>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Type>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Type>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Type>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(9).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(9).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(9).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Parameter>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Parameter>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Parameter>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Parameter>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(10).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(10).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(10).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Label>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Label>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Label>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Label>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(11).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(11).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(11).Value = TextInfo

                        'ValInfo = DestPointAnnotInfo.<CdfProbability>.Value
                        'DestPointAnnotInfo.<CdfProbability>.Value = SelPointAnnotInfo.<CdfProbability>.Value
                        'SelPointAnnotInfo.<CdfProbability>.Value = ValInfo
                        'dgvPointAnnot.Rows(NewAnnotNo).Cells(12).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value
                        'dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value = ValInfo
                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<CdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<CdfProbability>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<CdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<CdfProbability>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(12).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value = TextInfo

                        'ValInfo = DestPointAnnotInfo.<RevCdfProbability>.Value
                        'DestPointAnnotInfo.<RevCdfProbability>.Value = SelPointAnnotInfo.<RevCdfProbability>.Value
                        'SelPointAnnotInfo.<RevCdfProbability>.Value = ValInfo
                        'dgvPointAnnot.Rows(NewAnnotNo).Cells(13).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value
                        'dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value = ValInfo
                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<RevCdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<RevCdfProbability>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RevCdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RevCdfProbability>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(13).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<RandVarValue>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<RandVarValue>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RandVarValue>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RandVarValue>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(14).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(14).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(14).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<ProbabilityDensity>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<ProbabilityDensity>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<ProbabilityDensity>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<ProbabilityDensity>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(15).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(15).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(15).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Alignment>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Alignment>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Alignment>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Alignment>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(16).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value = TextInfo


                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Description>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo - 1).<Description>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Description>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Description>.Value = TextInfo
                        'dgvPointAnnot.Rows(NewAnnotNo).Cells(16).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value
                        'dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(17).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(17).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(17).Value = TextInfo

                        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                        dgvPointAnnot.ClearSelection()
                        dgvPointAnnot.Rows(NewAnnotNo).Selected = True
                    End If





                    'Dim I As Integer
                    'For I = dgvPointAnnot.SelectedRows.Count - 1 To 0 Step -1
                    '    SelPointAnnotInfo(dgvPointAnnot.SelectedRows(I).Index).Remove()
                    '    dgvPointAnnot.Rows.Remove(dgvPointAnnot.Rows(dgvPointAnnot.SelectedRows(I).Index))
                    '    'Renumber the <PointAnnotation>.<DistribAnnotNo> values
                    '    For Each AnnotItem In SelPointAnnotInfo
                    '        If AnnotItem.<DistribAnnotNo>.Value > I Then AnnotItem.<DistribAnnotNo>.Value = AnnotItem.<DistribAnnotNo>.Value - 1
                    '    Next
                    'Next

                End If
            End If
        ElseIf TabControl2.SelectedIndex = 1 Then 'Area Annotation tab selected
            'Main.Message.Add("Area annotation tab selected." & vbCrLf)
            If dgvAreaAnnot.SelectedRows.Count > 0 Then
                If dgvPointAnnot.SelectedRows.Count > 1 Then
                    Main.Message.Add("Please select only one item to move." & vbCrLf)
                Else
                    Dim SelAnnotNo = dgvAreaAnnot.SelectedRows(0).Index
                    If SelAnnotNo = 0 Then
                        Main.Message.Add("The first item has been selected. This cannot be moved up." & vbCrLf)
                    Else
                        Dim NewAnnotNo = SelAnnotNo - 1
                        'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo
                        'Dim DestAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo - 1
                        'Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        'Dim IntInfo As Integer
                        Dim FlagInfo As Boolean
                        Dim TextInfo As String
                        'Dim ValInfo As Double

                        'FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo - 1).<Show>.Value
                        FlagInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Show>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Show>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Show>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Show>.Value = FlagInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(0).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(0).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(0).Value = FlagInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueType>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueType>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(1).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(1).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(1).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueParameter>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueParameter>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(2).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(2).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(2).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValue>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValue>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(3).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(3).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(3).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<FromValueCDF>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueCDF>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(4).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(4).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(4).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueType>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueType>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(5).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(5).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(5).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueParameter>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueParameter>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(6).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(6).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(6).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValue>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValue>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(7).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(7).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(7).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<ToValueCDF>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueCDF>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(8).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(8).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(8).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Probability>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Probability>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Probability>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Probability>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(9).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(9).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(9).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Color>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Color>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Color>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Color>.Value = TextInfo
                        'dgvAreaAnnot.Rows(NewAnnotNo).Cells(10).Style.BackColor = Color.FromArgb(dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Value)
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(10).Style.BackColor = dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Style.BackColor
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Style.BackColor = Color.FromArgb(TextInfo)

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Thickness>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Thickness>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Thickness>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Thickness>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(11).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(11).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(11).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Density>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo - 1).<Density>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Density>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Density>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(12).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(12).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(12).Value = TextInfo

                        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                        dgvAreaAnnot.ClearSelection()
                        dgvAreaAnnot.Rows(NewAnnotNo).Selected = True
                    End If
                End If
            End If
        Else
            Main.Message.Add("No annotation tab selected." & vbCrLf)
        End If

    End Sub

    Private Sub btnDown_Click(sender As Object, e As EventArgs) Handles btnDown.Click
        'Move the selected Point or Area annotation down.

        If TabControl2.SelectedIndex = 0 Then
            If dgvPointAnnot.SelectedRows.Count > 0 Then
                If dgvPointAnnot.SelectedRows.Count > 1 Then
                    Main.Message.Add("Please select only one item to move." & vbCrLf)
                Else
                    Dim SelAnnotNo = dgvPointAnnot.SelectedRows(0).Index
                    'If SelAnnotNo = 0 Then
                    If SelAnnotNo = dgvPointAnnot.RowCount - 1 Then
                        Main.Message.Add("The last item has been selected. This cannot be moved down." & vbCrLf)
                    Else
                        Dim NewAnnotNo = SelAnnotNo + 1
                        'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo
                        'Dim DestPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo + 1
                        Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        Dim IntInfo As Integer
                        Dim FlagInfo As Boolean
                        Dim TextInfo As String
                        Dim ValInfo As Double

                        'FlagInfo = DestPointAnnotInfo.<Show>.Value
                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Show>.Value
                        'DestPointAnnotInfo.<Show>.Value = SelPointAnnotInfo.<Show>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Show>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Show>.Value
                        'SelPointAnnotInfo.<Show>.Value = FlagInfo
                        SelDistribPointAnnotInfo(SelAnnotNo).<Show>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(0).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(0).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(0).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<PDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<PDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(1).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(1).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(1).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<PDFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<PDFLn>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PDFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PDFLn>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(2).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(2).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(2).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<PMF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<PMF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PMF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PMF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(3).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(3).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(3).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<PMFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<PMFLn>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<PMFLn>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<PMFLn>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(4).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(4).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(4).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<CDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<CDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<CDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<CDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(5).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(5).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(5).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<RevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<RevCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RevCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(6).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(6).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(6).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<InvCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<InvCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<InvCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<InvCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(7).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(7).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(7).Value = FlagInfo

                        FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<InvRevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<InvRevCDF>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<InvRevCDF>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<InvRevCDF>.Value = FlagInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(8).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(8).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(8).Value = FlagInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Type>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Type>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Type>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Type>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(9).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(9).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(9).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Parameter>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Parameter>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Parameter>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Parameter>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(10).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(10).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(10).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Label>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Label>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Label>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Label>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(11).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(11).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(11).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<CdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<CdfProbability>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<CdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<CdfProbability>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(12).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(12).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<RevCdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<RevCdfProbability>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RevCdfProbability>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RevCdfProbability>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(13).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(13).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<RandVarValue>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<RandVarValue>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<RandVarValue>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<RandVarValue>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(14).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(14).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(14).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<ProbabilityDensity>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<ProbabilityDensity>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<ProbabilityDensity>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<ProbabilityDensity>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(15).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(15).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(15).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Alignment>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Alignment>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Alignment>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Alignment>.Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(16).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value = TextInfo

                        TextInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Description>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo + 1).<Description>.Value = SelDistribPointAnnotInfo(SelAnnotNo).<Description>.Value
                        SelDistribPointAnnotInfo(SelAnnotNo).<Description>.Value = TextInfo
                        'dgvPointAnnot.Rows(NewAnnotNo).Cells(16).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value
                        'dgvPointAnnot.Rows(SelAnnotNo).Cells(16).Value = TextInfo
                        dgvPointAnnot.Rows(NewAnnotNo).Cells(17).Value = dgvPointAnnot.Rows(SelAnnotNo).Cells(17).Value
                        dgvPointAnnot.Rows(SelAnnotNo).Cells(17).Value = TextInfo

                        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                        dgvPointAnnot.ClearSelection()
                        dgvPointAnnot.Rows(NewAnnotNo).Selected = True
                    End If
                End If
            End If
        ElseIf TabControl2.SelectedIndex = 1 Then 'Area Annotation tab selected
            'Main.Message.Add("Area annotation tab selected." & vbCrLf)
            If dgvAreaAnnot.SelectedRows.Count > 0 Then
                'If dgvPointAnnot.SelectedRows.Count > 1 Then
                If dgvAreaAnnot.SelectedRows.Count > 1 Then
                    Main.Message.Add("Please select only one item to move." & vbCrLf)
                Else
                    Dim SelAnnotNo = dgvAreaAnnot.SelectedRows(0).Index
                    If SelAnnotNo = dgvAreaAnnot.RowCount - 1 Then
                        Main.Message.Add("The last item has been selected. This cannot be moved down." & vbCrLf)
                    Else
                        Dim NewAnnotNo = SelAnnotNo + 1
                        'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo
                        'Dim DestAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = SelAnnotNo + 1
                        'Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                        'Dim IntInfo As Integer
                        Dim FlagInfo As Boolean
                        Dim TextInfo As String
                        'Dim ValInfo As Double

                        'FlagInfo = SelDistribPointAnnotInfo(SelAnnotNo + 1).<Show>.Value
                        FlagInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Show>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Show>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Show>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Show>.Value = FlagInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(0).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(0).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(0).Value = FlagInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueType>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueType>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(1).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(1).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(1).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueParameter>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueParameter>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(2).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(2).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(2).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValue>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValue>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(3).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(3).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(3).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<FromValueCDF>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<FromValueCDF>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(4).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(4).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(4).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueType>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueType>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueType>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(5).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(5).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(5).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueParameter>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueParameter>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueParameter>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(6).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(6).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(6).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValue>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValue>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValue>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(7).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(7).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(7).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<ToValueCDF>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueCDF>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<ToValueCDF>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(8).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(8).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(8).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Probability>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Probability>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Probability>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Probability>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(9).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(9).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(9).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Color>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Color>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Color>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Color>.Value = TextInfo
                        'dgvAreaAnnot.Rows(NewAnnotNo).Cells(10).Style.BackColor = Color.FromArgb(dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Value)
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(10).Style.BackColor = dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Style.BackColor
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(10).Style.BackColor = Color.FromArgb(TextInfo)

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Thickness>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Thickness>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Thickness>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Thickness>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(11).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(11).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(11).Value = TextInfo

                        TextInfo = SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Density>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo + 1).<Density>.Value = SelDistribAreaAnnotInfo(SelAnnotNo).<Density>.Value
                        SelDistribAreaAnnotInfo(SelAnnotNo).<Density>.Value = TextInfo
                        dgvAreaAnnot.Rows(NewAnnotNo).Cells(12).Value = dgvAreaAnnot.Rows(SelAnnotNo).Cells(12).Value
                        dgvAreaAnnot.Rows(SelAnnotNo).Cells(12).Value = TextInfo

                        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
                        dgvAreaAnnot.ClearSelection()
                        dgvAreaAnnot.Rows(NewAnnotNo).Selected = True
                    End If
                End If
            End If
        Else
            Main.Message.Add("No annotation tab selected." & vbCrLf)
        End If

    End Sub

    Private Sub dgvPointAnnot_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointAnnot.CellEndEdit
        'The Annotation Settings have been edited.

        'If dgvPointAnnot.Focused Then
        Dim RowNo As Integer = e.RowIndex
        Dim RowCount As Integer = dgvPointAnnot.RowCount
        If RowNo = RowCount - 1 Then
            'This is the last user-add row - not yet editable!
        Else
            Dim ColNo As Integer = e.ColumnIndex
            Dim DistrbNo As Integer = SelDistrib
            Dim AnnotNo As Integer = RowNo
            'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
            Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Select Case ColNo
                'Case 0 'Show
                '    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                '        SelPointAnnotInfo.<Show>.Value = "true"
                '    Else
                '        SelPointAnnotInfo.<Show>.Value = "false"
                '    End If
                '    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(ChartInfo.ToString, True) 'Update the XML display
                '    ApplyAnnotation()
                    'Case 0 'PDF
                Case 1 'PDF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<PDF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<PDF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<PDF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<PDF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation()
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 2 'PDFLn
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<PDFLn>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<PDFLn>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<PDFLn>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<PDFLn>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 3 'PMF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<PMF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<PMF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<PMF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<PMF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 4 'PMFLn
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<PMFLn>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<PMFLn>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<PMFLn>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<PMFLn>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 5 'CDF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<CDF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<CDF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<CDF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<CDF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 6 'RevCDF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<RevCDF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<RevCDF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<RevCDF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<RevCDF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 7 'InvCDF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<InvCDF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<InvCDF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<InvCDF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<InvCDF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()
                Case 8 'InvRevCDF
                    If dgvPointAnnot.Rows(RowNo).Cells(ColNo).Value = True Then
                        'SelPointAnnotInfo.<InvRevCDF>.Value = "true"
                        SelDistribPointAnnotInfo(RowNo).<InvRevCDF>.Value = "true"
                    Else
                        'SelPointAnnotInfo.<InvRevCDF>.Value = "false"
                        SelDistribPointAnnotInfo(RowNo).<InvRevCDF>.Value = "false"
                    End If
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    'ApplyAnnotation(PointAnnotInfo)
                    UpdateAnnotation()

                Case 10 'Parameter
                    Select Case dgvPointAnnot.Rows(RowNo).Cells(9).Value
                        Case "Probability <="

                        Case "Probability >"

                        Case "Random Variable Value"
                            Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                            Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                            Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                            Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                            dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                            dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                            dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                            dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                            'SelPointAnnotInfo.<Parameter>.Value = RVValue
                            SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                            'SelPointAnnotInfo.<CdfProbability>.Value = CDF
                            SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                            'SelPointAnnotInfo.<RevCdfProbability>.Value = RevCDF
                            SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                            'SelPointAnnotInfo.<RandVarValue>.Value = RVValue
                            SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                            'SelPointAnnotInfo.<ProbabilityDensity>.Value = PDF
                            SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                            UpdateAnnotation()

                        Case "Mean"
                            'No parameter required

                        Case "Median"
                               'No parameter required

                        Case "Mode"
                               'No parameter required

                        Case "Standard Deviation"

                        Case "User Defined Value 1"

                        Case "User Defined Value 2"

                        Case Else
                            Main.Message.AddWarning("Unknown annotation type: " & dgvPointAnnot.Rows(RowNo).Cells(9).Value & vbCrLf)
                    End Select

                Case 11 'Label


            End Select
        End If
        'End If

    End Sub

    Private Sub dgvPointAnnot_CellStateChanged(sender As Object, e As DataGridViewCellStateChangedEventArgs) Handles dgvPointAnnot.CellStateChanged

    End Sub

    Private Sub dgvPointAnnot_CellLeave(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointAnnot.CellLeave

    End Sub

    Private Sub dgvPointAnnot_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointAnnot.CellClick

    End Sub

    Private Sub dgvPointAnnot_CellMouseUp(sender As Object, e As DataGridViewCellMouseEventArgs) Handles dgvPointAnnot.CellMouseUp

    End Sub

    Private Sub dgvPointAnnot_CellValueChanged(sender As Object, e As DataGridViewCellEventArgs) Handles dgvPointAnnot.CellValueChanged

    End Sub

    Private Sub dgvAreaAnnot_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvAreaAnnot.CellContentClick
        ''The Area Annotation settings have been edited.

        'Dim RowNo As Integer = e.RowIndex
        'Dim RowCount As Integer = dgvAreaAnnot.RowCount
        'If RowNo = RowCount - 1 Then
        '    'This is the last user-add row - not yet editable!
        'Else
        '    Dim ColNo As Integer = e.ColumnIndex
        '    Dim DistrbNo As Integer = SelDistrib
        '    Dim AnnotNo As Integer = RowNo
        '    'Dim SelPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
        'End If
    End Sub

    Private Sub dgvAreaAnnot_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvAreaAnnot.CellClick

        Dim ColNo As Integer = e.ColumnIndex
        If ColNo = 10 Then 'Area shading color has changed.
            Dim RowNo As Integer = e.RowIndex
            ColorDialog1.Color = dgvAreaAnnot.Rows(RowNo).Cells(ColNo).Style.BackColor
            Dim Result As DialogResult = ColorDialog1.ShowDialog()
            If Result = DialogResult.OK Then
                If dgvAreaAnnot.Rows(RowNo).Cells(ColNo).Style.BackColor = ColorDialog1.Color Then
                    'The shading color has not been changed.
                Else
                    dgvAreaAnnot.Rows(RowNo).Cells(ColNo).Style.BackColor = ColorDialog1.Color
                    'Dim AnnotNo As Integer = RowNo
                    'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
                    'Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                    Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
                    'SelAreaAnnotInfo.<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    'SelDistribPointAnnotInfo(RowNo).<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                    SelDistribAreaAnnotInfo(RowNo).<Color>.Value = ColorDialog1.Color.ToArgb.ToString
                End If
            End If
        End If
    End Sub

    Private Sub dgvAreaAnnot_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dgvAreaAnnot.CellEndEdit
        'The Area Annotation settings have been edited.

        Dim RowNo As Integer = e.RowIndex
        Dim RowCount As Integer = dgvAreaAnnot.RowCount
        If RowNo = RowCount - 1 Then
            'This is the last (user added) row - not yet editable!
        Else
            Dim ColNo As Integer = e.ColumnIndex
            Dim DistribNo As Integer = SelDistrib
            'Dim AnnotNo As Integer = RowNo
            'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = AnnotNo
            'Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            Select Case ColNo
                Case 0 'Show
                    'SelAreaAnnotInfo.<Show>.Value = dgvAreaAnnot.Rows(RowNo).Cells(0).Value
                    'SelDistribPointAnnotInfo(RowNo).<Show>.Value = dgvAreaAnnot.Rows(RowNo).Cells(0).Value
                    SelDistribAreaAnnotInfo(RowNo).<Show>.Value = dgvAreaAnnot.Rows(RowNo).Cells(0).Value
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                Case 1 'From Value Type

                Case 2 'From Value Parameter
                    Select Case dgvAreaAnnot.Rows(RowNo).Cells(1).Value 'From Value Type
                        Case "Probability <=" 'From Value parameter is the Prob <= probability
                            'Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(2).Value  'From Value probability
                            Dim FromValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(2).Value  'From Value probability
                            Dim RVValue As Double = SelectedDistrib.InvCDF(FromValParam)
                            Dim FromValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(3).Value = RVValue 'From Value
                            dgvAreaAnnot.Rows(RowNo).Cells(4).Value = FromValueCDF 'From Value CDF
                            SelDistribAreaAnnotInfo(RowNo).<FromValue>.Value = RVValue
                            SelDistribAreaAnnotInfo(RowNo).<FromValueCDF>.Value = FromValueCDF
                            Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - FromValueCDF
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Probability >" 'From Value parameter is the Prob > probability
                            'Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(2).Value  'From Value probability
                            Dim FromValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(2).Value  'From Value probability
                            Dim RVValue As Double = SelectedDistrib.InvRevCDF(FromValParam)
                            'Dim FromValueRevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                            Dim FromValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(3).Value = RVValue 'From Value
                            'dgvAreaAnnot.Rows(RowNo).Cells(4).Value = FromValueRevCDF 'From Value Rev CDF
                            dgvAreaAnnot.Rows(RowNo).Cells(4).Value = FromValueCDF 'From Value Rev CDF
                            SelDistribAreaAnnotInfo(RowNo).<FromValue>.Value = RVValue
                            'SelDistribAreaAnnotInfo(RowNo).<FromValueCDF>.Value = FromValueRevCDF
                            SelDistribAreaAnnotInfo(RowNo).<FromValueCDF>.Value = FromValueCDF
                            'Dim Prob As Double = FromValueRevCDF - dgvAreaAnnot.Rows(RowNo).Cells(8).Value
                            'Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - FromValueRevCDF
                            Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - FromValueCDF
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Random Variable Value"
                            Dim FromValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(2).Value  'From Value probability
                            Dim RVValue As Double = FromValParam
                            Dim FromValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(3).Value = RVValue
                            dgvAreaAnnot.Rows(RowNo).Cells(4).Value = FromValueCDF
                            SelDistribAreaAnnotInfo(RowNo).<FromValue>.Value = RVValue
                            SelDistribAreaAnnotInfo(RowNo).<FromValueCDF>.Value = FromValueCDF
                            Dim Prob As Double = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - FromValueCDF
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Mean"


                        Case "Median"

                        Case "Mode"

                        Case "Standard Deviation"

                        Case "User Defined Value 1"

                        Case "User Defined Value 2"

                        Case Else
                            Main.Message.AddWarning("Unknown annotation type: " & dgvAreaAnnot.Rows(RowNo).Cells(1).Value & vbCrLf)
                    End Select
                Case 3 'From Value

                        Case 4 'From Value CDF

                        Case 5  'To Value Type

                        Case 6 'To Value Parameter
                    Select Case dgvAreaAnnot.Rows(RowNo).Cells(5).Value 'To Value Type
                        Case "Probability <=" 'To Value parameter is the Prob <= probability
                            Dim ToValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(6).Value  'To Value probability
                            Dim RVValue As Double = SelectedDistrib.InvCDF(ToValParam)
                            Dim ToValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(7).Value = RVValue 'To Value
                            dgvAreaAnnot.Rows(RowNo).Cells(8).Value = ToValueCDF 'From Value CDF
                            SelDistribAreaAnnotInfo(RowNo).<ToValue>.Value = RVValue
                            SelDistribAreaAnnotInfo(RowNo).<ToValueCDF>.Value = ToValueCDF
                            Dim Prob As Double = ToValueCDF - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Probability >" 'To Value parameter is the Prob > probability
                            Dim ToValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(6).Value  'To Value probability
                            Dim RVValue As Double = SelectedDistrib.InvRevCDF(ToValParam)
                            'Dim ToValueRevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                            Dim ToValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(7).Value = RVValue 'To Value
                            dgvAreaAnnot.Rows(RowNo).Cells(8).Value = ToValueCDF 'To Value CDF
                            SelDistribAreaAnnotInfo(RowNo).<ToValue>.Value = RVValue
                            'SelDistribAreaAnnotInfo(RowNo).<ToValueCDF>.Value = ToValueRevCDF
                            SelDistribAreaAnnotInfo(RowNo).<ToValueCDF>.Value = ToValueCDF
                            'Dim Prob As Double = ToValueRevCDF - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                            Dim Prob As Double = ToValueCDF - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Random Variable Value"
                            Dim ToValParam As Double = dgvAreaAnnot.Rows(RowNo).Cells(6).Value
                            Dim RVValue As Double = ToValParam
                            Dim ToValueCDF As Double = SelectedDistrib.CDF(RVValue)
                            dgvAreaAnnot.Rows(RowNo).Cells(7).Value = RVValue 'To Value
                            dgvAreaAnnot.Rows(RowNo).Cells(8).Value = ToValueCDF
                            SelDistribAreaAnnotInfo(RowNo).<ToValue>.Value = RVValue
                            SelDistribAreaAnnotInfo(RowNo).<ToValueCDF>.Value = ToValueCDF
                            Dim Prob As Double = ToValueCDF - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = Prob
                            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = Prob
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display

                        Case "Mean"


                        Case "Median"

                        Case "Mode"

                        Case "Standard Deviation"

                        Case "User Defined Value 1"

                        Case "User Defined Value 2"

                        Case Else
                            Main.Message.AddWarning("Unknown annotation type: " & dgvAreaAnnot.Rows(RowNo).Cells(1).Value & vbCrLf)
                    End Select

                Case 7  'To Value

                        Case 8 'To Value CDF

                        Case 9 'Probability

                        Case 10 'Color

                        Case 11 'Thickness
                            'SelAreaAnnotInfo.<Thickness>.Value = dgvAreaAnnot.Rows(RowNo).Cells(11).Value
                            'SelDistribPointAnnotInfo(RowNo).<Thickness>.Value = dgvAreaAnnot.Rows(RowNo).Cells(11).Value
                            SelDistribAreaAnnotInfo(RowNo).<Thickness>.Value = dgvAreaAnnot.Rows(RowNo).Cells(11).Value
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                        Case 12 'Density
                            'SelAreaAnnotInfo.<Density>.Value = dgvAreaAnnot.Rows(RowNo).Cells(12).Value
                            'SelDistribPointAnnotInfo(RowNo).<Density>.Value = dgvAreaAnnot.Rows(RowNo).Cells(12).Value
                            SelDistribAreaAnnotInfo(RowNo).<Density>.Value = dgvAreaAnnot.Rows(RowNo).Cells(12).Value
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                        Case 13
                            'SelAreaAnnotInfo.<Intensity>.Value = dgvAreaAnnot.Rows(RowNo).Cells(13).Value
                            SelDistribAreaAnnotInfo(RowNo).<Intensity>.Value = dgvAreaAnnot.Rows(RowNo).Cells(13).Value
                            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    End Select
        End If
    End Sub

    Private Sub dgvAreaAnnot_EditingControlShowing(sender As Object, e As DataGridViewEditingControlShowingEventArgs) Handles dgvAreaAnnot.EditingControlShowing

        If dgvAreaAnnot.CurrentCell.ColumnIndex = 1 Then 'From Value Type selected
            Dim combo As ComboBox = CType(e.Control, ComboBox)
            If (combo IsNot Nothing) Then
                combo.Name = "cboFromValueType"
                'Remove current handler:
                RemoveHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
                'Add the event handler:
                AddHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
            End If
        ElseIf dgvAreaAnnot.CurrentCell.ColumnIndex = 5 Then 'To Value Type selected
            Dim combo As ComboBox = CType(e.Control, ComboBox)
            If (combo IsNot Nothing) Then
                combo.Name = "cboToValueType"
                'Remove current handler:
                RemoveHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
                'Add the event handler:
                AddHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
            End If
        ElseIf dgvAreaAnnot.CurrentCell.ColumnIndex = 13 Then 'Shading Intensity selected
            Dim combo As ComboBox = CType(e.Control, ComboBox)
            If (combo IsNot Nothing) Then
                combo.Name = "cboIntensity"
                'Remove current handler:
                RemoveHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
                'Add the event handler:
                AddHandler combo.SelectionChangeCommitted, New EventHandler(AddressOf AreaComboBox_SelectionChangeCommitted)
            End If
        End If
    End Sub

    Private Sub AreaComboBox_SelectionChangeCommitted(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim combo As ComboBox = CType(sender, ComboBox)

        Dim RowNo As Integer = dgvAreaAnnot.SelectedCells(0).RowIndex
        dgvAreaAnnot.AllowUserToAddRows = False

        If combo.Name = "cboFromValueType" Then
            Select Case combo.SelectedItem.ToString
                Case "Minimum"
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Minimum", "", "", 0, "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Minimum" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = "" 'From Value Parameter - not required.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = "" 'From Value - not required.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = 0 'From Value CDF - Zero.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If
                Case "Probability <="
                    Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Probability <=", 0.1, P10Value, 0.1, "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Probability <=" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = 0.1 'From Value Parameter - use default value of 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = P10Value 'From Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = 0.1 'From Value CDF - 0.1.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Probability >"
                    Dim P90Value As Double = GetInvRevCdfValue(0.9)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        'Note for RevCDF = 0.9, the corresponding CDF = 0.1
                        dgvAreaAnnot.Rows.Add({True, "Probability >", 0.9, P90Value, 0.1, "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Probability >" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = 0.9 'From Value Parameter - use default value of 0.9.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = P90Value 'From Value - Default: P90Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = 0.1 'From Value CDF - 0.1. (CDF value is 1 - RevCDF value)
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Random Variable Value"
                    Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Random Variable Value", P10Value, P10Value, 0.1, "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Random Variable Value" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = P10Value 'From Value Parameter - use default value of 0.9.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = P10Value 'From Value - Default: P90Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = 0.1 'From Value CDF - 0.1. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Mean"
                    Dim Mean As Double = SelectedDistrib.Mean
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P90Value As Double = SelectedDistrib.InvCDF(0.9)   'Default probability value: 0.9 (P90)
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "Probability <=", 0.9, SelectedDistrib.InvCDF(0.9), 0.9, 0.9 - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Mean" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = "" 'From Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = Mean 'From Value - Mean.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(Mean) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Median"
                    Dim Median As Double = SelectedDistrib.Median
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P90Value As Double = SelectedDistrib.InvCDF(0.9)   'Default probability value: 0.9 (P90)
                        dgvAreaAnnot.Rows.Add({True, "Median", "", Median, SelectedDistrib.CDF(Median), "Probability <=", 0.9, SelectedDistrib.InvCDF(0.9), 0.9, 0.9 - SelectedDistrib.CDF(Median), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Median" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = "" 'From Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = Median 'From Value - Mean.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(Median) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Mode"
                    Dim Mode As Double = SelectedDistrib.Mode
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P90Value As Double = SelectedDistrib.InvCDF(0.9)   'Default probability value: 0.9 (P90)
                        dgvAreaAnnot.Rows.Add({True, "Mode", "", Mode, SelectedDistrib.CDF(Mode), "Probability <=", 0.9, SelectedDistrib.InvCDF(0.9), 0.9, 0.9 - SelectedDistrib.CDF(Mode), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Mode" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = "" 'From Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = Mode 'From Value - Mean.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(Mode) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Standard Deviation"
                    Dim Mean As Double = SelectedDistrib.Mean
                    Dim StdDev As Double = SelectedDistrib.StdDev 'The Standard Deviation of the series

                    Dim SDevN As Integer
                    Dim ValFound As Boolean
                    'Find an unused negative standard deviation number
                    Dim Row As Integer
                    For SDevN = -1 To -dgvAreaAnnot.RowCount Step -1
                        ValFound = False
                        For Row = 0 To dgvAreaAnnot.RowCount - 1
                            If dgvAreaAnnot.Rows(Row).Cells(1).Value = "Standard Deviation" Then
                                If dgvAreaAnnot.Rows(Row).Cells(2).Value = SDevN Then
                                    ValFound = True
                                    Exit For
                                End If
                            End If
                        Next
                        If ValFound = False Then Exit For 'SDevN contains an unused negative standard deviation numner
                    Next

                    Dim SDevNValue = Mean + SDevN * StdDev

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then 'Add new row
                        'Use Mean as the default To Value
                        dgvAreaAnnot.Rows.Add({True, "Standard Deviation", SDevN, SDevNValue, SelectedDistrib.CDF(SDevNValue), "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - SelectedDistrib.CDF(SDevNValue), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else 'Update row
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "Standard Deviation" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = SDevN 'From Value Parameter
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = SDevNValue 'From Value 
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(SDevNValue) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "User Defined Value 1"
                    Dim UserDef1 As Double = Val(txtUserDef1.Text)

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "User Defined Value 1", UserDef1, UserDef1, SelectedDistrib.CDF(UserDef1), "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - SelectedDistrib.CDF(UserDef1), "", 1, 2, "50"}) 'From Value Type | From Value Parameter | From Value | From Value CDF | To Value Type | To Value Parameter | To Value | To Value CDF | Probability | Color | Thickness | Density | Intensity
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        'From Value Type | From Value Parameter | From Value | From Value CDF | To Value Type | To Value Parameter | To Value | To Value CDF | Probability | Color | Thickness | Density
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "User Defined Value 1" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = UserDef1 'From Value Parameter - use default value of 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = UserDef1 'From Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(UserDef1) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "User Defined Value 2"
                    Dim UserDef2 As Double = Val(txtUserDef2.Text)

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "User Defined Value 2", UserDef2, UserDef2, SelectedDistrib.CDF(UserDef2), "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - SelectedDistrib.CDF(UserDef2), "", 1, 2, "50"}) 'From Value Type | From Value Parameter | From Value | From Value CDF | To Value Type | To Value Parameter | To Value | To Value CDF | Probability | Color | Thickness | Density | Intensity
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(0).Value = True 'Show
                        dgvAreaAnnot.Rows(RowNo).Cells(1).Value = "User Defined Value 2" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(2).Value = UserDef2 'From Value Parameter - use default value of 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(3).Value = UserDef2 'From Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(4).Value = SelectedDistrib.CDF(UserDef2) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

            End Select

        ElseIf combo.Name = "cboToValueType" Then
            Select Case combo.SelectedItem.ToString
                Case "Maximum"
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the From Value as the Default.
                        dgvAreaAnnot.Rows.Add(True, {"Mean", "", Mean, SelectedDistrib.CDF(Mean), "Maximum", "", "", 1, 1 - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Maximum" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = "" 'To Value Parameter - not required.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = "" 'To Value - not required.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = 1 'To Value CDF - One.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Probability <="
                    Dim P90Value As Double = SelectedDistrib.InvCDF(0.9)   'Default probability value: 0.9 (P90)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the From Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "Probability <=", 0.9, P90Value, 0.9, 0.9 - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Probability <=" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = 0.9 'To Value Parameter - Default: 0.9.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = P90Value 'To Value - Default: P90Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = 0.9 'To Value CDF - Default 0.9.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Probability >"
                    Dim P10Value As Double = GetInvRevCdfValue(0.1)  'Default probability value: 0.1 (P10)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the From Value as the Default.
                        'Note for RevCDF = 0.1, the corresponding CDF = 0.9
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "Probability >", 0.1, P10Value, 0.1, 0.9 - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Probability >" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = 0.1 'To Value Parameter - Default: 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = P10Value 'To Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = 0.9 'To Value CDF - Default 0.9.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Random Variable Value"
                    Dim P90Value As Double = SelectedDistrib.CDF(0.9)   'Default probability value: 0.9 (P90)
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the From Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "Random Variable Value", 0.9, P90Value, 0.9, 0.9 - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Random Variable Value" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = 0.9 'To Value Parameter - Default: 0.9.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = P90Value 'To Value - Default: P90Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = 0.9 'To Value CDF - Default 0.9.
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Mean"
                    Dim Mean As Double = SelectedDistrib.Mean
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                        dgvAreaAnnot.Rows.Add({True, "Probability <=", 0.1, P10Value, 0.1, "Mean", "", Mean, SelectedDistrib.CDF(Mean), SelectedDistrib.CDF(Mean) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Mean" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = "" 'To Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = Mean 'To Value - Mean.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(Mean) 'To Value CDF
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Median"
                    Dim Median As Double = SelectedDistrib.Median
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                        dgvAreaAnnot.Rows.Add({True, "Probability <=", 0.1, P10Value, 0.1, "Median", "", Median, SelectedDistrib.CDF(Median), SelectedDistrib.CDF(Median) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Median" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = "" 'To Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = Median 'To Value - Median.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(Median) 'To Value CDF
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Mode"
                    Dim Mode As Double = SelectedDistrib.Mode
                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                        dgvAreaAnnot.Rows.Add({True, "Probability <=", 0.1, P10Value, 0.1, "Mode", "", Mode, SelectedDistrib.CDF(Mode), SelectedDistrib.CDF(Mode) - 0.1, "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Mode" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = "" 'To Value Parameter - no parameter required.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = Mode 'To Value - Mode.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(Mode) 'To Value CDF
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "Standard Deviation"
                    Dim Mean As Double = SelectedDistrib.Mean
                    Dim StdDev As Double = SelectedDistrib.StdDev 'The Standard Deviation of the series

                    Dim SDev As Integer
                    Dim ValFound As Boolean
                    Dim Row As Integer
                    For SDev = 1 To dgvAreaAnnot.RowCount
                        ValFound = False
                        For Row = 0 To dgvAreaAnnot.RowCount - 1
                            If dgvAreaAnnot.Rows(Row).Cells(5).Value = "Standard Deviation" Then
                                If dgvAreaAnnot.Rows(Row).Cells(6).Value = SDev Then
                                    ValFound = True
                                    Exit For
                                End If
                            End If
                        Next
                        If ValFound = False Then Exit For 'SDev contains an unused standard deviation number.
                    Next

                    Dim SDevValue = Mean + SDev * StdDev

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then 'Add new row
                        Dim P10Value As Double = SelectedDistrib.InvCDF(0.1)   'Default probability value: 0.1 (P10)
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "Standard Deviation", SDev, SDevValue, SelectedDistrib.CDF(SDevValue), SelectedDistrib.CDF(SDevValue) - SelectedDistrib.CDF(Mean), "", 1, 2, "50"})
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else 'Update row
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "Standard Deviation" 'To Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = SDev 'To Value Parameter
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = SDevValue 'To Value
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(SDevValue) 'To Value CDF
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "User Defined Value 1"
                    Dim UserDef1 As Double = Val(txtUserDef1.Text)

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "User Defined Value 1", UserDef1, UserDef1, SelectedDistrib.CDF(UserDef1), SelectedDistrib.CDF(UserDef1) - SelectedDistrib.CDF(Mean), "", 1, 2, "50"}) 'From Value Type | From Value Parameter | From Value | From Value CDF | To Value Type | To Value Parameter | To Value | To Value CDF | Probability | Color | Thickness | Density | Intensity
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "User Defined Value 1" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = UserDef1 'From Value Parameter - use default value of 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = UserDef1 'From Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(UserDef1) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

                Case "User Defined Value 2"
                    Dim UserDef2 As Double = Val(txtUserDef2.Text)

                    If RowNo > dgvAreaAnnot.RowCount - 1 Then
                        Dim Mean As Double = SelectedDistrib.Mean 'Use the Mean value as the To Value as the Default.
                        dgvAreaAnnot.Rows.Add({True, "Mean", "", Mean, SelectedDistrib.CDF(Mean), "User Defined Value 2", UserDef2, UserDef2, SelectedDistrib.CDF(UserDef2), SelectedDistrib.CDF(UserDef2) - SelectedDistrib.CDF(Mean), "", 1, 2, "50"}) 'From Value Type | From Value Parameter | From Value | From Value CDF | To Value Type | To Value Parameter | To Value | To Value CDF | Probability | Color | Thickness | Density | Intensity
                        dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor = Color.Red
                        AddXmlAreaAnnotInfo(RowNo)
                    Else
                        dgvAreaAnnot.Rows(RowNo).Cells(5).Value = "User Defined Value 2" 'From Value Type
                        dgvAreaAnnot.Rows(RowNo).Cells(6).Value = UserDef2 'From Value Parameter - use default value of 0.1.
                        dgvAreaAnnot.Rows(RowNo).Cells(7).Value = UserDef2 'From Value - Default: P10Value.
                        dgvAreaAnnot.Rows(RowNo).Cells(8).Value = SelectedDistrib.CDF(UserDef2) 'From Value CDF. 
                        If dgvAreaAnnot.Rows(RowNo).Cells(4).ValueType = GetType(String) Then 'If the Value Type is a string, then the probability can not be calculated.
                            'The To Value CDF is not defined.
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = "" 'The Probability can not be calculated.
                        Else
                            'Calculate the Probability that the Random Variable will lie between From Value and To Value:
                            dgvAreaAnnot.Rows(RowNo).Cells(9).Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value - dgvAreaAnnot.Rows(RowNo).Cells(4).Value
                        End If
                        UpdateXmlAreaAnnotInfo(RowNo)
                    End If

            End Select
        Else
            Main.Message.AddWarning("Unknown combo box: " & combo.Name & vbCrLf)
        End If

        dgvAreaAnnot.AllowUserToAddRows = True

    End Sub

    Private Sub AddXmlAreaAnnotInfo(RowNo As Integer)
        'Add an entry to AreaAnnotInfo
        'DistribAnnotNo is the annotation number within the selected distribution.
        'ChartAnnotNo is the annotation number within the chart - which may contain multiple distributions.
        '    When the distribution parameters are changed the corresponding annotation in the chart is updated by referencing the ChartAnnotNo.
        Dim NewAreaAnnotInfo = <?xml version="1.0" encoding="utf-8"?>
                               <AreaAnnotation>
                                   <DistributionNo><%= SelDistrib %></DistributionNo>
                                   <Show><%= dgvAreaAnnot.Rows(RowNo).Cells(0).Value %></Show>
                                   <FromValueType><%= dgvAreaAnnot.Rows(RowNo).Cells(1).Value %></FromValueType>
                                   <FromValueParameter><%= dgvAreaAnnot.Rows(RowNo).Cells(2).Value %></FromValueParameter>
                                   <FromValue><%= dgvAreaAnnot.Rows(RowNo).Cells(3).Value %></FromValue>
                                   <FromValueCDF><%= dgvAreaAnnot.Rows(RowNo).Cells(4).Value %></FromValueCDF>
                                   <ToValueType><%= dgvAreaAnnot.Rows(RowNo).Cells(5).Value %></ToValueType>
                                   <ToValueParameter><%= dgvAreaAnnot.Rows(RowNo).Cells(6).Value %></ToValueParameter>
                                   <ToValue><%= dgvAreaAnnot.Rows(RowNo).Cells(7).Value %></ToValue>
                                   <ToValueCDF><%= dgvAreaAnnot.Rows(RowNo).Cells(8).Value %></ToValueCDF>
                                   <Probability><%= dgvAreaAnnot.Rows(RowNo).Cells(9).Value %></Probability>
                                   <Color><%= dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor.ToArgb.ToString %></Color>
                                   <Thickness><%= dgvAreaAnnot.Rows(RowNo).Cells(11).Value %></Thickness>
                                   <Density><%= dgvAreaAnnot.Rows(RowNo).Cells(12).Value %></Density>
                                   <Intensity><%= dgvAreaAnnot.Rows(RowNo).Cells(13).Value %></Intensity>
                               </AreaAnnotation>

        '<DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '<ChartAnnotNo></ChartAnnotNo>

        '<AreaAnnotation>
        '    <DistributionNo><%= SelDistrib %></DistributionNo>
        '    <DistribAnnotNo><%= RowNo %></DistribAnnotNo>
        '    <ChartAnnotNo></ChartAnnotNo>
        '    <FromValueType><%= dgvAreaAnnot.Rows(RowNo).Cells(0).Value %></FromValueType>
        '    <FromValueParameter><%= dgvAreaAnnot.Rows(RowNo).Cells(1).Value %></FromValueParameter>
        '    <FromValue><%= dgvAreaAnnot.Rows(RowNo).Cells(2).Value %></FromValue>
        '    <FromValueCDF><%= dgvAreaAnnot.Rows(RowNo).Cells(3).Value %></FromValueCDF>
        '    <ToValueType><%= dgvAreaAnnot.Rows(RowNo).Cells(4).Value %></ToValueType>
        '    <ToValueParameter><%= dgvAreaAnnot.Rows(RowNo).Cells(5).Value %></ToValueParameter>
        '    <ToValue><%= dgvAreaAnnot.Rows(RowNo).Cells(6).Value %></ToValue>
        '    <ToValueCDF><%= dgvAreaAnnot.Rows(RowNo).Cells(7).Value %></ToValueCDF>
        '    <Probability><%= dgvAreaAnnot.Rows(RowNo).Cells(8).Value %></Probability>
        '    <Color><%= dgvAreaAnnot.Rows(RowNo).Cells(9).Style.BackColor.ToArgb.ToString %></Color>
        '    <Thickness><%= dgvAreaAnnot.Rows(RowNo).Cells(10).Value %></Thickness>
        '    <Density><%= dgvAreaAnnot.Rows(RowNo).Cells(11).Value %></Density>
        '</AreaAnnotation>

        If IsNothing(myParent.AreaAnnotInfo) Then
            myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.First.Add(NewAreaAnnotInfo.<AreaAnnotation>)
            myParent.AreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation>
        Else
            Dim AnnotCount As Integer = myParent.AreaAnnotInfo.Count
            If AnnotCount = 0 Then
                myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.First.Add(NewAreaAnnotInfo.<AreaAnnotation>)
                myParent.AreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation>
            Else
                myParent.AreaAnnotInfo(AnnotCount - 1).AddAfterSelf(NewAreaAnnotInfo.<AreaAnnotation>)
            End If

        End If

        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub UpdateXmlAreaAnnotInfo(RowNo As Integer)
        'Update the XML Area Annotation Info
        'Dim SelAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib And item.<DistribAnnotNo>.Value = RowNo
        'Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
        Dim SelDistribAreaAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib

        'If SelAreaAnnotInfo.Count = 0 Then
        'If SelDistribPointAnnotInfo.Count < RowNo - 1 Then
        If SelDistribAreaAnnotInfo.Count < RowNo - 1 Then
            Main.Message.AddWarning("An annotation with Distribution Number = " & SelDistrib & " annotation number = " & RowNo & " was not found." & vbCrLf)
            'Main.Message.AddWarning("Renumbering the annotation numbers for the selected distribution." & vbCrLf)
            'Dim Annotations = From item In myParent.ChartInfo.<ChartSettings>.<AreaAnnotationCollection>.<AreaAnnotation> Where item.<DistributionNo>.Value = SelDistrib
            'Dim I As Integer = 0
            'For Each item In Annotations
            '    item.<DistribAnnotNo>.Value = I
            '    I += 1
            'Next
        Else
            'SelAreaAnnotInfo.<Show>.Value = dgvAreaAnnot.Rows(RowNo).Cells(0).Value
            SelDistribAreaAnnotInfo(RowNo).<Show>.Value = dgvAreaAnnot.Rows(RowNo).Cells(0).Value
            SelDistribAreaAnnotInfo(RowNo).<FromValueType>.Value = dgvAreaAnnot.Rows(RowNo).Cells(1).Value
            SelDistribAreaAnnotInfo(RowNo).<FromValueParameter>.Value = dgvAreaAnnot.Rows(RowNo).Cells(2).Value
            SelDistribAreaAnnotInfo(RowNo).<FromValue>.Value = dgvAreaAnnot.Rows(RowNo).Cells(3).Value
            SelDistribAreaAnnotInfo(RowNo).<FromValueCDF>.Value = dgvAreaAnnot.Rows(RowNo).Cells(4).Value
            SelDistribAreaAnnotInfo(RowNo).<ToValueType>.Value = dgvAreaAnnot.Rows(RowNo).Cells(5).Value
            SelDistribAreaAnnotInfo(RowNo).<ToValueParameter>.Value = dgvAreaAnnot.Rows(RowNo).Cells(6).Value
            SelDistribAreaAnnotInfo(RowNo).<ToValue>.Value = dgvAreaAnnot.Rows(RowNo).Cells(7).Value
            SelDistribAreaAnnotInfo(RowNo).<ToValueCDF>.Value = dgvAreaAnnot.Rows(RowNo).Cells(8).Value
            SelDistribAreaAnnotInfo(RowNo).<Probability>.Value = dgvAreaAnnot.Rows(RowNo).Cells(9).Value
            SelDistribAreaAnnotInfo(RowNo).<Color>.Value = dgvAreaAnnot.Rows(RowNo).Cells(10).Style.BackColor.ToArgb.ToString
            SelDistribAreaAnnotInfo(RowNo).<Thickness>.Value = dgvAreaAnnot.Rows(RowNo).Cells(11).Value
            SelDistribAreaAnnotInfo(RowNo).<Density>.Value = dgvAreaAnnot.Rows(RowNo).Cells(12).Value
            SelDistribAreaAnnotInfo(RowNo).<Intensity>.Value = dgvAreaAnnot.Rows(RowNo).Cells(13).Value
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
        End If

    End Sub

    Private Sub hsUserDef1_Scroll(sender As Object, e As ScrollEventArgs) Handles hsUserDef1.Scroll
        'The User Defined Value 1 scrollbar has been adjusted.

        'Main.Message.Add("Scroll value = " & e.NewValue & "  Minimum = " & Main.Distribution.ContSampling.Minimum & "  Interval = " & Main.Distribution.ContSampling.Interval & "  Maximum = " & hsUserDef1.Maximum & vbCrLf)
        Dim UserDef1 As Double = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (e.NewValue - 1)

        txtUserDef1.Text = UserDef1

        'txtUserDef1.Text = UserDef1
        ''Main.Message.Add("User Defined 1 value = " & UserDef1 & vbCrLf)
        'Dim UserDef1PDF As Double = SelectedDistrib.PDF(UserDef1)
        'Dim UserDef1CDF As Double = SelectedDistrib.CDF(UserDef1)
        'Dim UserDef1RevCDF As Double = SelectedDistrib.RevCDF(UserDef1)

        ''Update the Area Annotation settings:
        'dgvAreaAnnot.AllowUserToAddRows = False
        'Dim NSettings As Integer = dgvAreaAnnot.Rows.Count
        'Dim I As Integer
        'Dim UpdateShading As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvAreaAnnot.Rows(I).Cells(1).Value = "User Defined Value 1" Then
        '        dgvAreaAnnot.Rows(I).Cells(2).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(3).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(4).Value = UserDef1CDF
        '        If dgvAreaAnnot.Rows(I).Cells(8).ValueType = GetType(String) Then
        '            'To Value CDF not defined: The probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        '    If dgvAreaAnnot.Rows(I).Cells(5).Value = "User Defined Value 1" Then
        '        dgvAreaAnnot.Rows(I).Cells(6).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(7).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(8).Value = UserDef1CDF
        '        If dgvAreaAnnot.Rows(I).Cells(4).ValueType = GetType(String) Then
        '            'From Value CDF not defined: The probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        'Next
        'dgvAreaAnnot.AllowUserToAddRows = True


        ''Update the Point Annotation settings:
        'dgvPointAnnot.AllowUserToAddRows = False
        'NSettings = dgvPointAnnot.Rows.Count
        'Dim UpdatePointAnnot As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvPointAnnot.Rows(I).Cells(9).Value = "User Defined Value 1" Then 'Annotation Type
        '        dgvPointAnnot.Rows(I).Cells(10).Value = UserDef1 'Parameter
        '        dgvPointAnnot.Rows(I).Cells(12).Value = UserDef1CDF 'CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(13).Value = UserDef1RevCDF 'Rev CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(14).Value = UserDef1 'Random Variable Value
        '        dgvPointAnnot.Rows(I).Cells(15).Value = UserDef1PDF 'Probability Density
        '        UpdateXmlPointAnnotInfo(I)
        '        UpdatePointAnnot = True
        '    End If
        'Next
        'dgvPointAnnot.AllowUserToAddRows = True


        'If UpdateShading Or UpdatePointAnnot Then
        '    myChart.Annotations.Clear()
        '    ApplyAreaShading()
        '    UpdateAnnotation()
        'End If

        'DirectCast(myParent, frmChart).UpdateUserDef1(UserDef1, SelDistrib)
        'DirectCast(myParent, frmChart).PlotChart()

        myParent.UpdateUserDef1(UserDef1, SelDistrib)
        myParent.PlotChart()
        'Main.Message.Add("11 Chart1.ChartAreas.Count = " & frmParent.Chart1.ChartAreas.Count & vbCrLf)

    End Sub

    Private Sub hsUserDef1_MouseUp(sender As Object, e As MouseEventArgs) Handles hsUserDef1.MouseUp

    End Sub

    Private Sub hsUserDef1_ValueChanged(sender As Object, e As EventArgs) Handles hsUserDef1.ValueChanged
        ''The User Defined Value 1 scrollbar has been adjusted.

        ''Main.Message.Add("Scroll value = " & e.NewValue & "  Minimum = " & Main.Distribution.ContSampling.Minimum & "  Interval = " & Main.Distribution.ContSampling.Interval & "  Maximum = " & hsUserDef1.Maximum & vbCrLf)
        'Dim UserDef1 As Double = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (hsUserDef1.Value - 1)
        'txtUserDef1.Text = UserDef1
        'Dim UserDef1PDF As Double = SelectedDistrib.PDF(UserDef1)
        'Dim UserDef1CDF As Double = SelectedDistrib.CDF(UserDef1)
        'Dim UserDef1RevCDF As Double = SelectedDistrib.RevCDF(UserDef1)

        ''Update the Area Annotation settings:
        'dgvAreaAnnot.AllowUserToAddRows = False
        'Dim NSettings As Integer = dgvAreaAnnot.Rows.Count
        'Dim I As Integer
        'Dim UpdateShading As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvAreaAnnot.Rows(I).Cells(1).Value = "User Defined Value 1" Then
        '        dgvAreaAnnot.Rows(I).Cells(2).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(3).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(4).Value = UserDef1CDF
        '        If dgvAreaAnnot.Rows(I).Cells(8).ValueType = GetType(String) Then
        '            'To Value CDF not defined: The probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        '    If dgvAreaAnnot.Rows(I).Cells(5).Value = "User Defined Value 1" Then
        '        dgvAreaAnnot.Rows(I).Cells(6).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(7).Value = UserDef1
        '        dgvAreaAnnot.Rows(I).Cells(8).Value = UserDef1CDF
        '        If dgvAreaAnnot.Rows(I).Cells(4).ValueType = GetType(String) Then
        '            'From Value CDF not defined: THe probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        'Next
        'dgvAreaAnnot.AllowUserToAddRows = True


        ''Update the Point Annotation settings:
        'dgvPointAnnot.AllowUserToAddRows = False
        'NSettings = dgvPointAnnot.Rows.Count
        'Dim UpdatePointAnnot As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvPointAnnot.Rows(I).Cells(9).Value = "User Defined Value 1" Then 'Annotation Type
        '        dgvPointAnnot.Rows(I).Cells(10).Value = UserDef1 'Parameter
        '        'dgvPointAnnot.Rows(I).Cells(3).Value = UserDef1
        '        dgvPointAnnot.Rows(I).Cells(12).Value = UserDef1CDF 'CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(13).Value = UserDef1RevCDF 'Rev CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(14).Value = UserDef1 'Random Variable Value
        '        dgvPointAnnot.Rows(I).Cells(15).Value = UserDef1PDF 'Probability Density

        '        UpdateXmlPointAnnotInfo(I)
        '        UpdatePointAnnot = True
        '    End If
        'Next
        'dgvPointAnnot.AllowUserToAddRows = True

        ''If UpdateShading Then ApplyAreaShading()
        ''If UpdateShading Then UpdateAreaShading()
        ''If UpdateShading Then
        'If UpdateShading Or UpdatePointAnnot Then
        '    ApplyAnnotation()
        '    ApplyAreaShading()
        'End If
    End Sub

    Private Sub hsUserDef2_Scroll(sender As Object, e As ScrollEventArgs) Handles hsUserDef2.Scroll
        'The User Defined Value 2 scrollbar has been adjusted.

        Dim UserDef2 As Double = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (e.NewValue - 1)
        myParent.UpdateUserDef2(UserDef2, SelDistrib)
        myParent.PlotChart()




        ''Main.Message.Add("Scroll value = " & e.NewValue & vbCrLf)
        'Dim UserDef2 As Double = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (e.NewValue - 1)
        'txtUserDef2.Text = UserDef2
        'Dim UserDef2PDF As Double = SelectedDistrib.PDF(UserDef2)
        'Dim UserDef2CDF As Double = SelectedDistrib.CDF(UserDef2)
        'Dim UserDef2RevCDF As Double = SelectedDistrib.RevCDF(UserDef2)

        ''Update the Area Annotation settings:
        'dgvAreaAnnot.AllowUserToAddRows = False
        'Dim NSettings As Integer = dgvAreaAnnot.Rows.Count
        'Dim I As Integer
        'Dim UpdateShading As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvAreaAnnot.Rows(I).Cells(1).Value = "User Defined Value 2" Then
        '        dgvAreaAnnot.Rows(I).Cells(2).Value = UserDef2
        '        dgvAreaAnnot.Rows(I).Cells(3).Value = UserDef2
        '        dgvAreaAnnot.Rows(I).Cells(4).Value = UserDef2CDF
        '        If dgvAreaAnnot.Rows(I).Cells(8).ValueType = GetType(String) Then
        '            'To Value CDF not defined: THe probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        '    If dgvAreaAnnot.Rows(I).Cells(5).Value = "User Defined Value 2" Then
        '        dgvAreaAnnot.Rows(I).Cells(6).Value = UserDef2
        '        dgvAreaAnnot.Rows(I).Cells(7).Value = UserDef2
        '        dgvAreaAnnot.Rows(I).Cells(8).Value = UserDef2CDF
        '        If dgvAreaAnnot.Rows(I).Cells(4).ValueType = GetType(String) Then
        '            'From Value CDF not defined: THe probability can not be updated.
        '        Else 'Update the probability
        '            dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
        '        End If
        '        UpdateXmlAreaAnnotInfo(I)
        '        UpdateShading = True
        '    End If
        'Next

        'dgvAreaAnnot.AllowUserToAddRows = True

        ''Update the Point Annotation settings:
        'dgvPointAnnot.AllowUserToAddRows = False
        'NSettings = dgvPointAnnot.Rows.Count
        'Dim UpdatePointAnnot As Boolean = False
        'For I = 0 To NSettings - 1
        '    If dgvPointAnnot.Rows(I).Cells(9).Value = "User Defined Value 2" Then 'Annotation Type
        '        dgvPointAnnot.Rows(I).Cells(10).Value = UserDef2 'Parameter
        '        dgvPointAnnot.Rows(I).Cells(12).Value = UserDef2CDF 'CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(13).Value = UserDef2RevCDF 'Rev CDF Probability
        '        dgvPointAnnot.Rows(I).Cells(14).Value = UserDef2 'Random Variable Value
        '        dgvPointAnnot.Rows(I).Cells(15).Value = UserDef2PDF 'Probability Density
        '        UpdateXmlPointAnnotInfo(I)
        '        UpdatePointAnnot = True
        '    End If
        'Next
        'dgvPointAnnot.AllowUserToAddRows = True
        ''ApplyAreaShading()
        'myParent.ApplyAreaShading()

        ''If UpdateShading Then ApplyAreaShading()
        ''If UpdateShading Then UpdateAreaShading()
        'If UpdateShading Then
        '    myParent.Chart1.Annotations.Clear()
        '    'ApplyAreaShading()
        '    myParent.ApplyAreaShading()
        '    'ApplyAnnotation(PointAnnotInfo)
        '    UpdateAnnotation()
        '    'ApplyAreaShading()
        'End If

    End Sub

    Private Sub chkDisplayProb_CheckedChanged(sender As Object, e As EventArgs) Handles chkDisplayProb.CheckedChanged
        'The DisplayProb checkbox has changed
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value = chkDisplayProb.Checked
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub chkUseShadingColor_CheckedChanged(sender As Object, e As EventArgs) Handles chkUseShadingColor.CheckedChanged
        'The UseShadingColor checkbox has changed
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = chkUseShadingColor.Checked
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub txtProbFont_TextChanged(sender As Object, e As EventArgs) Handles txtProbFont.TextChanged

    End Sub

    Private Sub txtProbFont_Click(sender As Object, e As EventArgs) Handles txtProbFont.Click
        'The text font of the Probability annotation is being edited
        FontDialog1.Font = txtProbFont.Font
        FontDialog1.ShowDialog()
        txtProbFont.Font = FontDialog1.Font
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value = FontDialog1.Font.Size
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value = FontDialog1.Font.Name
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value = FontDialog1.Font.Bold
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value = FontDialog1.Font.Italic
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value = FontDialog1.Font.Strikeout
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value = FontDialog1.Font.Underline
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub txtDefaultTextColor_TextChanged(sender As Object, e As EventArgs) Handles txtDefaultTextColor.TextChanged


    End Sub

    Private Sub txtDefaultTextColor_Click(sender As Object, e As EventArgs) Handles txtDefaultTextColor.Click
        'The DefaultColor of the Area annotation is being selected
        ColorDialog1.Color = txtDefaultTextColor.BackColor
        ColorDialog1.ShowDialog()
        txtDefaultTextColor.BackColor = ColorDialog1.Color
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value = ColorDialog1.Color.ToArgb.ToString
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub txtProbFormat_TextChanged(sender As Object, e As EventArgs) Handles txtProbFormat.TextChanged

    End Sub

    Private Sub txtProbFormat_LostFocus(sender As Object, e As EventArgs) Handles txtProbFormat.LostFocus
        'The Probability format has changed
        myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value = txtProbFormat.Text
        XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML tab
    End Sub

    Private Sub btnCopyChart_Click(sender As Object, e As EventArgs) Handles btnCopyChart.Click
        'Copy the selected chart

        Select Case cmbChartType.SelectedItem.ToString
            Case "All"
                Dim myStream As New System.IO.MemoryStream()
                Select Case cmbImageFormat.SelectedItem.ToString
                    Case "Jpeg"
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                    Case "Png"
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Png)
                    Case "Bmp"
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Bmp)
                    Case "Gif"
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Gif)
                    Case "Tiff"
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Tiff)
                    Case Else
                        Main.Message.AddWarning("Unknown image format: " & cmbImageFormat.SelectedItem.ToString & vbCrLf)
                        Main.Message.AddWarning("Jpeg format will be used." & vbCrLf)
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                End Select
                Dim ChartPic As New Bitmap(myStream)
                Clipboard.SetDataObject(ChartPic)
            Case "PDF"
                Dim myStream As New System.IO.MemoryStream()

                Dim PdfChart As New DataVisualization.Charting.Chart
                'GetPdfChart(PdfChart)
                ChartAreaToChart("PdfArea", PdfChart)

                'PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)

                Select Case cmbImageFormat.SelectedItem.ToString
                    Case "Jpeg"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                    Case "Png"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Png)
                    Case "Bmp"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Bmp)
                    Case "Gif"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Gif)
                    Case "Tiff"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Tiff)
                    Case Else
                        Main.Message.AddWarning("Unknown image format: " & cmbImageFormat.SelectedItem.ToString & vbCrLf)
                        Main.Message.AddWarning("Jpeg format will be used." & vbCrLf)
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                End Select






                Dim ChartPic As New Bitmap(myStream)
                Clipboard.SetDataObject(ChartPic)


                'NOTE: The code below does not copy the annotation and does not preserve the display scales.
                'Dim TempChart As New DataVisualization.Charting.Chart
                'TempChart.ChartAreas.Add(myChart.ChartAreas("PdfArea"))
                'TempChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                'Dim ChartPic As New Bitmap(myStream)
                'Clipboard.SetDataObject(ChartPic)





            Case "CDF"
                Dim myStream As New System.IO.MemoryStream()

                Dim PdfChart As New DataVisualization.Charting.Chart
                ChartAreaToChart("CdfArea", PdfChart)

                Select Case cmbImageFormat.SelectedItem.ToString
                    Case "Jpeg"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                    Case "Png"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Png)
                    Case "Bmp"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Bmp)
                    Case "Gif"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Gif)
                    Case "Tiff"
                        PdfChart.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Tiff)
                    Case Else
                        Main.Message.AddWarning("Unknown image format: " & cmbImageFormat.SelectedItem.ToString & vbCrLf)
                        Main.Message.AddWarning("Jpeg format will be used." & vbCrLf)
                        myParent.Chart1.SaveImage(myStream, DataVisualization.Charting.ChartImageFormat.Jpeg)
                End Select

                Dim ChartPic As New Bitmap(myStream)
                Clipboard.SetDataObject(ChartPic)

            Case "RevCDF"

            Case "InvCDF"

            Case "InvRevCDF"


        End Select
    End Sub

    Private Sub ChartAreaToChart(AreaName As String, ByRef AreaChart As DataVisualization.Charting.Chart)
        'Get the chart from the specified chart area in myChart and reproduce it in AreaChart.

        If myParent.ChartInfo Is Nothing Then
            Main.Message.AddWarning("There is no chart information." & vbCrLf)
        Else
            'Restore the Chart Area with name AreaName:
            Dim Areas = From item In myParent.ChartInfo.<ChartSettings>.<ChartAreasCollection>.<ChartArea> Where item.<Name>.Value = AreaName

            If Areas.Count = 0 Then 'There is no ChartArea named AreaName
                Main.Message.AddWarning("The chart area was not found." & vbCrLf)
            Else 'Restore the ChartArea named AreaName
                Dim myFontStyle As FontStyle
                Dim myFontSize As Single
                Dim myFontName As String
                Dim TextColor As Color

                AreaChart.ChartAreas.Clear()
                AreaChart.ChartAreas.Add(AreaName)

                AreaChart.Legends.Add(AreaName)
                AreaChart.Legends(AreaName).DockedToChartArea = AreaName
                AreaChart.Legends(AreaName).Alignment = StringAlignment.Center
                AreaChart.Legends(AreaName).BorderColor = Color.Black
                AreaChart.Legends(AreaName).ShadowColor = Color.Gray

                If Areas(0).<CursorXIsUserEnabled>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorX.IsUserEnabled = Areas(0).<CursorXIsUserEnabled>.Value
                If Areas(0).<CursorYIsUserEnabled>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorY.IsUserEnabled = Areas(0).<CursorYIsUserEnabled>.Value
                If Areas(0).<CursorXInterval>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorX.Interval = Areas(0).<CursorXInterval>.Value
                If Areas(0).<CursorYInterval>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorY.Interval = Areas(0).<CursorYInterval>.Value
                If Areas(0).<CursorXIsUserSelectionEnabled>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorX.IsUserSelectionEnabled = Areas(0).<CursorXIsUserSelectionEnabled>.Value
                If Areas(0).<CursorYIsUserSelectionEnabled>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).CursorY.IsUserSelectionEnabled = Areas(0).<CursorYIsUserSelectionEnabled>.Value

                'AxisX Properties:
                AreaChart.ChartAreas(AreaName).AxisX.Title = Areas(0).<AxisX>.<Title>.<Text>.Value
                AreaChart.ChartAreas(AreaName).AxisX.TitleAlignment = [Enum].Parse(GetType(StringAlignment), Areas(0).<AxisX>.<Title>.<Alignment>.Value)
                AreaChart.ChartAreas(AreaName).AxisX.TitleForeColor = Color.FromArgb(Areas(0).<AxisX>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If Areas(0).<AxisX>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If Areas(0).<AxisX>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If Areas(0).<AxisX>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If Areas(0).<AxisX>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = Areas(0).<AxisX>.<Title>.<Font>.<Size>.Value
                myFontName = Areas(0).<AxisX>.<Title>.<Font>.<Name>.Value
                'AreaChart.ChartAreas(AreaName).AxisX.TitleFont = New Font(Areas(0).<AxisX>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                AreaChart.ChartAreas(AreaName).AxisX.TitleFont = New Font(myFontName, myFontSize, myFontStyle)
                If Areas(0).<AxisX>.<LabelStyle>.<Format>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisX.LabelStyle.Format = Areas(0).<AxisX>.<LabelStyle>.<Format>.Value

                AreaChart.ChartAreas(AreaName).AxisX.Minimum = Areas(0).<AxisX>.<Minimum>.Value
                If Areas(0).<AxisX>.<AutoMinimum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX.Minimum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisX.Maximum = Areas(0).<AxisX>.<Maximum>.Value
                If Areas(0).<AxisX>.<AutoMaximum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX.Maximum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisX.LineWidth = Areas(0).<AxisX>.<LineWidth>.Value
                AreaChart.ChartAreas(AreaName).AxisX.Interval = Areas(0).<AxisX>.<Interval>.Value
                AreaChart.ChartAreas(AreaName).AxisX.IntervalOffset = Areas(0).<AxisX>.<IntervalOffset>.Value
                AreaChart.ChartAreas(AreaName).AxisX.Crossing = Areas(0).<AxisX>.<Crossing>.Value

                If Areas(0).<AxisX>.<AutoInterval>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX.Interval = Double.NaN
                If Areas(0).<AxisX>.<ScaleViewZoomable>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisX.ScaleView.Zoomable = Areas(0).<AxisX>.<ScaleViewZoomable>.Value
                If Areas(0).<AxisX>.<RoundAxisValues>.Value <> Nothing Then
                    If Areas(0).<AxisX>.<RoundAxisValues>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX.RoundAxisValues()
                End If

                'AxisX2 Properties:
                AreaChart.ChartAreas(AreaName).AxisX2.Title = Areas(0).<AxisX2>.<Title>.<Text>.Value
                AreaChart.ChartAreas(AreaName).AxisX2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), Areas(0).<AxisX2>.<Title>.<Alignment>.Value)
                AreaChart.ChartAreas(AreaName).AxisX2.TitleForeColor = Color.FromArgb(Areas(0).<AxisX2>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If Areas(0).<AxisX2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If Areas(0).<AxisX2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If Areas(0).<AxisX2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If Areas(0).<AxisX2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = Areas(0).<AxisX2>.<Title>.<Font>.<Size>.Value
                AreaChart.ChartAreas(AreaName).AxisX2.TitleFont = New Font(Areas(0).<AxisX2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If Areas(0).<AxisX2>.<LabelStyle>.<Format>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisX2.LabelStyle.Format = Areas(0).<AxisX2>.<LabelStyle>.<Format>.Value

                AreaChart.ChartAreas(AreaName).AxisX2.Minimum = Areas(0).<AxisX2>.<Minimum>.Value
                If Areas(0).<AxisX2>.<AutoMinimum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX2.Minimum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisX2.Maximum = Areas(0).<AxisX2>.<Maximum>.Value
                If Areas(0).<AxisX2>.<AutoMaximum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX2.Maximum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisX2.LineWidth = Areas(0).<AxisX2>.<LineWidth>.Value
                AreaChart.ChartAreas(AreaName).AxisX2.Interval = Areas(0).<AxisX2>.<Interval>.Value
                AreaChart.ChartAreas(AreaName).AxisX2.IntervalOffset = Areas(0).<AxisX2>.<IntervalOffset>.Value
                AreaChart.ChartAreas(AreaName).AxisX2.Crossing = Areas(0).<AxisX2>.<Crossing>.Value

                If Areas(0).<AxisX2>.<AutoInterval>.Value <> Nothing Then If Areas(0).<AxisX2>.<AutoInterval>.Value = True Then AreaChart.ChartAreas(AreaName).AxisX2.Interval = Double.NaN
                If Areas(0).<AxisX2>.<ScaleViewZoomable>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisX2.ScaleView.Zoomable = Areas(0).<AxisX2>.<ScaleViewZoomable>.Value

                'AxisY Properties:
                AreaChart.ChartAreas(AreaName).AxisY.Title = Areas(0).<AxisY>.<Title>.<Text>.Value
                AreaChart.ChartAreas(AreaName).AxisY.TitleAlignment = [Enum].Parse(GetType(StringAlignment), Areas(0).<AxisY>.<Title>.<Alignment>.Value)
                AreaChart.ChartAreas(AreaName).AxisY.TitleForeColor = Color.FromArgb(Areas(0).<AxisY>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If Areas(0).<AxisY>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If Areas(0).<AxisY>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If Areas(0).<AxisY>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If Areas(0).<AxisY>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = Areas(0).<AxisY>.<Title>.<Font>.<Size>.Value
                AreaChart.ChartAreas(AreaName).AxisY.TitleFont = New Font(Areas(0).<AxisY>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If Areas(0).<AxisY>.<LabelStyle>.<Format>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisY.LabelStyle.Format = Areas(0).<AxisY>.<LabelStyle>.<Format>.Value

                AreaChart.ChartAreas(AreaName).AxisY.Minimum = Areas(0).<AxisY>.<Minimum>.Value
                If Areas(0).<AxisY>.<AutoMinimum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY.Minimum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisY.Maximum = Areas(0).<AxisY>.<Maximum>.Value
                If Areas(0).<AxisY>.<AutoMaximum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY.Maximum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisY.LineWidth = Areas(0).<AxisY>.<LineWidth>.Value
                AreaChart.ChartAreas(AreaName).AxisY.Interval = Areas(0).<AxisY>.<Interval>.Value
                AreaChart.ChartAreas(AreaName).AxisY.IntervalOffset = Areas(0).<AxisY>.<IntervalOffset>.Value
                AreaChart.ChartAreas(AreaName).AxisY.Crossing = Areas(0).<AxisY>.<Crossing>.Value

                If Areas(0).<AxisY>.<AutoInterval>.Value <> Nothing Then If Areas(0).<AxisY>.<AutoInterval>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY.Interval = Double.NaN
                If Areas(0).<AxisY>.<ScaleViewZoomable>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisY.ScaleView.Zoomable = Areas(0).<AxisY>.<ScaleViewZoomable>.Value

                'AxisY2 Properties:
                AreaChart.ChartAreas(AreaName).AxisY2.Title = Areas(0).<AxisY2>.<Title>.<Text>.Value
                AreaChart.ChartAreas(AreaName).AxisY2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), Areas(0).<AxisY2>.<Title>.<Alignment>.Value)
                AreaChart.ChartAreas(AreaName).AxisY2.TitleForeColor = Color.FromArgb(Areas(0).<AxisY2>.<Title>.<ForeColor>.Value)
                myFontStyle = FontStyle.Regular
                If Areas(0).<AxisY2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                If Areas(0).<AxisY2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                If Areas(0).<AxisY2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                If Areas(0).<AxisY2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                myFontSize = Areas(0).<AxisY2>.<Title>.<Font>.<Size>.Value
                AreaChart.ChartAreas(AreaName).AxisY2.TitleFont = New Font(Areas(0).<AxisY2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                If Areas(0).<AxisY2>.<LabelStyle>.<Format>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisY2.LabelStyle.Format = Areas(0).<AxisY2>.<LabelStyle>.<Format>.Value

                AreaChart.ChartAreas(AreaName).AxisY2.Minimum = Areas(0).<AxisY2>.<Minimum>.Value
                If Areas(0).<AxisY2>.<AutoMinimum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY2.Minimum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisY2.Maximum = Areas(0).<AxisY2>.<Maximum>.Value
                If Areas(0).<AxisY2>.<AutoMaximum>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY2.Maximum = Double.NaN

                AreaChart.ChartAreas(AreaName).AxisY2.LineWidth = Areas(0).<AxisY2>.<LineWidth>.Value
                AreaChart.ChartAreas(AreaName).AxisY2.Interval = Areas(0).<AxisY2>.<Interval>.Value
                AreaChart.ChartAreas(AreaName).AxisY2.IntervalOffset = Areas(0).<AxisY2>.<IntervalOffset>.Value
                AreaChart.ChartAreas(AreaName).AxisY2.Crossing = Areas(0).<AxisY2>.<Crossing>.Value

                If Areas(0).<AxisY2>.<AutoInterval>.Value <> Nothing Then If Areas(0).<AxisY2>.<AutoInterval>.Value = True Then AreaChart.ChartAreas(AreaName).AxisY2.Interval = Double.NaN
                If Areas(0).<AxisY2>.<ScaleViewZoomable>.Value <> Nothing Then AreaChart.ChartAreas(AreaName).AxisY2.ScaleView.Zoomable = Areas(0).<AxisY2>.<ScaleViewZoomable>.Value

                'Restore the Chart Titles:
                Dim myTitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title> Where item.<ChartArea>.Value = AreaName
                If myTitleInfo.Count = 0 Then 'There are no Titles in the ChartArea named AreaName
                Else
                    AreaChart.Titles.Clear()
                    Dim TitleName As String
                    For Each item In myTitleInfo
                        TitleName = item.<Name>.Value
                        If TitleName = Nothing Then
                            'No Title to add.
                        Else
                            Dim NewTitle As New DataVisualization.Charting.Title
                            NewTitle.Name = TitleName
                            NewTitle.Text = item.<Text>.Value

                            AreaChart.Titles.Add(NewTitle)

                            AreaChart.Titles(TitleName).IsDockedInsideChartArea = False
                            AreaChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value

                            ''NOTE: The code has been changed. The ChartArea property is set to "" for the main title - the DockedToChartArea will not be set.
                            ''  The - If TitleName = "MainTitle" Then - code can be remoded in the future. This just handles old chart files with the Chart Area set for the Main Title.
                            'If TitleName = "MainTitle" Then
                            '    'Do not set the DockedToChartArea property
                            'Else
                            '    If item.<ChartArea>.Value <> Nothing Then
                            '        If item.<ChartArea>.Value = "" Then

                            '        Else
                            '            AreaChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                            '        End If
                            '    End If
                            'End If

                            AreaChart.Titles(TitleName).Text = item.<Text>.Value
                            AreaChart.Titles(TitleName).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), item.<TextOrientation>.Value)
                            Try
                                AreaChart.Titles(TitleName).Alignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                            Catch ex As Exception
                                Main.Message.AddWarning("Loading chart. Chart title alignment: " & ex.Message & vbCrLf)
                            End Try

                            AreaChart.Titles(TitleName).ForeColor = Color.FromArgb(item.<ForeColor>.Value)
                            myFontStyle = FontStyle.Regular
                            If item.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                            If item.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                            If item.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                            If item.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                            myFontSize = item.<Font>.<Size>.Value
                            myFontName = item.<Font>.<Name>.Value
                            'AreaChart.Titles(TitleName).Font = New Font(item.<Font>.<Name>.Value, myFontSize, myFontStyle)
                            AreaChart.Titles(TitleName).Font = New Font(myFontName, myFontSize, myFontStyle)
                        End If
                    Next
                End If


                'Add Area Shading
                If AreaName = "PdfArea" Then 'A PdfArea may include area shading
                    For Each item In myParent.AreaAnnotInfo
                        Dim DistributionNo As Integer = item.<DistributionNo>.Value - 1 'DistributionNo uses zero-based index: index number conversion required.
                        'Dim DistribAnnotNo As Integer = item.<DistribAnnotNo>.Value
                        Dim DistribAnnotNo As Integer = myParent.AreaAnnotInfo.ToList().IndexOf(item)

                        Dim ShadingSeriesName As String = "PdfShadingVertBar_" & DistributionNo & "_" & DistribAnnotNo
                        Dim IndexNo As Integer = AreaChart.Series.IndexOf(ShadingSeriesName)
                        If IndexNo = -1 Then  'The Series does not exist
                            'Dont create the series until item.<Show>.Value = True has been confirmed.
                        Else
                            AreaChart.Series(ShadingSeriesName).Points.Clear()
                            'myChart.Series("PdfShadingVertBar").IsVisibleInLegend = False
                            AreaChart.Series("PdfShadingVertBar").IsVisibleInLegend = False
                        End If
                        If item.<Show>.Value = True Then 'Show the shading
                            If IndexNo = -1 Then   'The Series does not exist
                                AreaChart.Series.Add(ShadingSeriesName)
                                AreaChart.Series(ShadingSeriesName).ChartType = DataVisualization.Charting.SeriesChartType.Column
                                AreaChart.Series(ShadingSeriesName).ChartArea = "PdfArea"
                                AreaChart.Series(ShadingSeriesName).IsVisibleInLegend = False
                            Else
                                AreaChart.Series(ShadingSeriesName).Points.Clear()
                                AreaChart.Series(ShadingSeriesName).BorderWidth = 0
                                AreaChart.Series(ShadingSeriesName).IsVisibleInLegend = False
                            End If
                            Dim ShadingStart As Double = Main.Distribution.ContSampling.Minimum
                            If item.<FromValue>.Value <> Nothing Then
                                If item.<FromValue>.Value > ShadingStart Then ShadingStart = item.<FromValue>.Value
                            End If
                            Dim ShadingInterval As Double = Main.Distribution.ContSampling.Interval / item.<Density>.Value
                            Dim ShadingEnd As Double = Main.Distribution.ContSampling.Maximum
                            If item.<ToValue>.Value <> Nothing Then
                                If item.<ToValue>.Value < ShadingEnd Then ShadingEnd = item.<ToValue>.Value
                            End If
                            Dim NShadingLines As Integer = Math.Round((ShadingEnd - ShadingStart) / ShadingInterval)
                            Dim I As Integer
                            Dim XPos As Double
                            'Dim YPos As Double
                            AreaChart.Series(ShadingSeriesName).SetCustomProperty("PixelPointWidth", item.<Thickness>.Value)
                            AreaChart.Series(ShadingSeriesName).Color = Color.FromArgb(item.<Color>.Value)

                            AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent50
                            Select Case item.<Intensity>.Value
                                Case "10"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent90
                                Case "20"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent80
                                Case "25"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent75
                                Case "30"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent70
                                Case "40"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent60
                                Case "50"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent50
                                Case "60"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent40
                                Case "70"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent30
                                Case "75"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent25
                                Case "80"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent20
                                Case "90"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent10
                                Case "95"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.Percent05
                                Case "100"
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.None
                                Case Else
                                    AreaChart.Series(ShadingSeriesName).BackHatchStyle = DataVisualization.Charting.ChartHatchStyle.None
                            End Select

                            'For I = 0 To NShadingLines
                            For I = 0 To NShadingLines - 1 'Omit the last shading line - trying to show the vertical annotation bar more clearly.
                                'For I = 0 To NShadingLines - 2 'Omit the last shading line - trying to show the vertical annotation bar more clearly.
                                Dim PdfPoint As New DataVisualization.Charting.DataPoint
                                XPos = ShadingStart + I * ShadingInterval
                                PdfPoint.XValue = XPos
                                PdfPoint.SetValueY(Main.Distribution.PdfValue(DistributionNo, XPos))
                                AreaChart.Series(ShadingSeriesName).Points.Add(PdfPoint)
                            Next

                            'Annotate the Probability (Area):
                            If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DisplayProbability>.Value = True Then
                                Dim NumberFormat As String = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Format>.Value
                                Dim YMin As Double = AreaChart.ChartAreas("PdfArea").AxisY.Minimum
                                Dim YMax As Double = AreaChart.ChartAreas("PdfArea").AxisY.Maximum
                                Dim YOffset As Double = (YMax - YMin) / 10 'The offset from YMin to display the Probability annotation
                                Dim XAnnotPos As Double = (ShadingStart + ShadingEnd) / 2 'Annotate the Probability in the middle of the shaded area
                                Dim PdfAnnot As New DataVisualization.Charting.TextAnnotation
                                PdfAnnot.AxisX = AreaChart.ChartAreas("PdfArea").AxisX
                                PdfAnnot.AxisY = AreaChart.ChartAreas("PdfArea").AxisY
                                PdfAnnot.AnchorX = XAnnotPos
                                PdfAnnot.AnchorY = YMin + YOffset
                                PdfAnnot.AnchorAlignment = ContentAlignment.MiddleCenter
                                PdfAnnot.Text = Format(Val(item.<Probability>.Value), NumberFormat)

                                'Dim myFontStyle As FontStyle
                                'Dim myFontSize As Single = ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
                                myFontSize = myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Size>.Value
                                myFontStyle = FontStyle.Regular
                                If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                                If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                                If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                                If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                                PdfAnnot.Font = New Font(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<FontName>.Value, myFontSize, myFontStyle)
                                If myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<UseShadingColor>.Value = True Then
                                    PdfAnnot.ForeColor = Color.FromArgb(item.<Color>.Value)
                                Else
                                    PdfAnnot.ForeColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<AreaAnnotationSettings>.<DefaultColor>.Value)
                                End If
                                AreaChart.Annotations.Add(PdfAnnot)
                                item.<ChartAnnotNo>.Value = AreaChart.Annotations.Count - 1 'Save the annotation number - this will be needed if the annotation is updated.
                            End If
                        End If
                    Next
                End If

                ''Restore Chart Series:
                'Dim Series = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series> Where item.<ChartArea>.Value = AreaName
                'Dim SeriesName As String
                ''AreaChart.Series.Clear()
                'For Each item In Series
                '    SeriesName = item.<Name>.Value
                '    If SeriesName = Nothing Then
                '        'Empty series: <Series></Series>
                '        'No Series to add.
                '    Else
                '        If AreaChart.Series.IndexOf(SeriesName) = -1 Then
                '            AreaChart.Series.Add(SeriesName)
                '            AreaChart.Series(SeriesName).ChartType = [Enum].Parse(GetType(DataVisualization.Charting.SeriesChartType), item.<ChartType>.Value)
                '            If item.<ChartArea>.Value <> Nothing Then AreaChart.Series(SeriesName).ChartArea = item.<ChartArea>.Value
                '            AreaChart.Series(SeriesName).Legend = item.<Legend>.Value

                '            'Point Chart custom properties
                '            If item.<EmptyPointValue>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("EmptyPointValue", item.<EmptyPointValue>.Value)
                '            If item.<LabelStyle>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("LabelStyle", item.<LabelStyle>.Value)
                '            If item.<PixelPointDepth>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("PixelPointDepth", item.<PixelPointDepth>.Value)
                '            If item.<PixelPointGapDepth>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("PixelPointGapDepth", item.<PixelPointGapDepth>.Value)
                '            If item.<ShowMarkerLines>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("ShowMarkerLines", item.<ShowMarkerLines>.Value)

                '            AreaChart.Series(SeriesName).AxisLabel = item.<AxisLabel>.Value
                '            AreaChart.Series(SeriesName).XAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<XAxisType>.Value)
                '            AreaChart.Series(SeriesName).YAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<YAxisType>.Value)

                '            If item.<XValueType>.Value = Nothing Then
                '                item.Add(New XElement("XValueType", "Auto"))
                '                AreaChart.Series(SeriesName).XValueType = DataVisualization.Charting.ChartValueType.Auto
                '            Else
                '                AreaChart.Series(SeriesName).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<XValueType>.Value)
                '            End If

                '            If item.<YValueType>.Value = Nothing Then
                '                item.Add(New XElement("YValueType", "Auto"))
                '                AreaChart.Series(SeriesName).YValueType = DataVisualization.Charting.ChartValueType.Auto
                '            Else
                '                AreaChart.Series(SeriesName).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<YValueType>.Value)
                '            End If

                '            If item.<Marker>.<BorderColor>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerBorderColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                '            If item.<Marker>.<BorderWidth>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerBorderWidth = item.<Marker>.<BorderWidth>.Value
                '            If item.<Marker>.<Color>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                '            If item.<Marker>.<Size>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerSize = item.<Marker>.<Size>.Value
                '            If item.<Marker>.<Step>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerStep = item.<Marker>.<Step>.Value
                '            If item.<Marker>.<Style>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), item.<Marker>.<Style>.Value)
                '            If item.<Color>.Value <> Nothing Then AreaChart.Series(SeriesName).Color = Color.FromArgb(item.<Color>.Value)
                '            If item.<Width>.Value <> Nothing Then AreaChart.Series(SeriesName).BorderWidth = item.<Width>.Value
                '            If item.<ToolTip>.Value <> Nothing Then AreaChart.Series(SeriesName).ToolTip = item.<ToolTip>.Value

                '            Try
                '                If DataSource Is Nothing Then

                '                Else
                '                    AreaChart.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(TableName).DefaultView, item.<YFieldName>.Value)
                '                End If
                '            Catch ex As Exception
                '                Main.Message.AddWarning("Error loading Chart information:" & vbCrLf & ex.Message & vbCrLf)
                '            End Try
                '        Else
                '            Main.Message.AddWarning("The series name is already used: " & SeriesName & vbCrLf)
                '        End If
                '    End If
                'Next

                'Apply the Annotation
                Dim Annotation = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation>

                Dim ProbFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ProbFormat>.Value
                Dim RVFormat As String = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<RVFormat>.Value
                Dim AddAnnot As Boolean
                Dim LineColor As Color
                Dim LineThickness As Integer
                Dim ShowCircle As Boolean
                Dim CircleColor As Color
                Dim CircleThickness As Integer
                Dim CircleSize As Integer
                Dim ShowProbValue As Boolean
                Dim ShowRVValue As Boolean

                Select Case AreaName
                    Case "PdfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PDF>.<Text>.<ShowRVValue>.Value

                    Case "PmfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<PMF>.<Text>.<ShowRVValue>.Value

                    Case "CdfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<CDF>.<Text>.<ShowRVValue>.Value

                    Case "RevCdfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<RevCDF>.<Text>.<ShowRVValue>.Value

                    Case "InvCdfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvCDF>.<Text>.<ShowRVValue>.Value

                    Case "InvRevCdfArea"
                        LineColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Color>.Value)
                        LineThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Line>.<Thickness>.Value
                        myFontName = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<FontName>.Value
                        myFontStyle = FontStyle.Regular
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                        If myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                        myFontSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Size>.Value
                        TextColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<Color>.Value)
                        ShowCircle = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Show>.Value
                        CircleColor = Color.FromArgb(myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Color>.Value)
                        CircleThickness = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Thickness>.Value
                        CircleSize = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Circle>.<Size>.Value
                        ShowProbValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowProbValue>.Value
                        ShowRVValue = myParent.ChartInfo.<ChartSettings>.<PointAnnotationSettings>.<InvRevCDF>.<Text>.<ShowRVValue>.Value

                    Case Else
                        'AddAnnot = False
                End Select

                AreaChart.Series.Add("VertBar")
                AreaChart.Series("VertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                AreaChart.Series("VertBar").Color = LineColor
                AreaChart.Series("VertBar").ChartArea = AreaName
                AreaChart.Series("VertBar").SetCustomProperty("PixelPointWidth", LineThickness)
                If ShowCircle Then
                    AreaChart.Series("VertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.Circle
                Else
                    AreaChart.Series("VertBar").MarkerStyle = DataVisualization.Charting.MarkerStyle.None
                End If
                AreaChart.Series("VertBar").MarkerSize = CircleSize
                AreaChart.Series("VertBar").MarkerBorderWidth = CircleThickness
                AreaChart.Series("VertBar").MarkerBorderColor = CircleColor
                AreaChart.Series("VertBar").MarkerColor = Color.Transparent
                AreaChart.Series("VertBar").IsVisibleInLegend = False

                For Each item In Annotation
                    If item.<Show>.Value = True Then
                        Select Case AreaName
                            Case "PdfArea"
                                'AddAnnot = item.<PDF>.Value
                                If item.<PDF>.Value = True Then
                                    'Add the vertical bar:
                                    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                                    AnnotPoint.XValue = item.<RandVarValue>.Value
                                    AnnotPoint.SetValueY(item.<ProbabilityDensity>.Value)
                                    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                                    'Add the label:
                                    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                                    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                                    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                                    AnnotText.AnchorX = item.<RandVarValue>.Value
                                    AnnotText.AnchorY = item.<ProbabilityDensity>.Value
                                    'AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                                    AnnotText.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                    If ShowProbValue Then 'Show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            'AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                                        End If
                                    Else 'Do not show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value
                                        End If
                                    End If
                                    'AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                                    AnnotText.Font = New Font(myFontName, myFontSize, myFontStyle)
                                    AnnotText.BackColor = TextColor
                                    AreaChart.Annotations.Add(AnnotText)
                                End If

                            Case "PmfArea"
                                AddAnnot = item.<PMF>.Value

                            Case "CdfArea"
                                'AddAnnot = item.<CDF>.Value
                                If item.<CDF>.Value = True Then
                                    'Add the vertical bar:
                                    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                                    AnnotPoint.XValue = item.<RandVarValue>.Value
                                    AnnotPoint.SetValueY(item.<CdfProbability>.Value)
                                    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                                    'Add the label:
                                    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                                    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                                    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                                    AnnotText.AnchorX = item.<RandVarValue>.Value
                                    AnnotText.AnchorY = item.<CdfProbability>.Value
                                    'AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                                    AnnotText.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                    If ShowProbValue Then 'Show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            'AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), ProbFormat) & ")"
                                        End If
                                    Else 'Do not show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value
                                        End If
                                    End If
                                    'AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                                    AnnotText.Font = New Font(myFontName, myFontSize, myFontStyle)
                                    AnnotText.BackColor = TextColor
                                    AreaChart.Annotations.Add(AnnotText)
                                End If

                            Case "RevCdfArea"
                                'AddAnnot = item.<RevCDF>.Value
                                If item.<RevCDF>.Value = True Then
                                    'Add the vertical bar:
                                    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                                    AnnotPoint.XValue = item.<RandVarValue>.Value
                                    AnnotPoint.SetValueY(item.<RevCdfProbability>.Value)
                                    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                                    'Add the label:
                                    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                                    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                                    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                                    AnnotText.AnchorX = item.<RandVarValue>.Value
                                    AnnotText.AnchorY = item.<RevCdfProbability>.Value
                                    'AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                                    AnnotText.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                    If ShowProbValue Then 'Show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            'AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ", " & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), ProbFormat) & ")"
                                        End If
                                    Else 'Do not show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value
                                        End If
                                    End If
                                    'AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                                    AnnotText.Font = New Font(myFontName, myFontSize, myFontStyle)
                                    AnnotText.BackColor = TextColor
                                    AreaChart.Annotations.Add(AnnotText)
                                End If

                            Case "InvCdfArea"
                                'AddAnnot = item.<InvCDF>.Value
                                If item.<InvCDF>.Value = True Then
                                    'Add the vertical bar:
                                    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                                    AnnotPoint.XValue = item.<CdfProbability>.Value
                                    AnnotPoint.SetValueY(item.<RandVarValue>.Value)
                                    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                                    'Add the label:
                                    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                                    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                                    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                                    AnnotText.AnchorX = item.<CdfProbability>.Value
                                    AnnotText.AnchorY = item.<RandVarValue>.Value
                                    'AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                                    AnnotText.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                    If ShowProbValue Then 'Show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            'AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ", " & Format(Val(item.<CdfProbability>.Value), RVFormat) & ")"
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), RVFormat) & ", " & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ")"
                                        End If
                                    Else 'Do not show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<CdfProbability>.Value), RVFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value
                                        End If
                                    End If
                                    'AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                                    AnnotText.Font = New Font(myFontName, myFontSize, myFontStyle)
                                    AnnotText.BackColor = TextColor
                                    AreaChart.Annotations.Add(AnnotText)
                                End If

                            Case "InvRevCdfArea"
                                'AddAnnot = item.<InvRevCDF>.Value
                                If item.<InvRevCDF>.Value = True Then
                                    'Add the vertical bar:
                                    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                                    AnnotPoint.XValue = item.<RevCdfProbability>.Value
                                    AnnotPoint.SetValueY(item.<RandVarValue>.Value)
                                    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                                    'Add the label:
                                    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                                    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                                    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                                    AnnotText.AnchorX = item.<CdfProbability>.Value
                                    AnnotText.AnchorY = item.<RandVarValue>.Value
                                    'AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                                    AnnotText.AnchorAlignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                    If ShowProbValue Then 'Show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            'AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ", " & Format(Val(item.<RevCdfProbability>.Value), RVFormat) & ")"
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), RVFormat) & ", " & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), ProbFormat) & ")"
                                        End If
                                    Else 'Do not show the Probability Density value
                                        If ShowRVValue Then 'Show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RevCdfProbability>.Value), RVFormat) & ")"
                                        Else 'Do not show the Random Variable value
                                            AnnotText.Text = item.<Label>.Value
                                        End If
                                    End If
                                    'AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                                    AnnotText.Font = New Font(myFontName, myFontSize, myFontStyle)
                                    AnnotText.BackColor = TextColor
                                    AreaChart.Annotations.Add(AnnotText)
                                End If

                            Case Else
                                AddAnnot = False
                        End Select

                        'If AddAnnot Then 'Add the annotation.
                        '    ''Dim IndexNo As Integer = myChart.Series.IndexOf("VertBar")
                        '    'Dim IndexNo As Integer = AreaChart.Series.IndexOf("VertBar")
                        '    'If IndexNo = -1 Then 'Series named VerBar does not exist
                        '    '    AreaChart.Series.Add("VertBar")
                        '    '    AreaChart.Series("VertBar").ChartType = DataVisualization.Charting.SeriesChartType.Column
                        '    '    AreaChart.Series("VertBar").Color = LineColor
                        '    '    AreaChart.Series("VertBar").ChartArea = AreaName
                        '    '    AreaChart.Series("VertBar").SetCustomProperty("PixelPointWidth", LineThickness)
                        '    '    AreaChart.Series("VertBar").IsVisibleInLegend = False
                        '    'Else
                        '    '    'AreaChart.Series("VertBar").Points.Clear()
                        '    '    'AreaChart.Series("VertBar").ChartArea = AreaName
                        '    '    'AreaChart.Series("VertBar").IsVisibleInLegend = False
                        '    '    'AreaChart.Series("VertBar").Color = LineColor
                        '    '    'AreaChart.Series("VertBar").SetCustomProperty("PixelPointWidth", LineThickness)
                        '    'End If

                        '    'Add the vertical bar:
                        '    Dim AnnotPoint As New DataVisualization.Charting.DataPoint
                        '    AnnotPoint.XValue = item.<RandVarValue>.Value
                        '    AnnotPoint.SetValueY(item.<ProbabilityDensity>.Value)
                        '    'myChart.Series("PdfAreaVertBar").Points.Add(AnnotPoint)
                        '    'AreaChart.Series("PdfAreaVertBar").Points.Add(AnnotPoint)
                        '    AreaChart.Series("VertBar").Points.Add(AnnotPoint)
                        '    'Add the label:
                        '    Dim AnnotText As New DataVisualization.Charting.TextAnnotation
                        '    AnnotText.AxisX = AreaChart.ChartAreas(AreaName).AxisX
                        '    AnnotText.AxisY = AreaChart.ChartAreas(AreaName).AxisY
                        '    AnnotText.AnchorX = item.<RandVarValue>.Value
                        '    AnnotText.AnchorY = item.<ProbabilityDensity>.Value
                        '    AnnotText.AnchorAlignment = ContentAlignment.MiddleRight
                        '    If ShowProbValue Then 'Show the Probability Density value
                        '        If ShowRVValue Then 'Show the Random Variable value
                        '            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ", " & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        '        Else 'Do not show the Random Variable value
                        '            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<ProbabilityDensity>.Value), ProbFormat) & ")"
                        '        End If
                        '    Else 'Do not show the Probability Density value
                        '        If ShowRVValue Then 'Show the Random Variable value
                        '            AnnotText.Text = item.<Label>.Value & " (" & Format(Val(item.<RandVarValue>.Value), RVFormat) & ")"
                        '        Else 'Do not show the Random Variable value
                        '            AnnotText.Text = item.<Label>.Value
                        '        End If
                        '    End If
                        '    AnnotText.Font = New Font("Arial", 10, FontStyle.Regular Or FontStyle.Bold)
                        '    AreaChart.Annotations.Add(AnnotText)
                        'End If
                    Else
                        'This annotation has been turned off.
                    End If
                Next

                'Restore Chart Series:
                Dim Series = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series> Where item.<ChartArea>.Value = AreaName
                Dim SeriesName As String
                'AreaChart.Series.Clear()
                For Each item In Series
                    SeriesName = item.<Name>.Value
                    If SeriesName = Nothing Then
                        'Empty series: <Series></Series>
                        'No Series to add.
                    Else
                        If AreaChart.Series.IndexOf(SeriesName) = -1 Then
                            AreaChart.Series.Add(SeriesName)
                            AreaChart.Series(SeriesName).ChartType = [Enum].Parse(GetType(DataVisualization.Charting.SeriesChartType), item.<ChartType>.Value)
                            If item.<ChartArea>.Value <> Nothing Then AreaChart.Series(SeriesName).ChartArea = item.<ChartArea>.Value
                            AreaChart.Series(SeriesName).Legend = item.<Legend>.Value

                            'Point Chart custom properties
                            If item.<EmptyPointValue>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("EmptyPointValue", item.<EmptyPointValue>.Value)
                            If item.<LabelStyle>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("LabelStyle", item.<LabelStyle>.Value)
                            If item.<PixelPointDepth>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("PixelPointDepth", item.<PixelPointDepth>.Value)
                            If item.<PixelPointGapDepth>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("PixelPointGapDepth", item.<PixelPointGapDepth>.Value)
                            If item.<ShowMarkerLines>.Value <> Nothing Then AreaChart.Series(SeriesName).SetCustomProperty("ShowMarkerLines", item.<ShowMarkerLines>.Value)

                            AreaChart.Series(SeriesName).AxisLabel = item.<AxisLabel>.Value
                            AreaChart.Series(SeriesName).XAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<XAxisType>.Value)
                            AreaChart.Series(SeriesName).YAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<YAxisType>.Value)

                            If item.<XValueType>.Value = Nothing Then
                                item.Add(New XElement("XValueType", "Auto"))
                                AreaChart.Series(SeriesName).XValueType = DataVisualization.Charting.ChartValueType.Auto
                            Else
                                AreaChart.Series(SeriesName).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<XValueType>.Value)
                            End If

                            If item.<YValueType>.Value = Nothing Then
                                item.Add(New XElement("YValueType", "Auto"))
                                AreaChart.Series(SeriesName).YValueType = DataVisualization.Charting.ChartValueType.Auto
                            Else
                                AreaChart.Series(SeriesName).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<YValueType>.Value)
                            End If

                            If item.<Marker>.<BorderColor>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerBorderColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                            If item.<Marker>.<BorderWidth>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerBorderWidth = item.<Marker>.<BorderWidth>.Value
                            If item.<Marker>.<Color>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                            If item.<Marker>.<Size>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerSize = item.<Marker>.<Size>.Value
                            If item.<Marker>.<Step>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerStep = item.<Marker>.<Step>.Value
                            If item.<Marker>.<Style>.Value <> Nothing Then AreaChart.Series(SeriesName).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), item.<Marker>.<Style>.Value)
                            If item.<Color>.Value <> Nothing Then AreaChart.Series(SeriesName).Color = Color.FromArgb(item.<Color>.Value)
                            If item.<Width>.Value <> Nothing Then AreaChart.Series(SeriesName).BorderWidth = item.<Width>.Value
                            If item.<ToolTip>.Value <> Nothing Then AreaChart.Series(SeriesName).ToolTip = item.<ToolTip>.Value

                            Try
                                If DataSource Is Nothing Then

                                Else
                                    'AreaChart.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(TableName).DefaultView, item.<YFieldName>.Value)
                                    'AreaChart.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                                    If item.<Continuity>.Value = "Continuous" Then
                                        myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                                    ElseIf item.<Continuity>.Value = "Discrete" Then
                                        myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(DiscTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(DiscTableName).DefaultView, item.<YFieldName>.Value)
                                    Else
                                        Main.Message.AddWarning("ChartSettings-ChartAreaToChart-Unknown continuity: " & item.<Continuity>.Value & vbCrLf)
                                    End If
                                End If
                            Catch ex As Exception
                                Main.Message.AddWarning("Error loading Chart information:" & vbCrLf & ex.Message & vbCrLf)
                            End Try
                        Else
                            Main.Message.AddWarning("The series name is already used: " & SeriesName & vbCrLf)
                        End If
                    End If
                Next

                'Scale the chart:
                'AreaChart.Width = myChart.Width * myChart.ChartAreas("PdfArea").Position.Width / 100
                'AreaChart.Height = myChart.Height * myChart.ChartAreas("PdfArea").Position.Height / 100
                AreaChart.Width = myParent.Chart1.Width * myParent.Chart1.ChartAreas(AreaName).Position.Width / 100
                AreaChart.Height = myParent.Chart1.Height * myParent.Chart1.ChartAreas(AreaName).Position.Height / 100

            End If
        End If
    End Sub

    Private Sub ChartAreaToChart_Old(AreaName As String, ByRef AreaChart As DataVisualization.Charting.Chart)
        'Get the chart from the specified chart area in myChart and reproduce it in AreaChart.

        Dim AreaIndex As Integer = myParent.Chart1.ChartAreas.IndexOf(AreaName)
        If AreaIndex > -1 Then
            AreaChart.ChartAreas.Add(myParent.Chart1.ChartAreas(AreaName)) 'The chart area includes the axis definitions, the plotted series and the annotation bars.

            ''Add each of the series:
            'For Each item As DataVisualization.Charting.Series In myChart.Series
            '    If item.ChartArea = AreaName Then
            '        AreaChart.Series.Add(item)
            '    End If
            'Next

            'Add the annotation text.

            'Add the Legends:
            AreaChart.Legends.Add(AreaName)
            For Each item As DataVisualization.Charting.Series In AreaChart.Series
                item.IsVisibleInLegend = True
            Next



            'Scale the chart:
            AreaChart.Width = myParent.Chart1.Width * myParent.Chart1.ChartAreas("PdfArea").Position.Width / 100
            AreaChart.Height = myParent.Chart1.Height * myParent.Chart1.ChartAreas("PdfArea").Position.Height / 100
        Else
            Main.Message.AddWarning("A chart area named " & AreaName & " was not found in the current chart." & vbCrLf)
        End If


    End Sub

    'NOTE: The code below is now replaced by ChartAreaToChart.
    Private Sub GetPdfChart(ByRef PdfChart As DataVisualization.Charting.Chart)
        'Get the Pdf Chart in PdfChart

        If myParent.ChartInfo Is Nothing Then
            Main.Message.AddWarning("There is no chart information to load." & vbCrLf)
        Else
            Dim myFontStyle As FontStyle
            Dim myFontSize As Single

            Dim Areas = From item In myParent.ChartInfo.<ChartSettings>.<ChartAreasCollection>.<ChartArea>
            Dim AreaName As String
            PdfChart.ChartAreas.Clear()

            For Each item In Areas
                AreaName = item.<Name>.Value
                If AreaName = Nothing Then
                    'No area to add.
                ElseIf AreaName = "PdfArea" Then
                    PdfChart.ChartAreas.Add(AreaName)


                    'PdfChart.Legends(0).Name = AreaName
                    PdfChart.Legends.Add(AreaName)
                    'PdfChart.Legends(0).DockedToChartArea = AreaName
                    'PdfChart.Legends(0).Alignment = StringAlignment.Center
                    'PdfChart.Legends(0).BorderColor = Color.Black
                    'PdfChart.Legends(0).ShadowColor = Color.Gray
                    PdfChart.Legends(AreaName).DockedToChartArea = AreaName
                    PdfChart.Legends(AreaName).Alignment = StringAlignment.Center
                    PdfChart.Legends(AreaName).BorderColor = Color.Black
                    PdfChart.Legends(AreaName).ShadowColor = Color.Gray

                    If item.<CursorXIsUserEnabled>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorX.IsUserEnabled = item.<CursorXIsUserEnabled>.Value
                    If item.<CursorYIsUserEnabled>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorY.IsUserEnabled = item.<CursorYIsUserEnabled>.Value
                    If item.<CursorXInterval>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorX.Interval = item.<CursorXInterval>.Value
                    If item.<CursorYInterval>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorY.Interval = item.<CursorYInterval>.Value
                    If item.<CursorXIsUserSelectionEnabled>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorX.IsUserSelectionEnabled = item.<CursorXIsUserSelectionEnabled>.Value
                    If item.<CursorYIsUserSelectionEnabled>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).CursorY.IsUserSelectionEnabled = item.<CursorYIsUserSelectionEnabled>.Value

                    'AxisX Properties:
                    PdfChart.ChartAreas(AreaName).AxisX.Title = item.<AxisX>.<Title>.<Text>.Value
                    PdfChart.ChartAreas(AreaName).AxisX.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisX>.<Title>.<Alignment>.Value)
                    PdfChart.ChartAreas(AreaName).AxisX.TitleForeColor = Color.FromArgb(item.<AxisX>.<Title>.<ForeColor>.Value)
                    myFontStyle = FontStyle.Regular
                    If item.<AxisX>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                    If item.<AxisX>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                    If item.<AxisX>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                    If item.<AxisX>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                    myFontSize = item.<AxisX>.<Title>.<Font>.<Size>.Value
                    PdfChart.ChartAreas(AreaName).AxisX.TitleFont = New Font(item.<AxisX>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                    If item.<AxisX>.<LabelStyle>.<Format>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisX.LabelStyle.Format = item.<AxisX>.<LabelStyle>.<Format>.Value

                    PdfChart.ChartAreas(AreaName).AxisX.Minimum = item.<AxisX>.<Minimum>.Value
                    If item.<AxisX>.<AutoMinimum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX.Minimum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisX.Maximum = item.<AxisX>.<Maximum>.Value
                    If item.<AxisX>.<AutoMaximum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX.Maximum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisX.LineWidth = item.<AxisX>.<LineWidth>.Value
                    PdfChart.ChartAreas(AreaName).AxisX.Interval = item.<AxisX>.<Interval>.Value
                    PdfChart.ChartAreas(AreaName).AxisX.IntervalOffset = item.<AxisX>.<IntervalOffset>.Value
                    PdfChart.ChartAreas(AreaName).AxisX.Crossing = item.<AxisX>.<Crossing>.Value

                    If item.<AxisX>.<AutoInterval>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX.Interval = Double.NaN
                    If item.<AxisX>.<ScaleViewZoomable>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisX.ScaleView.Zoomable = item.<AxisX>.<ScaleViewZoomable>.Value
                    If item.<AxisX>.<RoundAxisValues>.Value <> Nothing Then
                        If item.<AxisX>.<RoundAxisValues>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX.RoundAxisValues()
                    End If

                    'AxisX2 Properties:
                    PdfChart.ChartAreas(AreaName).AxisX2.Title = item.<AxisX2>.<Title>.<Text>.Value
                    PdfChart.ChartAreas(AreaName).AxisX2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisX2>.<Title>.<Alignment>.Value)
                    PdfChart.ChartAreas(AreaName).AxisX2.TitleForeColor = Color.FromArgb(item.<AxisX2>.<Title>.<ForeColor>.Value)
                    myFontStyle = FontStyle.Regular
                    If item.<AxisX2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                    If item.<AxisX2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                    If item.<AxisX2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                    If item.<AxisX2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                    myFontSize = item.<AxisX2>.<Title>.<Font>.<Size>.Value
                    PdfChart.ChartAreas(AreaName).AxisX2.TitleFont = New Font(item.<AxisX2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                    If item.<AxisX2>.<LabelStyle>.<Format>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisX2.LabelStyle.Format = item.<AxisX2>.<LabelStyle>.<Format>.Value

                    PdfChart.ChartAreas(AreaName).AxisX2.Minimum = item.<AxisX2>.<Minimum>.Value
                    If item.<AxisX2>.<AutoMinimum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX2.Minimum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisX2.Maximum = item.<AxisX2>.<Maximum>.Value
                    If item.<AxisX2>.<AutoMaximum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX2.Maximum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisX2.LineWidth = item.<AxisX2>.<LineWidth>.Value
                    PdfChart.ChartAreas(AreaName).AxisX2.Interval = item.<AxisX2>.<Interval>.Value
                    PdfChart.ChartAreas(AreaName).AxisX2.IntervalOffset = item.<AxisX2>.<IntervalOffset>.Value
                    PdfChart.ChartAreas(AreaName).AxisX2.Crossing = item.<AxisX2>.<Crossing>.Value

                    If item.<AxisX2>.<AutoInterval>.Value <> Nothing Then If item.<AxisX2>.<AutoInterval>.Value = True Then PdfChart.ChartAreas(AreaName).AxisX2.Interval = Double.NaN
                    If item.<AxisX2>.<ScaleViewZoomable>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisX2.ScaleView.Zoomable = item.<AxisX2>.<ScaleViewZoomable>.Value

                    'AxisY Properties:
                    PdfChart.ChartAreas(AreaName).AxisY.Title = item.<AxisY>.<Title>.<Text>.Value
                    PdfChart.ChartAreas(AreaName).AxisY.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisY>.<Title>.<Alignment>.Value)
                    PdfChart.ChartAreas(AreaName).AxisY.TitleForeColor = Color.FromArgb(item.<AxisY>.<Title>.<ForeColor>.Value)
                    myFontStyle = FontStyle.Regular
                    If item.<AxisY>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                    If item.<AxisY>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                    If item.<AxisY>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                    If item.<AxisY>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                    myFontSize = item.<AxisY>.<Title>.<Font>.<Size>.Value
                    PdfChart.ChartAreas(AreaName).AxisY.TitleFont = New Font(item.<AxisY>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                    If item.<AxisY>.<LabelStyle>.<Format>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisY.LabelStyle.Format = item.<AxisY>.<LabelStyle>.<Format>.Value

                    PdfChart.ChartAreas(AreaName).AxisY.Minimum = item.<AxisY>.<Minimum>.Value
                    If item.<AxisY>.<AutoMinimum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY.Minimum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisY.Maximum = item.<AxisY>.<Maximum>.Value
                    If item.<AxisY>.<AutoMaximum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY.Maximum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisY.LineWidth = item.<AxisY>.<LineWidth>.Value
                    PdfChart.ChartAreas(AreaName).AxisY.Interval = item.<AxisY>.<Interval>.Value
                    PdfChart.ChartAreas(AreaName).AxisY.IntervalOffset = item.<AxisY>.<IntervalOffset>.Value
                    PdfChart.ChartAreas(AreaName).AxisY.Crossing = item.<AxisY>.<Crossing>.Value

                    If item.<AxisY>.<AutoInterval>.Value <> Nothing Then If item.<AxisY>.<AutoInterval>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY.Interval = Double.NaN
                    If item.<AxisY>.<ScaleViewZoomable>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisY.ScaleView.Zoomable = item.<AxisY>.<ScaleViewZoomable>.Value

                    'AxisY2 Properties:
                    PdfChart.ChartAreas(AreaName).AxisY2.Title = item.<AxisY2>.<Title>.<Text>.Value
                    PdfChart.ChartAreas(AreaName).AxisY2.TitleAlignment = [Enum].Parse(GetType(StringAlignment), item.<AxisY2>.<Title>.<Alignment>.Value)
                    PdfChart.ChartAreas(AreaName).AxisY2.TitleForeColor = Color.FromArgb(item.<AxisY2>.<Title>.<ForeColor>.Value)
                    myFontStyle = FontStyle.Regular
                    If item.<AxisY2>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                    If item.<AxisY2>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                    If item.<AxisY2>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                    If item.<AxisY2>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                    myFontSize = item.<AxisY2>.<Title>.<Font>.<Size>.Value
                    PdfChart.ChartAreas(AreaName).AxisY2.TitleFont = New Font(item.<AxisY2>.<Title>.<Font>.<Name>.Value, myFontSize, myFontStyle)
                    If item.<AxisY2>.<LabelStyle>.<Format>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisY2.LabelStyle.Format = item.<AxisY2>.<LabelStyle>.<Format>.Value

                    PdfChart.ChartAreas(AreaName).AxisY2.Minimum = item.<AxisY2>.<Minimum>.Value
                    If item.<AxisY2>.<AutoMinimum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY2.Minimum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisY2.Maximum = item.<AxisY2>.<Maximum>.Value
                    If item.<AxisY2>.<AutoMaximum>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY2.Maximum = Double.NaN

                    PdfChart.ChartAreas(AreaName).AxisY2.LineWidth = item.<AxisY2>.<LineWidth>.Value
                    PdfChart.ChartAreas(AreaName).AxisY2.Interval = item.<AxisY2>.<Interval>.Value
                    PdfChart.ChartAreas(AreaName).AxisY2.IntervalOffset = item.<AxisY2>.<IntervalOffset>.Value
                    PdfChart.ChartAreas(AreaName).AxisY2.Crossing = item.<AxisY2>.<Crossing>.Value

                    If item.<AxisY2>.<AutoInterval>.Value <> Nothing Then If item.<AxisY2>.<AutoInterval>.Value = True Then PdfChart.ChartAreas(AreaName).AxisY2.Interval = Double.NaN
                    If item.<AxisY2>.<ScaleViewZoomable>.Value <> Nothing Then PdfChart.ChartAreas(AreaName).AxisY2.ScaleView.Zoomable = item.<AxisY2>.<ScaleViewZoomable>.Value
                    Exit For 'Only process the PdfArea
                End If
            Next

            'Restore the Chart Titles:
            'Dim TitleInfo = From item In ChartInfo.<ChartSettings>.<TitlesCollection>.<Title>
            Dim myTitleInfo = From item In myParent.ChartInfo.<ChartSettings>.<TitlesCollection>.<Title> Where item.<ChartArea>.Value = "PdfArea" 'Only display titles for PdfArea
            Dim TitleName As String
            PdfChart.Titles.Clear()
            For Each item In myTitleInfo
                TitleName = item.<Name>.Value
                If TitleName = Nothing Then
                    'No Title to add.
                Else
                    Dim NewTitle As New DataVisualization.Charting.Title
                    NewTitle.Name = TitleName
                    NewTitle.Text = item.<Text>.Value

                    'myChart.Titles.Add(TitleName).Text = item.<Text>.Value
                    PdfChart.Titles.Add(NewTitle)

                    'OLD CODE:
                    'myChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                    'myChart.Titles(TitleName).IsDockedInsideChartArea = False
                    'myChart.Titles(TitleName).Docking = DataVisualization.Charting.Docking.Top

                    'UPDATED CODE:
                    PdfChart.Titles(TitleName).IsDockedInsideChartArea = False

                    'NOTE: The code has been changed. The ChartArea property is set to "" for the main title - the DockedToChartArea will not be set.
                    '  The - If TitleName = "MainTitle" Then - code can be remoded in the future. This just handles old chart files with the Chart Area set for the Main Title.
                    If TitleName = "MainTitle" Then
                        'Do not set the DockedToChartArea property
                    Else
                        If item.<ChartArea>.Value <> Nothing Then
                            If item.<ChartArea>.Value = "" Then
                                'NOTE: Dont show other titles!
                                'PdfChart.Titles(TitleName).Text = item.<Text>.Value
                                'PdfChart.Titles(TitleName).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), item.<TextOrientation>.Value)
                                'Try
                                '    PdfChart.Titles(TitleName).Alignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                'Catch ex As Exception
                                '    Main.Message.AddWarning("Loading chart. Chart title alignment: " & ex.Message & vbCrLf)
                                'End Try

                                'PdfChart.Titles(TitleName).ForeColor = Color.FromArgb(item.<ForeColor>.Value)
                                'myFontStyle = FontStyle.Regular
                                'If item.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                                'If item.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                                'If item.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                                'If item.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                                'myFontSize = item.<Font>.<Size>.Value
                                'PdfChart.Titles(TitleName).Font = New Font(item.<Font>.<Name>.Value, myFontSize, myFontStyle)
                            ElseIf item.<ChartArea>.Value = AreaName Then
                                PdfChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                                PdfChart.Titles(TitleName).Text = item.<Text>.Value
                                PdfChart.Titles(TitleName).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), item.<TextOrientation>.Value)
                                Try
                                    PdfChart.Titles(TitleName).Alignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                                Catch ex As Exception
                                    Main.Message.AddWarning("Loading chart. Chart title alignment: " & ex.Message & vbCrLf)
                                End Try

                                PdfChart.Titles(TitleName).ForeColor = Color.FromArgb(item.<ForeColor>.Value)
                                myFontStyle = FontStyle.Regular
                                If item.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                                If item.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                                If item.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                                If item.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                                myFontSize = item.<Font>.<Size>.Value
                                PdfChart.Titles(TitleName).Font = New Font(item.<Font>.<Name>.Value, myFontSize, myFontStyle)
                            Else
                                'PdfChart.Titles(TitleName).DockedToChartArea = item.<ChartArea>.Value
                            End If
                        End If
                    End If

                    'PdfChart.Titles(TitleName).Text = item.<Text>.Value
                    'PdfChart.Titles(TitleName).TextOrientation = [Enum].Parse(GetType(DataVisualization.Charting.TextOrientation), item.<TextOrientation>.Value)
                    'Try
                    '    PdfChart.Titles(TitleName).Alignment = [Enum].Parse(GetType(ContentAlignment), item.<Alignment>.Value)
                    'Catch ex As Exception
                    '    Main.Message.AddWarning("Loading chart. Chart title alignment: " & ex.Message & vbCrLf)
                    'End Try

                    'PdfChart.Titles(TitleName).ForeColor = Color.FromArgb(item.<ForeColor>.Value)
                    'myFontStyle = FontStyle.Regular
                    'If item.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
                    'If item.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
                    'If item.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
                    'If item.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
                    'myFontSize = item.<Font>.<Size>.Value
                    'PdfChart.Titles(TitleName).Font = New Font(item.<Font>.<Name>.Value, myFontSize, myFontStyle)
                End If
            Next



            'Restore Chart Series:
            Dim Series = From item In myParent.ChartInfo.<ChartSettings>.<SeriesCollection>.<Series>
            Dim SeriesName As String
            PdfChart.Series.Clear()
            For Each item In Series
                If item.<ChartArea>.Value = AreaName Then


                    SeriesName = item.<Name>.Value
                    If SeriesName = Nothing Then
                        'Empty series: <Series></Series>
                        'No Series to add.
                    Else
                        If PdfChart.Series.IndexOf(SeriesName) = -1 Then
                            PdfChart.Series.Add(SeriesName)
                            PdfChart.Series(SeriesName).ChartType = [Enum].Parse(GetType(DataVisualization.Charting.SeriesChartType), item.<ChartType>.Value)
                            If item.<ChartArea>.Value <> Nothing Then PdfChart.Series(SeriesName).ChartArea = item.<ChartArea>.Value
                            PdfChart.Series(SeriesName).Legend = item.<Legend>.Value

                            'Point Chart custom properties
                            If item.<EmptyPointValue>.Value <> Nothing Then PdfChart.Series(SeriesName).SetCustomProperty("EmptyPointValue", item.<EmptyPointValue>.Value)
                            If item.<LabelStyle>.Value <> Nothing Then PdfChart.Series(SeriesName).SetCustomProperty("LabelStyle", item.<LabelStyle>.Value)
                            If item.<PixelPointDepth>.Value <> Nothing Then PdfChart.Series(SeriesName).SetCustomProperty("PixelPointDepth", item.<PixelPointDepth>.Value)
                            If item.<PixelPointGapDepth>.Value <> Nothing Then PdfChart.Series(SeriesName).SetCustomProperty("PixelPointGapDepth", item.<PixelPointGapDepth>.Value)
                            If item.<ShowMarkerLines>.Value <> Nothing Then PdfChart.Series(SeriesName).SetCustomProperty("ShowMarkerLines", item.<ShowMarkerLines>.Value)

                            PdfChart.Series(SeriesName).AxisLabel = item.<AxisLabel>.Value
                            PdfChart.Series(SeriesName).XAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<XAxisType>.Value)
                            PdfChart.Series(SeriesName).YAxisType = [Enum].Parse(GetType(DataVisualization.Charting.AxisType), item.<YAxisType>.Value)

                            If item.<XValueType>.Value = Nothing Then
                                item.Add(New XElement("XValueType", "Auto"))
                                PdfChart.Series(SeriesName).XValueType = DataVisualization.Charting.ChartValueType.Auto
                            Else
                                PdfChart.Series(SeriesName).XValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<XValueType>.Value)
                            End If

                            If item.<YValueType>.Value = Nothing Then
                                item.Add(New XElement("YValueType", "Auto"))
                                PdfChart.Series(SeriesName).YValueType = DataVisualization.Charting.ChartValueType.Auto
                            Else
                                PdfChart.Series(SeriesName).YValueType = [Enum].Parse(GetType(DataVisualization.Charting.ChartValueType), item.<YValueType>.Value)
                            End If

                            If item.<Marker>.<BorderColor>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerBorderColor = Color.FromArgb(item.<Marker>.<BorderColor>.Value)
                            If item.<Marker>.<BorderWidth>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerBorderWidth = item.<Marker>.<BorderWidth>.Value
                            If item.<Marker>.<Color>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerColor = Color.FromArgb(item.<Marker>.<Color>.Value)
                            If item.<Marker>.<Size>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerSize = item.<Marker>.<Size>.Value
                            If item.<Marker>.<Step>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerStep = item.<Marker>.<Step>.Value
                            If item.<Marker>.<Style>.Value <> Nothing Then PdfChart.Series(SeriesName).MarkerStyle = [Enum].Parse(GetType(DataVisualization.Charting.MarkerStyle), item.<Marker>.<Style>.Value)
                            If item.<Color>.Value <> Nothing Then PdfChart.Series(SeriesName).Color = Color.FromArgb(item.<Color>.Value)
                            If item.<Width>.Value <> Nothing Then PdfChart.Series(SeriesName).BorderWidth = item.<Width>.Value
                            If item.<ToolTip>.Value <> Nothing Then PdfChart.Series(SeriesName).ToolTip = item.<ToolTip>.Value

                            Try
                                If DataSource Is Nothing Then

                                Else
                                    'PdfChart.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(TableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(TableName).DefaultView, item.<YFieldName>.Value)
                                    'PdfChart.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                                    If item.<Continuity>.Value = "Continuous" Then
                                        myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(ContTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(ContTableName).DefaultView, item.<YFieldName>.Value)
                                    ElseIf item.<Continuity>.Value = "Discrete" Then
                                        myParent.Chart1.Series(SeriesName).Points.DataBindXY(DataSource.Data.Tables(DiscTableName).DefaultView, item.<XFieldName>.Value, DataSource.Data.Tables(DiscTableName).DefaultView, item.<YFieldName>.Value)
                                    Else
                                        Main.Message.AddWarning("ChartSettings-GetPdfChart-Unknown continuity: " & item.<Continuity>.Value & vbCrLf)
                                    End If
                                End If
                            Catch ex As Exception
                                Main.Message.AddWarning("Error loading Chart information:" & vbCrLf & ex.Message & vbCrLf)
                            End Try
                        Else
                            Main.Message.AddWarning("The series name is already used: " & SeriesName & vbCrLf)
                        End If
                    End If
                End If
            Next
        End If

        'PdfChart.ChartAreas("PdfArea").Position.Height = myChart.ChartAreas("PdfArea").Position.Height
        'PdfChart.ChartAreas("PdfArea").Position.Width = myChart.ChartAreas("PdfArea").Position.Width
        'PdfChart.Width = myChart.ChartAreas("PdfArea").Position.Width
        'PdfChart.Height = myChart.ChartAreas("PdfArea").Position.Height
        'PdfChart.ChartAreas("PdfArea").Position.FromRectangleF(myChart.ChartAreas("PdfArea").Position.ToRectangleF)

        'PdfChart.Width = myChart.Width
        'PdfChart.Height = myChart.Height


        'Main.Message.Add("myChart.Width = " & myChart.Width & vbCrLf)
        'Main.Message.Add("myChart.Height = " & myChart.Height & vbCrLf)
        'Main.Message.Add("myChart.ChartAreas(PdfArea).Position.Width = " & myChart.ChartAreas("PdfArea").Position.Width & vbCrLf)
        'Main.Message.Add("myChart.ChartAreas(PdfArea).Position.Height = " & myChart.ChartAreas("PdfArea").Position.Height & vbCrLf)
        'Main.Message.Add("myChart.ChartAreas(PdfArea).Position.ToRectangleF.Width = " & myChart.ChartAreas("PdfArea").Position.ToRectangleF.Width & vbCrLf)

        'NOTE: myChart.ChartAreas("PdfArea").Position.Width is the width of the chart area as a percentage of the chart width.

        PdfChart.Width = myParent.Chart1.Width * myParent.Chart1.ChartAreas("PdfArea").Position.Width / 100
        PdfChart.Height = myParent.Chart1.Height * myParent.Chart1.ChartAreas("PdfArea").Position.Height / 100



    End Sub

    'Private Sub btnTest_Click(sender As Object, e As EventArgs) Handles btnTest.Click
    '    Main.Message.Add("myParent.SeriesInfo(0).<Name>.Value = " & myParent.SeriesInfo(0).<Name>.Value & vbCrLf)
    'End Sub



    'Private Sub pbUserDef1_Click(sender As Object, e As EventArgs) Handles pbUserDef1.Click

    'End Sub

    'Private Sub pbUserDef1_MouseDown(sender As Object, e As MouseEventArgs) Handles pbUserDef1.MouseDown
    '    MouseUDef1Down = True
    '    MouseUDef1PosNow.X = e.X
    '    MouseUDef1PosNow.Y = e.Y
    '    If MouseUDef1PosNow.X < 0 Then MouseUDef1PosNow.X = 0
    '    If MouseUDef1PosNow.X > pbUserDef1.Width Then MouseUDef1PosNow.X = pbUserDef1.Width
    'End Sub

    'Private Sub pbUserDef1_MouseMove(sender As Object, e As MouseEventArgs) Handles pbUserDef1.MouseMove
    '    If MouseUDef1Down Then
    '        MouseUDef1PosNow.X = e.X
    '        MouseUDef1PosNow.Y = e.Y
    '        If MouseUDef1PosNow.X < 0 Then MouseUDef1PosNow.X = 0
    '        If MouseUDef1PosNow.X > pbUserDef1.Width Then MouseUDef1PosNow.X = pbUserDef1.Width

    '        pbUserDef1.Invalidate() 'Redraw pbUserDef1

    '        UDef1Info.XPos = MouseUDef1PosNow.X

    '        lblUserDef1.Text = UDef1Info.XParamVal
    '        lblValue.Text = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (UDef1Info.XParamVal - 1)


    '        Dim UserDef1 As Double = Main.Distribution.ContSampling.Minimum + Main.Distribution.ContSampling.Interval * (UDef1Info.XParamVal - 1)

    '        Dim UserDef1PDF As Double = SelectedDistrib.PDF(UserDef1)
    '        Dim UserDef1CDF As Double = SelectedDistrib.CDF(UserDef1)
    '        Dim UserDef1RevCDF As Double = SelectedDistrib.RevCDF(UserDef1)

    '        'Update the Area Annotation settings:
    '        dgvAreaAnnot.AllowUserToAddRows = False
    '        Dim NSettings As Integer = dgvAreaAnnot.Rows.Count
    '        Dim I As Integer
    '        Dim UpdateShading As Boolean = False
    '        For I = 0 To NSettings - 1
    '            If dgvAreaAnnot.Rows(I).Cells(1).Value = "User Defined Value 1" Then
    '                dgvAreaAnnot.Rows(I).Cells(2).Value = UserDef1
    '                dgvAreaAnnot.Rows(I).Cells(3).Value = UserDef1
    '                dgvAreaAnnot.Rows(I).Cells(4).Value = UserDef1CDF
    '                If dgvAreaAnnot.Rows(I).Cells(8).ValueType = GetType(String) Then
    '                    'To Value CDF not defined: The probability can not be updated.
    '                Else 'Update the probability
    '                    dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
    '                End If
    '                UpdateXmlAreaAnnotInfo(I)
    '                UpdateShading = True
    '            End If
    '            If dgvAreaAnnot.Rows(I).Cells(5).Value = "User Defined Value 1" Then
    '                dgvAreaAnnot.Rows(I).Cells(6).Value = UserDef1
    '                dgvAreaAnnot.Rows(I).Cells(7).Value = UserDef1
    '                dgvAreaAnnot.Rows(I).Cells(8).Value = UserDef1CDF
    '                If dgvAreaAnnot.Rows(I).Cells(4).ValueType = GetType(String) Then
    '                    'From Value CDF not defined: The probability can not be updated.
    '                Else 'Update the probability
    '                    dgvAreaAnnot.Rows(I).Cells(9).Value = dgvAreaAnnot.Rows(I).Cells(8).Value - dgvAreaAnnot.Rows(I).Cells(4).Value
    '                End If
    '                UpdateXmlAreaAnnotInfo(I)
    '                UpdateShading = True
    '            End If
    '        Next
    '        dgvAreaAnnot.AllowUserToAddRows = True

    '        'Update the Point Annotation settings:
    '        dgvPointAnnot.AllowUserToAddRows = False
    '        NSettings = dgvPointAnnot.Rows.Count
    '        Dim UpdatePointAnnot As Boolean = False
    '        For I = 0 To NSettings - 1
    '            If dgvPointAnnot.Rows(I).Cells(9).Value = "User Defined Value 1" Then 'Annotation Type
    '                dgvPointAnnot.Rows(I).Cells(10).Value = UserDef1 'Parameter
    '                dgvPointAnnot.Rows(I).Cells(12).Value = UserDef1CDF 'CDF Probability
    '                dgvPointAnnot.Rows(I).Cells(13).Value = UserDef1RevCDF 'Rev CDF Probability
    '                dgvPointAnnot.Rows(I).Cells(14).Value = UserDef1 'Random Variable Value
    '                dgvPointAnnot.Rows(I).Cells(15).Value = UserDef1PDF 'Probability Density
    '                UpdateXmlPointAnnotInfo(I)
    '                UpdatePointAnnot = True
    '            End If
    '        Next
    '        dgvPointAnnot.AllowUserToAddRows = True

    '        If UpdateShading Or UpdatePointAnnot Then
    '            myChart.Annotations.Clear()
    '            ApplyAreaShading()
    '            UpdateAnnotation()
    '        End If
    '    End If
    'End Sub

    'Private Sub pbUserDef1_MouseUp(sender As Object, e As MouseEventArgs) Handles pbUserDef1.MouseUp
    '    MouseUDef1Down = False
    '    pbUserDef1.Invalidate() 'Redraw pbUserDef1
    'End Sub

    'Private Sub pbUserDef1_Paint(sender As Object, e As PaintEventArgs) Handles pbUserDef1.Paint
    '    Dim myRectangle As New Rectangle
    '    Dim myPen As New Pen(Color.Black, 3)
    '    Dim Radius As Integer = 5
    '    myRectangle.X = MouseUDef1PosNow.X - Radius
    '    myRectangle.Y = 0
    '    myRectangle.Width = Radius * 2
    '    myRectangle.Height = pbUserDef1.Height - 6
    '    e.Graphics.DrawRectangle(myPen, myRectangle)
    'End Sub

    'Private Sub pbUserDef1_Resize(sender As Object, e As EventArgs) Handles pbUserDef1.Resize
    '    UDef1Info.XMax = pbUserDef1.Width

    'End Sub


    Private Sub UpdateValidChartTypes()
        'Update the valid chart types indicated by chkPdf, chkPdfLn, chkPmf, chkPmfLn, chkCdf, chkRevCdf, chkInvCdf, chkInvRevCdf


        chkPdf.Enabled = False
        chkPdfLn.Enabled = False
        chkPmf.Enabled = False
        chkPmfLn.Enabled = False
        chkCdf.Enabled = False
        chkRevCdf.Enabled = False
        chkInvCdf.Enabled = False
        chkInvRevCdf.Enabled = False

        If ContTableName = "" Then

        ElseIf DataSource.Data.Tables.Contains(ContTableName) Then
            For Each Item As Data.DataColumn In DataSource.Data.Tables(ContTableName).Columns
                If Item.ColumnName.StartsWith("PDF") Then chkPdf.Enabled = True
                If Item.ColumnName.StartsWith("PDFLn") Then chkPdfLn.Enabled = True
                If Item.ColumnName.StartsWith("CDF") Then chkCdf.Enabled = True
                If Item.ColumnName.StartsWith("RevCDF") Then chkRevCdf.Enabled = True
                If Item.ColumnName.StartsWith("InvCDF") Then chkInvCdf.Enabled = True
                If Item.ColumnName.StartsWith("InvRevCDF") Then chkInvRevCdf.Enabled = True
            Next
        End If

        If DiscTableName = "" Then

        ElseIf DataSource.Data.Tables.Contains(DiscTableName) Then
            For Each Item As Data.DataColumn In DataSource.Data.Tables(DiscTableName).Columns
                If Item.ColumnName.StartsWith("PMF") Then chkPmf.Enabled = True
                If Item.ColumnName.StartsWith("PMFLn") Then chkPmfLn.Enabled = True
                If Item.ColumnName.StartsWith("CDF") Then chkCdf.Enabled = True
                If Item.ColumnName.StartsWith("RevCDF") Then chkRevCdf.Enabled = True
                If Item.ColumnName.StartsWith("InvCDF") Then chkInvCdf.Enabled = True
                If Item.ColumnName.StartsWith("InvRevCDF") Then chkInvRevCdf.Enabled = True
            Next
        End If

    End Sub

    Private Sub txtLegendFont_TextChanged(sender As Object, e As EventArgs) Handles txtLegendFont.TextChanged

    End Sub

    Private Sub txtLegendFont_Click(sender As Object, e As EventArgs) Handles txtLegendFont.Click
        'Edit chart legend font
        FontDialog1.Font = txtLegendFont.Font
        FontDialog1.ShowDialog()
        If txtLegendFont.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtLegendFont.Font = FontDialog1.Font

            If myParent.ChartInfo.<ChartSettings>.<Legend>.<ForeColor>.Value = Nothing Then
                'The ChartInfo XML file does not save the Legend Font and Color.
            Else
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Name>.Value = FontDialog1.Font.Name
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Size>.Value = FontDialog1.Font.Size
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
                myParent.ChartInfo.<ChartSettings>.<Legend>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
                Modified = True
            End If
        End If
    End Sub

    Private Sub btnLegendColor_Click(sender As Object, e As EventArgs) Handles btnLegendColor.Click
        'Edit chart legend color
        ColorDialog1.Color = txtLegendFont.ForeColor
        ColorDialog1.ShowDialog()
        If txtLegendFont.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtLegendFont.ForeColor = ColorDialog1.Color

            If myParent.ChartInfo.<ChartSettings>.<Legend>.<ForeColor>.Value = Nothing Then
                'The ChartInfo XML file does not save the Legend Font and Color.
            Else
                myParent.ChartInfo.<ChartSettings>.<Legend>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString
                XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
                Modified = True
            End If
        End If
    End Sub

    Private Sub txtXLabelFont_TextChanged(sender As Object, e As EventArgs) Handles txtXLabelFont.TextChanged

    End Sub

    Private Sub txtXLabelFont_Click(sender As Object, e As EventArgs) Handles txtXLabelFont.Click
        'Edit chart label font
        FontDialog1.Font = txtXLabelFont.Font
        FontDialog1.ShowDialog()
        If txtXLabelFont.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtXLabelFont.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisX.LabelStyle.Font = FontDialog1.Font
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub btnXLabelColor_Click(sender As Object, e As EventArgs) Handles btnXLabelColor.Click
        'Edit chart label color
        ColorDialog1.Color = txtXLabelFont.ForeColor
        ColorDialog1.ShowDialog()
        If txtXLabelFont.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtXLabelFont.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisX.LabelStyle.ForeColor = ColorDialog1.Color
            myParent.AreaInfo(AreaNo).<AxisX>.<LabelStyle>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub txtX2LabelFont_TextChanged(sender As Object, e As EventArgs) Handles txtX2LabelFont.TextChanged

    End Sub

    Private Sub txtX2LabelFont_Click(sender As Object, e As EventArgs) Handles txtX2LabelFont.Click
        'Edit chart label font
        FontDialog1.Font = txtX2LabelFont.Font
        FontDialog1.ShowDialog()
        If txtX2LabelFont.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtX2LabelFont.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.LabelStyle.Font = FontDialog1.Font
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub btnX2LabelColor_Click(sender As Object, e As EventArgs) Handles btnX2LabelColor.Click
        'Edit chart label color
        ColorDialog1.Color = txtX2LabelFont.ForeColor
        ColorDialog1.ShowDialog()
        If txtX2LabelFont.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtX2LabelFont.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisX2.LabelStyle.ForeColor = ColorDialog1.Color
            myParent.AreaInfo(AreaNo).<AxisX2>.<LabelStyle>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub txtYLabelFont_TextChanged(sender As Object, e As EventArgs) Handles txtYLabelFont.TextChanged

    End Sub

    Private Sub txtYLabelFont_Click(sender As Object, e As EventArgs) Handles txtYLabelFont.Click
        'Edit chart label font
        FontDialog1.Font = txtYLabelFont.Font
        FontDialog1.ShowDialog()
        If txtYLabelFont.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtYLabelFont.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisY.LabelStyle.Font = FontDialog1.Font
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub btnYLabelColor_Click(sender As Object, e As EventArgs) Handles btnYLabelColor.Click
        'Edit chart label color
        ColorDialog1.Color = txtYLabelFont.ForeColor
        ColorDialog1.ShowDialog()
        If txtYLabelFont.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtYLabelFont.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisY.LabelStyle.ForeColor = ColorDialog1.Color
            myParent.AreaInfo(AreaNo).<AxisY>.<LabelStyle>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub txtY2LabelFont_TextChanged(sender As Object, e As EventArgs) Handles txtY2LabelFont.TextChanged

    End Sub

    Private Sub txtY2LabelFont_Click(sender As Object, e As EventArgs) Handles txtY2LabelFont.Click
        'Edit chart label font
        FontDialog1.Font = txtY2LabelFont.Font
        FontDialog1.ShowDialog()
        If txtY2LabelFont.Font.Equals(FontDialog1.Font) Then
            'The font has not been changed
        Else
            txtY2LabelFont.Font = FontDialog1.Font
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.LabelStyle.Font = FontDialog1.Font
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Name>.Value = FontDialog1.Font.Name
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Size>.Value = FontDialog1.Font.Size
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Bold>.Value = FontDialog1.Font.Bold
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Italic>.Value = FontDialog1.Font.Italic
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Strikeout>.Value = FontDialog1.Font.Strikeout
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<Font>.<Underline>.Value = FontDialog1.Font.Underline
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub

    Private Sub btnY2LabelColor_Click(sender As Object, e As EventArgs) Handles btnY2LabelColor.Click
        'Edit chart label color
        ColorDialog1.Color = txtY2LabelFont.ForeColor
        ColorDialog1.ShowDialog()
        If txtY2LabelFont.ForeColor = ColorDialog1.Color Then
            'The title color has not been changed.
        Else
            txtY2LabelFont.ForeColor = ColorDialog1.Color
            myParent.Chart1.ChartAreas(AreaNo).AxisY2.LabelStyle.ForeColor = ColorDialog1.Color
            myParent.AreaInfo(AreaNo).<AxisY2>.<LabelStyle>.<ForeColor>.Value = ColorDialog1.Color.ToArgb.ToString
            XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True)
            Modified = True
        End If
    End Sub





    Private Sub RecalcPointAnnot()
        'Recalculate pont annotation settings.

        Dim SelDistribPointAnnotInfo = From item In myParent.ChartInfo.<ChartSettings>.<PointAnnotationCollection>.<PointAnnotation> Where item.<DistributionNo>.Value = SelDistrib
        Dim RowCount As Integer = dgvPointAnnot.RowCount
        Dim RowNo As Integer
        For RowNo = 0 To RowCount - 2
            Select Case dgvPointAnnot.Rows(RowNo).Cells(9).Value
                Case "Probability <="
                    'Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                    Dim RVValue As Double = SelectedDistrib.InvCDF(dgvPointAnnot.Rows(RowNo).Cells(10).Value)
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Probability >"
                    'Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                    'Dim RVValue As Double = SelectedDistrib.InvRevCDF(dgvPointAnnot.Rows(RowNo).Cells(10).Value)
                    Dim RVValue As Double = SelectedDistrib.InvCDF(1 - dgvPointAnnot.Rows(RowNo).Cells(10).Value)
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Random Variable Value"
                    Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Mean"
                    Dim RVValue As Double = SelectedDistrib.Mean
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Median"
                    Dim RVValue As Double = SelectedDistrib.Median
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Mode"
                    Dim RVValue As Double = SelectedDistrib.Mode
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "Standard Deviation"
                    Dim RVValue As Double = SelectedDistrib.Mean + dgvPointAnnot.Rows(RowNo).Cells(10).Value * SelectedDistrib.StdDev
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "User Defined Value 1"
                    Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case "User Defined Value 2"
                    Dim RVValue As Double = dgvPointAnnot.Rows(RowNo).Cells(10).Value
                    Dim CDF As Double = SelectedDistrib.CDF(RVValue)
                    Dim RevCDF As Double = SelectedDistrib.RevCDF(RVValue)
                    Dim PDF As Double = SelectedDistrib.PDF(RVValue)
                    dgvPointAnnot.Rows(RowNo).Cells(12).Value = CDF
                    dgvPointAnnot.Rows(RowNo).Cells(13).Value = RevCDF
                    dgvPointAnnot.Rows(RowNo).Cells(14).Value = RVValue
                    dgvPointAnnot.Rows(RowNo).Cells(15).Value = PDF
                    SelDistribPointAnnotInfo(RowNo).<Parameter>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<CdfProbability>.Value = CDF
                    SelDistribPointAnnotInfo(RowNo).<RevCdfProbability>.Value = RevCDF
                    SelDistribPointAnnotInfo(RowNo).<RandVarValue>.Value = RVValue
                    SelDistribPointAnnotInfo(RowNo).<ProbabilityDensity>.Value = PDF
                    XmlHtmDisplay1.Rtf = XmlHtmDisplay1.XmlToRtf(myParent.ChartInfo.ToString, True) 'Update the XML display
                    UpdateAnnotation()

                Case Else
                    Main.Message.AddWarning("Unknown annotation type: " & dgvAreaAnnot.Rows(RowNo).Cells(1).Value & vbCrLf)

            End Select
        Next

    End Sub

























#End Region 'Form Methods ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Region " Form Events - Events that can be triggered by this form." '==========================================================================================================================

#End Region 'Form Events ----------------------------------------------------------------------------------------------------------------------------------------------------------------------


End Class



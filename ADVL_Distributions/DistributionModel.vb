Public Class DistributionModel
    'Stores Distribution information and data.

#Region " Variable Declarations - All the variables used in this class." '=====================================================================================================================
    Public Data As New DataSet  'Dataset used to hold the data values

    'Public Distrib As New DistributionInfo 'Information about the primary distribution. 

    'Random Variable Value sampling:
    Public ContSampling As New clsContSampling 'The sampling parameters used for a continuous distribution
    Public DiscSampling As New clsDiscSampling 'The sampling parameters used for a discrete distribution

    'Stored Charts:
    Public ChartList As New Dictionary(Of String, Xml.Linq.XDocument) 'Stores the settings used to chart the data. Each entry contains a different chart display. The Chart name is used as the key.
    Public ChartName As String 'The name of the Chart selected for display.

    'Multiple Distribution Settings:
    'Public MultiDistrib As New List(Of DistributionInfo)

    'List of Distribution Information records.
    'Public Info As New List(Of DistributionInfo)
    Public Info As New List(Of DistributionInfo)

    Public XValueInfo As New XAxisFieldInfo 'Information about the X Axis random varialble values used to plot the probability distribution functions.
    Public XProbInfo As New XAxisFieldInfo 'Information about the X Axis probabilitiy values used to plot the Inverse CDF charts.

    'List of 20 distinct colors:
    Public DistinctCols As New List(Of Color)

    Public XmlList As Xml.Linq.XDocument 'A list of distributions

#End Region 'Variable Declarations ------------------------------------------------------------------------------------------------------------------------------------------------------------

#Region " Properties" '========================================================================================================================================================================

    Private _modelName As String = "" 'The name of the data model
    Property ModelName As String
        Get
            Return _modelName
        End Get
        Set(value As String)
            _modelName = value
        End Set
    End Property

    Private _label As String = "" 'A label used to display the data model
    Property Label As String
        Get
            Return _label
        End Get
        Set(value As String)
            _label = value
        End Set
    End Property

    'NOTE: The Distribution Model can now contain Continuous and Discrete distributions.
    'Private _continuity As String = "Continuous" 'The continuity of the distribution(s) (Continuous or Discrete)
    'Property Continuity As String
    '    Get
    '        Return _continuity
    '    End Get
    '    Set(value As String)
    '        _continuity = value
    '    End Set
    'End Property

    Private _description As String = "" 'A description of the data model.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Private _notes As String = "" 'Notes on the data model.
    Property Notes As String
        Get
            Return _notes
        End Get
        Set(value As String)
            _notes = value
        End Set
    End Property

    Private _fileName As String = "" 'The name of the file used to store the data model. The file extension will be .Distrib
    Property FileName As String
        Get
            Return _fileName
        End Get
        Set(value As String)
            _fileName = value
        End Set
    End Property

    Private _modified As Boolean = False 'If True, the model has been modified and the file should be updated.
    Property Modified As Boolean
        Get
            Return _modified
        End Get
        Set(value As Boolean)
            _modified = value
        End Set
    End Property

    Private _probTolerance As Double = 0.0000000000001 'The tolerance on the Probability value returned by the InvCdf method.
    Property ProbTolerance As Double
        Get
            Return _probTolerance
        End Get
        Set(value As Double)
            _probTolerance = value
        End Set
    End Property

    Private _nContinuous As Integer = 0 'The number of continuous distributions in the model.
    Property NContinuous As Integer
        Get
            Return _nContinuous
        End Get
        Set(value As Integer)
            _nContinuous = value
        End Set
    End Property

    Private _nDiscrete As Integer = 0 'The number of discrete distributions in the model.
    Property NDiscrete As Integer
        Get
            Return _nDiscrete
        End Get
        Set(value As Integer)
            _nDiscrete = value
        End Set
    End Property

    Private _rVMinimum As Double = 0 'The minimum Random Variable Sampling used in the Continuous and Discrete distributions.
    Property RVMinimum As Double
        Get
            Return _rVMinimum
        End Get
        Set(value As Double)
            _rVMinimum = value
        End Set
    End Property

    Private _rVMaximum As Double = 0 'The maximum Random Variable Sampling used in the Continuous and Discrete distributions.
    Property RVMaximum As Double
        Get
            Return _rVMaximum
        End Get
        Set(value As Double)
            _rVMaximum = value
        End Set
    End Property


    Public Sub New()

        'List of 20 Simple, Distinct Colors
        'https://sashamaps.net/docs/resources/20-colors/
        DistinctCols.Add(Color.Crimson)
        DistinctCols.Add(Color.MediumSeaGreen)
        DistinctCols.Add(Color.Gold)
        DistinctCols.Add(Color.RoyalBlue)
        DistinctCols.Add(Color.Coral)
        DistinctCols.Add(Color.DarkOrchid)
        DistinctCols.Add(Color.MediumTurquoise)
        DistinctCols.Add(Color.Fuchsia)
        DistinctCols.Add(Color.GreenYellow)
        DistinctCols.Add(Color.Pink)
        DistinctCols.Add(Color.CadetBlue)
        DistinctCols.Add(Color.Thistle)
        DistinctCols.Add(Color.Sienna)
        DistinctCols.Add(Color.LemonChiffon)
        DistinctCols.Add(Color.Maroon)
        DistinctCols.Add(Color.Aquamarine)
        DistinctCols.Add(Color.Olive)
        DistinctCols.Add(Color.NavajoWhite)
        DistinctCols.Add(Color.Navy)
        DistinctCols.Add(Color.DarkGray)
        DistinctCols.Add(Color.Black) '21 Colors with black.

        'Color      Hex         Nearest Named Color
        'Red		E6194B		Crimson		    DC143C
        'Green		3CB44B		MediumSeaGreen	3CB371
        'Yellow		FFE119		Gold			FFD700
        'Blue		4363D8		RoyalBlue		4169E1
        'Orange 	F58231		Coral			FF7F50
        'Purple		911EB4		DarkOrchid		9932CC
        'Cyan		42D4F4		MediumTurquoise	48D1CC
        'Magenta	F032E6		Fuchsia			FF00FF
        'Lime		BFEF45		GreenYellow		ADFF2F
        'Pink		FABED4		Pink			FFC0CB
        'Teal		469990		CadetBlue		5F9EA0
        'Lavender	DCBEFF		Thistle			D8BFD8
        'Brown		9A6324		Sienna			A0522D
        'Beige		FFFAC8		LemonChiffon	FFFACD
        'Maroon	    800000		Maroon			800000
        'Mint		AAFFC3		Aquamarine		7FFFD4
        'Olive		808000		Olive			808000
        'Apricot	FFD8B1		NavajoWhite		FFDEAD
        'Navy		000075		Navy			000080
        'Gray		A9A9A9	    DarkGray		A9A9A9
        'Black		000000		Black			000000

        GenerateDistInfo() 'Populate the DistList XDoc with the distribution information.

    End Sub

#End Region 'Properties -----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Region " Methods" '===========================================================================================================================================================================

    Public Sub Clear()
        'Clear the Distribution Model.

        ModelName = "Probability Distribution Model"
        Label = "Probability Distribution Model"
        'Continuity = "Continuous"
        Description = ""
        Notes = ""

        Info.Clear() 'Clear the Distribution information list

        Dim Distrib As New DistributionInfo

        Distrib.Name = "Normal"
        Distrib.Continuity = "Continuous"
        Distrib.NParams = 2

        'Distrib.ParamA.Value = 1 'Default mean of the Normal distribution
        Distrib.ParamA.Value = 0 'Default mean of the Normal distribution
        Distrib.ParamB.Value = 1 'Default Standard Deviation of the Normal distribution

        Distrib.ParamA.Name = "Mean"
        Distrib.ParamA.Symbol = "Mu"
        Distrib.ParamA.Type = "Location"
        Distrib.ParamA.NumberType = "Single"
        Distrib.ParamA.Minimum = ""
        Distrib.ParamA.Maximum = ""
        Distrib.ParamA.AdjustMin = -10
        Distrib.ParamA.AdjustMax = 10
        Distrib.ParamA.Increment = 0.5
        Distrib.ParamA.Description = "The mean of the distribution."

        Distrib.ParamB.Name = "Standard Deviation"
        Distrib.ParamB.Symbol = "Sigma"
        Distrib.ParamB.Type = "Scale"
        Distrib.ParamB.NumberType = "Single"
        Distrib.ParamB.Minimum = "gt 0"
        Distrib.ParamB.Maximum = ""
        Distrib.ParamB.AdjustMin = 0
        Distrib.ParamB.AdjustMax = 10
        Distrib.ParamB.Increment = 0.2
        Distrib.ParamB.Description = "The standard deviation of the distribution."

        'Distrib.ValueInfo.Name = "Value"
        'Distrib.ValueInfo.Valid = True
        'Distrib.ValueInfo.Generate = True
        ''ValueInfo.ColNumber = 0
        'Distrib.ValueInfo.NumType = "Single"
        'Distrib.ValueInfo.Format = ""
        'Distrib.ValueInfo.Alignment = "NotSet"
        'Distrib.ValueInfo.ValueLabel = "Value"
        'Distrib.ValueInfo.Units = ""
        'Distrib.ValueInfo.LabelPrefix = "Value"
        'Distrib.ValueInfo.SeriesLabel = "Value"
        'Distrib.ValueInfo.Description = "Random Variable Value"

        Distrib.PdfInfo.Name = "PDF_1"
        Distrib.PdfInfo.Valid = True
        Distrib.PdfInfo.Generate = True
        'PdfInfo.ColNumber = 1
        Distrib.PdfInfo.NumType = "Single"
        Distrib.PdfInfo.Format = ""
        Distrib.PdfInfo.Alignment = "NotSet"
        Distrib.PdfInfo.ValueLabel = "Probability Density"
        Distrib.PdfInfo.Units = ""
        Distrib.PdfInfo.LabelPrefix = "PDF"
        Distrib.PdfInfo.SeriesLabel = "PDF"
        Distrib.PdfInfo.Description = "Probability Density Function"

        Distrib.PdfLnInfo.Name = "PDFLn_1"
        Distrib.PdfLnInfo.Valid = True
        Distrib.PdfLnInfo.Generate = False
        'PdfLnInfo.ColNumber = 2
        Distrib.PdfLnInfo.NumType = "Single"
        Distrib.PdfLnInfo.Format = ""
        Distrib.PdfLnInfo.Alignment = "NotSet"
        Distrib.PdfLnInfo.ValueLabel = "Ln Probability Density"
        Distrib.PdfLnInfo.Units = ""
        Distrib.PdfLnInfo.LabelPrefix = "PDFLn"
        Distrib.PdfLnInfo.SeriesLabel = "PDFLn"
        Distrib.PdfLnInfo.Description = "Natural Log of Probability Density Function"





        Distrib.PmfInfo.Name = "PMF_1"
        Distrib.PmfInfo.Valid = False
        Distrib.PmfInfo.Generate = True
        Distrib.PmfInfo.NumType = "Single"
        Distrib.PmfInfo.Format = ""
        Distrib.PmfInfo.Alignment = "NotSet"
        Distrib.PmfInfo.ValueLabel = "Probability Mass"
        Distrib.PmfInfo.Units = ""
        Distrib.PmfInfo.LabelPrefix = "PMF"
        Distrib.PmfInfo.SeriesLabel = "PMF"
        Distrib.PmfInfo.Description = "Probability Mass Function"

        Distrib.PmfLnInfo.Name = "PMFLn_1"
        Distrib.PmfLnInfo.Valid = False
        Distrib.PmfLnInfo.Generate = False
        Distrib.PmfLnInfo.NumType = "Single"
        Distrib.PmfLnInfo.Format = ""
        Distrib.PmfLnInfo.Alignment = "NotSet"
        Distrib.PmfLnInfo.ValueLabel = "Ln Probability Mass"
        Distrib.PmfLnInfo.Units = ""
        Distrib.PmfLnInfo.LabelPrefix = "PMFLn"
        Distrib.PmfLnInfo.SeriesLabel = "PMFLn"
        Distrib.PmfLnInfo.Description = "Natural Log of Probability Mass Function"




        Distrib.CdfInfo.Name = "CDF_1"
        Distrib.CdfInfo.Valid = True
        Distrib.CdfInfo.Generate = True
        'CdfInfo.ColNumber = 2
        Distrib.CdfInfo.NumType = "Single"
        Distrib.CdfInfo.Format = ""
        Distrib.CdfInfo.Alignment = "NotSet"
        Distrib.CdfInfo.ValueLabel = "Probability"
        Distrib.CdfInfo.Units = ""
        Distrib.CdfInfo.LabelPrefix = "CDF"
        Distrib.CdfInfo.SeriesLabel = "CDF"
        Distrib.CdfInfo.Description = "Cumulative Distribution Function"

        Distrib.RevCdfInfo.Name = "RevCDF_1"
        Distrib.RevCdfInfo.Valid = True
        Distrib.RevCdfInfo.Generate = True
        Distrib.RevCdfInfo.NumType = "Single"
        Distrib.RevCdfInfo.Format = ""
        Distrib.RevCdfInfo.Alignment = "NotSet"
        Distrib.RevCdfInfo.ValueLabel = "Probability"
        Distrib.RevCdfInfo.Units = ""
        Distrib.RevCdfInfo.LabelPrefix = "RevCDF"
        Distrib.RevCdfInfo.SeriesLabel = "RevCDF"
        Distrib.RevCdfInfo.Description = "Reverse Cumulative Distribution Function"

        'Distrib.ProbabilityInfo.Name = "Probability"
        'Distrib.ProbabilityInfo.Valid = True
        'Distrib.ProbabilityInfo.Generate = True
        ''ProbabilityInfo.ColNumber = 3
        'Distrib.ProbabilityInfo.NumType = "Single"
        'Distrib.ProbabilityInfo.Format = ""
        'Distrib.ProbabilityInfo.Alignment = "NotSet"
        'Distrib.ProbabilityInfo.ValueLabel = "Probability"
        'Distrib.ProbabilityInfo.Units = ""
        'Distrib.ProbabilityInfo.LabelPrefix = "Probability"
        'Distrib.ProbabilityInfo.SeriesLabel = "Probability"
        'Distrib.ProbabilityInfo.Description = "Probability"

        Distrib.InvCdfInfo.Name = "InvCDF_1"
        Distrib.InvCdfInfo.Valid = True
        'Distrib.InvCdfInfo.Generate = True
        Distrib.InvCdfInfo.Generate = False 'Only generate Inverse CDF data if required.
        'InvCdfInfo.ColNumber = 4
        Distrib.InvCdfInfo.NumType = "Single"
        Distrib.InvCdfInfo.Format = ""
        Distrib.InvCdfInfo.Alignment = "NotSet"
        Distrib.InvCdfInfo.ValueLabel = "Value"
        Distrib.InvCdfInfo.Units = ""
        Distrib.InvCdfInfo.LabelPrefix = "InvCDF"
        Distrib.InvCdfInfo.SeriesLabel = "InvCDF"
        Distrib.InvCdfInfo.Description = "Inverse Cumulative Distribution Function"

        Distrib.InvRevCdfInfo.Name = "InvRevCDF_1"
        Distrib.InvRevCdfInfo.Valid = True
        Distrib.InvRevCdfInfo.Generate = False 'Only generate Inverse Reverse CDF data if required.
        Distrib.InvRevCdfInfo.NumType = "Single"
        Distrib.InvRevCdfInfo.Format = ""
        Distrib.InvRevCdfInfo.Alignment = "NotSet"
        Distrib.InvRevCdfInfo.ValueLabel = "Value"
        Distrib.InvRevCdfInfo.Units = ""
        Distrib.InvRevCdfInfo.LabelPrefix = "InvRevCDF"
        Distrib.InvRevCdfInfo.SeriesLabel = "InvRevCDF"
        Distrib.InvRevCdfInfo.Description = "Inverse Reverse Cumulative Distribution Function"

        Distrib.Display.BorderColor = Color.Black
        Distrib.Display.BorderWidth = 1
        Distrib.Display.LineColor = Color.Red
        Distrib.Display.LineWidth = 2
        Distrib.Display.MarkerColor = Color.Red
        Distrib.Display.MarkerFill = "Yes"
        Distrib.Display.MarkerSize = 6
        Distrib.Display.MarkerStep = 1
        Distrib.Display.MarkerStyle = "Circle"

        Info.Add(Distrib)

        XValueInfo.Alignment = "NotSet"
        XValueInfo.Description = "X Axis Random Variable value"
        XValueInfo.Format = ""
        XValueInfo.Generate = True
        XValueInfo.Name = "Value"
        XValueInfo.NumType = "Single"
        XValueInfo.Units = ""
        XValueInfo.ValueLabel = "Value"

        XProbInfo.Alignment = "NotSet"
        XProbInfo.Description = "X Axis Probability value"
        XProbInfo.Format = ""
        XProbInfo.Generate = True
        XProbInfo.Name = "Probability"
        XProbInfo.NumType = "Single"
        XProbInfo.Units = ""
        XProbInfo.ValueLabel = "Probability"

        'ContSampling.Minimum = -3
        ContSampling.Minimum = -5
        ContSampling.MinLock = True
        'ContSampling.Maximum = 3
        ContSampling.Maximum = 5
        ContSampling.MaxLock = True
        ContSampling.Interval = 0.1
        ContSampling.IntervalLock = True
        'ContSampling.NSamples = 61
        ContSampling.NSamplesLock = False
        ContSampling.Label = "Value"
        ContSampling.Units = ""
        ContSampling.Description = "Random Variable Value"

        DiscSampling.Minimum = -5
        DiscSampling.Maximum = 5
        DiscSampling.Label = "Value"
        DiscSampling.Description = "Random Variable Value"


        ChartList.Clear() 'Clear the Chart List
        ChartName = ""

        'MultiDistrib.Clear() 'Clear the secondary distributions

        'Data.Tables.Clear()
        'Data.Reset()

        If Data.Tables.Contains("Continuous_Data_Table") Then Data.Tables("Continuous_Data_Table").Rows.Clear()
        If Data.Tables.Contains("Discrete_Data_Table") Then Data.Tables("Discrete_Data_Table").Rows.Clear()


    End Sub

    Public Function ToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the Distribution settings.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <!---->
                   <!--Distribution Data Model-->
                   <DistributionModel>
                       <Name><%= ModelName %></Name>
                       <Label><%= Label %></Label>
                       <Description><%= Description %></Description>
                       <Notes><%= System.Xml.XmlConvert.EncodeName(Notes) %></Notes>
                       <ChartName><%= ChartName %></ChartName>
                       <!--The Continuous Random Variable Sampling Settings:-->
                       <%= ContSampling.ToXDoc.<ContinuousSampling> %>
                       <!--The Discrete Random Variable Sampling Settings:-->
                       <%= DiscSampling.ToXDoc.<DiscreteSampling> %>
                       <!--The Distribution Settings:-->
                       <%= DistributionList().<DistributionList> %>
                       <XValueInfo><%= XValueInfo.ToXDoc.<Settings> %></XValueInfo>
                       <XProbInfo><%= XProbInfo.ToXDoc.<Settings> %></XProbInfo>
                       <!--Chart List:-->
                       <%= ChartsToXDoc().<ChartList> %>
                   </DistributionModel>

        '<Continuity><%= Continuity %></Continuity>

        '<!--The Primary Distribution Settings:-->
        '<%= Distrib.ToXDoc.<Distribution> %>

        '<!--The Secondary Distribution Settings:-->
        '<%= SecondaryDistrib().<SecondaryDistributions> %>

        Return XDoc
    End Function

    'Public Function ToXDoc_Old() As System.Xml.Linq.XDocument
    '    'Return an XDocument containing the Distribution settings.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <!---->
    '               <!--Distribution Data Model-->
    '               <DistributionModel>
    '                   <Name><%= ModelName %></Name>
    '                   <Label><%= Label %></Label>
    '                   <Description><%= Description %></Description>
    '                   <Notes><%= System.Xml.XmlConvert.EncodeName(Notes) %></Notes>
    '                   <ChartName><%= ChartName %></ChartName>
    '                   <Distribution>
    '                       <Name><%= Distrib.Name %></Name>
    '                       <Continuity><%= Distrib.Continuity %></Continuity>
    '                       <NParams><%= Distrib.NParams %></NParams>
    '                       <!--Parameter Values-->
    '                       <%= ParamValues(Distrib.NParams).<ParameterValues> %>
    '                       <!--Parameter Information-->
    '                       <%= ParamInfo(Distrib.NParams).<ParameterInfo> %>
    '                       <!--Field Information-->
    '                       <%= FieldInfo(Distrib.Continuity).<FieldInfo> %>
    '                       <!--Random Variable Sampling Information-->
    '                       <%= SamplingInfo(Distrib.Continuity).<Sampling> %>
    '                       <!--Chart List-->
    '                       <%= ChartsToXDoc().<ChartList> %>
    '                   </Distribution>
    '               </DistributionModel>
    '    Return XDoc
    'End Function

    'Public Function ParamValues(NParams As Integer) As System.Xml.Linq.XDocument
    '    'Returns an Xml document of the Parameter values.

    '    Select Case NParams
    '        Case 1
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                           <ParamA><%= Distrib.ParamA.Value %></ParamA>
    '                       </ParameterValues>
    '            Return XDoc
    '        Case 2
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                           <ParamA><%= Distrib.ParamA.Value %></ParamA>
    '                           <ParamB><%= Distrib.ParamB.Value %></ParamB>
    '                       </ParameterValues>
    '            Return XDoc
    '        Case 3
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                           <ParamA><%= Distrib.ParamA.Value %></ParamA>
    '                           <ParamB><%= Distrib.ParamB.Value %></ParamB>
    '                           <ParamC><%= Distrib.ParamC.Value %></ParamC>
    '                       </ParameterValues>
    '            Return XDoc
    '        Case 4
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                           <ParamA><%= Distrib.ParamA.Value %></ParamA>
    '                           <ParamB><%= Distrib.ParamB.Value %></ParamB>
    '                           <ParamC><%= Distrib.ParamC.Value %></ParamC>
    '                           <ParamD><%= Distrib.ParamD.Value %></ParamD>
    '                       </ParameterValues>
    '            Return XDoc
    '        Case 5
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                           <ParamA><%= Distrib.ParamA.Value %></ParamA>
    '                           <ParamB><%= Distrib.ParamB.Value %></ParamB>
    '                           <ParamC><%= Distrib.ParamC.Value %></ParamC>
    '                           <ParamD><%= Distrib.ParamD.Value %></ParamD>
    '                           <ParamE><%= Distrib.ParamE.Value %></ParamE>
    '                       </ParameterValues>
    '            Return XDoc
    '        Case Else
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterValues>
    '                       </ParameterValues>
    '            Return XDoc
    '    End Select
    'End Function

    'Public Function ParamInfo(NParams As Integer) As System.Xml.Linq.XDocument
    '    'Returns an Xml document of the Parameter info.
    '    Select Case NParams
    '        Case 1
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                           <ParamA>
    '                               <Name><%= Distrib.ParamA.Name %></Name>
    '                               <Symbol><%= Distrib.ParamA.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamA.Type %></Type>
    '                               <NumberType><%= Distrib.ParamA.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamA.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamA.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamA.Increment %></Increment>
    '                               <Description><%= Distrib.ParamA.Description %></Description>
    '                           </ParamA>
    '                       </ParameterInfo>
    '            Return XDoc
    '        Case 2
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                           <ParamA>
    '                               <Name><%= Distrib.ParamA.Name %></Name>
    '                               <Symbol><%= Distrib.ParamA.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamA.Type %></Type>
    '                               <NumberType><%= Distrib.ParamA.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamA.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamA.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamA.Increment %></Increment>
    '                               <Description><%= Distrib.ParamA.Description %></Description>
    '                           </ParamA>
    '                           <ParamB>
    '                               <Name><%= Distrib.ParamB.Name %></Name>
    '                               <Symbol><%= Distrib.ParamB.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamB.Type %></Type>
    '                               <NumberType><%= Distrib.ParamB.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamB.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamB.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamB.Increment %></Increment>
    '                               <Description><%= Distrib.ParamB.Description %></Description>
    '                           </ParamB>
    '                       </ParameterInfo>
    '            Return XDoc
    '        Case 3
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                           <ParamA>
    '                               <Name><%= Distrib.ParamA.Name %></Name>
    '                               <Symbol><%= Distrib.ParamA.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamA.Type %></Type>
    '                               <NumberType><%= Distrib.ParamA.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamA.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamA.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamA.Increment %></Increment>
    '                               <Description><%= Distrib.ParamA.Description %></Description>
    '                           </ParamA>
    '                           <ParamB>
    '                               <Name><%= Distrib.ParamB.Name %></Name>
    '                               <Symbol><%= Distrib.ParamB.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamB.Type %></Type>
    '                               <NumberType><%= Distrib.ParamB.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamB.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamB.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamB.Increment %></Increment>
    '                               <Description><%= Distrib.ParamB.Description %></Description>
    '                           </ParamB>
    '                           <ParamC>
    '                               <Name><%= Distrib.ParamC.Name %></Name>
    '                               <Symbol><%= Distrib.ParamC.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamC.Type %></Type>
    '                               <NumberType><%= Distrib.ParamC.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamC.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamC.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamC.Increment %></Increment>
    '                               <Description><%= Distrib.ParamC.Description %></Description>
    '                           </ParamC>
    '                       </ParameterInfo>
    '            Return XDoc
    '        Case 4
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                           <ParamA>
    '                               <Name><%= Distrib.ParamA.Name %></Name>
    '                               <Symbol><%= Distrib.ParamA.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamA.Type %></Type>
    '                               <NumberType><%= Distrib.ParamA.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamA.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamA.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamA.Increment %></Increment>
    '                               <Description><%= Distrib.ParamA.Description %></Description>
    '                           </ParamA>
    '                           <ParamB>
    '                               <Name><%= Distrib.ParamB.Name %></Name>
    '                               <Symbol><%= Distrib.ParamB.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamB.Type %></Type>
    '                               <NumberType><%= Distrib.ParamB.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamB.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamB.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamB.Increment %></Increment>
    '                               <Description><%= Distrib.ParamB.Description %></Description>
    '                           </ParamB>
    '                           <ParamC>
    '                               <Name><%= Distrib.ParamC.Name %></Name>
    '                               <Symbol><%= Distrib.ParamC.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamC.Type %></Type>
    '                               <NumberType><%= Distrib.ParamC.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamC.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamC.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamC.Increment %></Increment>
    '                               <Description><%= Distrib.ParamC.Description %></Description>
    '                           </ParamC>
    '                           <ParamD>
    '                               <Name><%= Distrib.ParamD.Name %></Name>
    '                               <Symbol><%= Distrib.ParamD.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamD.Type %></Type>
    '                               <NumberType><%= Distrib.ParamD.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamD.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamD.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamD.Increment %></Increment>
    '                               <Description><%= Distrib.ParamD.Description %></Description>
    '                           </ParamD>
    '                       </ParameterInfo>
    '            Return XDoc
    '        Case 5
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                           <ParamA>
    '                               <Name><%= Distrib.ParamA.Name %></Name>
    '                               <Symbol><%= Distrib.ParamA.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamA.Type %></Type>
    '                               <NumberType><%= Distrib.ParamA.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamA.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamA.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamA.Increment %></Increment>
    '                               <Description><%= Distrib.ParamA.Description %></Description>
    '                           </ParamA>
    '                           <ParamB>
    '                               <Name><%= Distrib.ParamB.Name %></Name>
    '                               <Symbol><%= Distrib.ParamB.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamB.Type %></Type>
    '                               <NumberType><%= Distrib.ParamB.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamB.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamB.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamB.Increment %></Increment>
    '                               <Description><%= Distrib.ParamB.Description %></Description>
    '                           </ParamB>
    '                           <ParamC>
    '                               <Name><%= Distrib.ParamC.Name %></Name>
    '                               <Symbol><%= Distrib.ParamC.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamC.Type %></Type>
    '                               <NumberType><%= Distrib.ParamC.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamC.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamC.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamC.Increment %></Increment>
    '                               <Description><%= Distrib.ParamC.Description %></Description>
    '                           </ParamC>
    '                           <ParamD>
    '                               <Name><%= Distrib.ParamD.Name %></Name>
    '                               <Symbol><%= Distrib.ParamD.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamD.Type %></Type>
    '                               <NumberType><%= Distrib.ParamD.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamD.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamD.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamD.Increment %></Increment>
    '                               <Description><%= Distrib.ParamD.Description %></Description>
    '                           </ParamD>
    '                           <ParamE>
    '                               <Name><%= Distrib.ParamE.Name %></Name>
    '                               <Symbol><%= Distrib.ParamE.Symbol %></Symbol>
    '                               <Type><%= Distrib.ParamE.Type %></Type>
    '                               <NumberType><%= Distrib.ParamE.NumberType %></NumberType>
    '                               <Minimum><%= Distrib.ParamE.Minimum %></Minimum>
    '                               <Maximim><%= Distrib.ParamE.Maximum %></Maximim>
    '                               <Increment><%= Distrib.ParamE.Increment %></Increment>
    '                               <Description><%= Distrib.ParamE.Description %></Description>
    '                           </ParamE>
    '                       </ParameterInfo>
    '            Return XDoc
    '        Case Else
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <ParameterInfo>
    '                       </ParameterInfo>
    '            Return XDoc
    '    End Select

    'End Function

    'Public Function FieldInfo(Continuity As String) As System.Xml.Linq.XDocument
    '    'Returns an Xml document of the Field information.
    '    Select Case Continuity
    '        Case "Continuous"
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <FieldInfo>
    '                           <Value>
    '                               <Name><%= Distrib.ValueInfo.Name %></Name>
    '                               <Legend><%= Distrib.ValueInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.ValueInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.ValueInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.ValueInfo.NumType %></NumType>
    '                               <Format><%= Distrib.ValueInfo.Format %></Format>
    '                               <Alignment><%= Distrib.ValueInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.ValueInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.ValueInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.ValueInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.ValueInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.ValueInfo.Description %></Description>
    '                           </Value>
    '                           <PDF>
    '                               <Name><%= Distrib.PdfInfo.Name %></Name>
    '                               <Legend><%= Distrib.PdfInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.PdfInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.PdfInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.PdfInfo.NumType %></NumType>
    '                               <Format><%= Distrib.PdfInfo.Format %></Format>
    '                               <Alignment><%= Distrib.PdfInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.PdfInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.PdfInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.PdfInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.PdfInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.PdfInfo.Description %></Description>
    '                           </PDF>
    '                           <PDFLn>
    '                               <Name><%= Distrib.PdfLnInfo.Name %></Name>
    '                               <Legend><%= Distrib.PdfLnInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.PdfLnInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.PdfLnInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.PdfLnInfo.NumType %></NumType>
    '                               <Format><%= Distrib.PdfLnInfo.Format %></Format>
    '                               <Alignment><%= Distrib.PdfLnInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.PdfLnInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.PdfLnInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.PdfLnInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.PdfLnInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.PdfLnInfo.Description %></Description>
    '                           </PDFLn>
    '                           <CDF>
    '                               <Name><%= Distrib.CdfInfo.Name %></Name>
    '                               <Legend><%= Distrib.CdfInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.CdfInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.CdfInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.CdfInfo.NumType %></NumType>
    '                               <Format><%= Distrib.CdfInfo.Format %></Format>
    '                               <Alignment><%= Distrib.CdfInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.CdfInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.CdfInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.CdfInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.CdfInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.CdfInfo.Description %></Description>
    '                           </CDF>
    '                           <Probability>
    '                               <Name><%= Distrib.ProbabilityInfo.Name %></Name>
    '                               <Legend><%= Distrib.ProbabilityInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.ProbabilityInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.ProbabilityInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.ProbabilityInfo.NumType %></NumType>
    '                               <Format><%= Distrib.ProbabilityInfo.Format %></Format>
    '                               <Alignment><%= Distrib.ProbabilityInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.ProbabilityInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.ProbabilityInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.ProbabilityInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.ProbabilityInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.ProbabilityInfo.Description %></Description>
    '                           </Probability>
    '                           <InvCDF>
    '                               <Name><%= Distrib.InvCdfInfo.Name %></Name>
    '                               <Legend><%= Distrib.InvCdfInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.InvCdfInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.InvCdfInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.InvCdfInfo.NumType %></NumType>
    '                               <Format><%= Distrib.InvCdfInfo.Format %></Format>
    '                               <Alignment><%= Distrib.InvCdfInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.InvCdfInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.InvCdfInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.InvCdfInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.InvCdfInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.InvCdfInfo.Description %></Description>
    '                           </InvCDF>
    '                       </FieldInfo>
    '            Return XDoc
    '        Case "Discrete"
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <FieldInfo>
    '                           <Value>
    '                               <Name><%= Distrib.ValueInfo.Name %></Name>
    '                               <Legend><%= Distrib.ValueInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.ValueInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.ValueInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.ValueInfo.NumType %></NumType>
    '                               <Format><%= Distrib.ValueInfo.Format %></Format>
    '                               <Alignment><%= Distrib.ValueInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.ValueInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.ValueInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.ValueInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.ValueInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.ValueInfo.Description %></Description>
    '                           </Value>
    '                           <PMF>
    '                               <Name><%= Distrib.PdfInfo.Name %></Name>
    '                               <Legend><%= Distrib.PdfInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.PdfInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.PdfInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.PdfInfo.NumType %></NumType>
    '                               <Format><%= Distrib.PdfInfo.Format %></Format>
    '                               <Alignment><%= Distrib.PdfInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.PdfInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.PdfInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.PdfInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.PdfInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.PdfInfo.Description %></Description>
    '                           </PMF>
    '                           <PMFLn>
    '                               <Name><%= Distrib.PdfLnInfo.Name %></Name>
    '                               <Legend><%= Distrib.PdfLnInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.PdfLnInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.PdfLnInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.PdfLnInfo.NumType %></NumType>
    '                               <Format><%= Distrib.PdfLnInfo.Format %></Format>
    '                               <Alignment><%= Distrib.PdfLnInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.PdfLnInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.PdfLnInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.PdfLnInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.PdfLnInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.PdfLnInfo.Description %></Description>
    '                           </PMFLn>
    '                           <CDF>
    '                               <Name><%= Distrib.CdfInfo.Name %></Name>
    '                               <Legend><%= Distrib.CdfInfo.Legend %></Legend>
    '                               <Valid><%= Distrib.CdfInfo.Valid %></Valid>
    '                               <Generate><%= Distrib.CdfInfo.Generate %></Generate>
    '                               <NumType><%= Distrib.CdfInfo.NumType %></NumType>
    '                               <Format><%= Distrib.CdfInfo.Format %></Format>
    '                               <Alignment><%= Distrib.CdfInfo.Alignment %></Alignment>
    '                               <ValueLabel><%= Distrib.CdfInfo.ValueLabel %></ValueLabel>
    '                               <Units><%= Distrib.CdfInfo.Units %></Units>
    '                               <LabelPrefix><%= Distrib.CdfInfo.LabelPrefix %></LabelPrefix>
    '                               <SeriesLabel><%= Distrib.CdfInfo.SeriesLabel %></SeriesLabel>
    '                               <Description><%= Distrib.CdfInfo.Description %></Description>
    '                           </CDF>
    '                       </FieldInfo>
    '            Return XDoc
    '        Case Else
    '            Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '                       <FieldInfo>
    '                       </FieldInfo>
    '            Return XDoc
    '    End Select
    'End Function

    Public Function SamplingInfo(Continuity As String) As System.Xml.Linq.XDocument
        'Returns an Xml document of the Random Variable Value Sampling information.
        Select Case Continuity
            Case "Continuous"
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <Sampling>
                               <Minimum><%= ContSampling.Minimum %></Minimum>
                               <MinLock><%= ContSampling.MinLock %></MinLock>
                               <Maximum><%= ContSampling.Maximum %></Maximum>
                               <MaxLock><%= ContSampling.MaxLock %></MaxLock>
                               <Interval><%= ContSampling.Interval %></Interval>
                               <IntervalLock><%= ContSampling.IntervalLock %></IntervalLock>
                               <NSamples><%= ContSampling.NSamples %></NSamples>
                               <NSamplesLock><%= ContSampling.NSamplesLock %></NSamplesLock>
                               <Label><%= ContSampling.Label %></Label>
                               <Units><%= ContSampling.Units %></Units>
                               <Description><%= ContSampling.Description %></Description>
                           </Sampling>
                Return XDoc
            Case "Discrete"
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <Sampling>
                               <Minimum><%= DiscSampling.Minimum %></Minimum>
                               <Maximum><%= DiscSampling.Maximum %></Maximum>
                               <Label><%= DiscSampling.Label %></Label>
                               <Units><%= DiscSampling.Units %></Units>
                               <Description><%= DiscSampling.Description %></Description>
                           </Sampling>
                Return XDoc
            Case Else
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <Sampling>
                           </Sampling>
                Return XDoc
        End Select

    End Function

    Public Function DistributionList() As System.Xml.Linq.XDocument
        'Generate an XDocument containing the settings for the secondary distributions.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <DistributionList>
                       <%= From item In Info
                           Select
                           item.ToXDoc.<Distribution>
                       %>
                   </DistributionList>

        '<%= From item In MultiDistrib
        Return XDoc
    End Function

    'Public Function SecondaryDistrib() As System.Xml.Linq.XDocument
    '    'Generate an XDocument containing the settings for the secondary distributions.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <SecondaryDistributions>
    '                   <%= From item In Info
    '                       Select
    '                       item.ToXDoc.<Distribution>
    '                   %>
    '               </SecondaryDistributions>

    '    '<%= From item In MultiDistrib
    '    Return XDoc
    'End Function

    'Public Function SecondaryDistributions() As System.Xml.Linq.XDocument
    '    'Generate an XDocument containing the settings for the secondary distributions.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <SecondaryDistributions>
    '                   <%= From item In  %>
    '               </SecondaryDistributions>
    'End Function

    Public Function ChartsToXDoc() As System.Xml.Linq.XDocument
        'Return the Chart information in an XDocument

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <ChartList>
                       <%= From item In ChartList
                           Select
                           <ChartInfo>
                               <ChartName><%= item.Key %></ChartName>
                               <%= item.Value.<ChartSettings> %>
                           </ChartInfo> %>
                   </ChartList>
        Return XDoc

    End Function

    Public Sub FromXDoc(ByRef XDoc As System.Xml.Linq.XDocument)

        'Read the Distribution settings from an XDocument.
        ModelName = XDoc.<DistributionModel>.<Name>.Value
        Label = XDoc.<DistributionModel>.<Label>.Value
        'Continuity = XDoc.<DistributionModel>.<Continuity>.Value
        Description = XDoc.<DistributionModel>.<Description>.Value
        Notes = System.Xml.XmlConvert.DecodeName(XDoc.<DistributionModel>.<Notes>.Value)

        If XDoc.<DistributionModel>.<ChartName>.Value = Nothing Then ChartName = "" Else ChartName = XDoc.<DistributionModel>.<ChartName>.Value

        Dim ContSamplingInfo As IEnumerable(Of XElement) = XDoc.<DistributionModel>.<ContinuousSampling>
        ContSampling.FromXDoc(ContSamplingInfo)

        Dim DiscSamplingInfo As IEnumerable(Of XElement) = XDoc.<DistributionModel>.<DiscreteSampling>
        DiscSampling.FromXDoc(DiscSamplingInfo)

        'Dim DistribInfo As IEnumerable(Of XElement) = XDoc.<DistributionModel>.<Distribution>
        'Distrib.FromXDoc(DistribInfo)

        ''Restore the Secondary Distributions
        'Restore the Distribution List
        Dim Distribs = From item In XDoc.<DistributionModel>.<DistributionList>.<Distribution>
        'MultiDistrib.Clear()
        Info.Clear()

        If Distribs.Count = 0 Then
            'RaiseEvent Message("No secondary distributions have been saved in the Distribution Model file." & vbCrLf)
            RaiseEvent Message("No distributions have been saved in the Distribution Model file." & vbCrLf)
        Else
            For Each item In Distribs
                Dim NewDistrib As New DistributionInfo
                Dim NewDistribInfo As IEnumerable(Of XElement)
                NewDistribInfo = item.DescendantsAndSelf
                NewDistrib.FromXDoc(NewDistribInfo)
                Info.Add(NewDistrib)
            Next
        End If

        'Restore the X Value Information:
        XValueInfo.Name = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Name>.Value
        XValueInfo.Generate = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Generate>.Value
        XValueInfo.NumType = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<NumType>.Value
        XValueInfo.Format = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Format>.Value
        XValueInfo.Alignment = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Alignment>.Value
        XValueInfo.ValueLabel = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<ValueLabel>.Value
        XValueInfo.Units = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Units>.Value
        XValueInfo.Description = XDoc.<DistributionModel>.<XValueInfo>.<Settings>.<Description>.Value

        'Restore the X Probability Information:
        XProbInfo.Name = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Name>.Value
        XProbInfo.Generate = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Generate>.Value
        XProbInfo.NumType = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<NumType>.Value
        XProbInfo.Format = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Format>.Value
        XProbInfo.Alignment = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Alignment>.Value
        XProbInfo.ValueLabel = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<ValueLabel>.Value
        XProbInfo.Units = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Units>.Value
        XProbInfo.Description = XDoc.<DistributionModel>.<XProbInfo>.<Settings>.<Description>.Value

        'Restore the Charts:
        Dim Charts = From item In XDoc.<DistributionModel>.<ChartList>.<ChartInfo>
        ChartList.Clear()
        If Charts.Count = 0 Then
            RaiseEvent Message("No charts have been saved in the Distribution Model file." & vbCrLf)
        Else
            Dim NextChartName As String = ""
            'ChartList.Clear()

            For Each item In Charts
                NextChartName = item.<ChartName>.Value
                Dim XChart = <?xml version="1.0" encoding="utf-8"?>
                             <%= item.<ChartSettings> %>

                ChartList.Add(NextChartName, XChart)
            Next
        End If

        UpdateDistribCounts()

    End Sub 'FromXDoc

    'Public Sub FromXDoc_Old(ByRef XDoc As System.Xml.Linq.XDocument)
    '    'Read the Distribution settings from an XDocument.

    '    ModelName = XDoc.<DistributionModel>.<Name>.Value
    '    Label = XDoc.<DistributionModel>.<Label>.Value
    '    Description = XDoc.<DistributionModel>.<Description>.Value
    '    Notes = System.Xml.XmlConvert.DecodeName(XDoc.<DistributionModel>.<Notes>.Value)

    '    If XDoc.<DistributionModel>.<ChartName>.Value = Nothing Then ChartName = "" Else ChartName = XDoc.<DistributionModel>.<ChartName>.Value

    '    Distrib.Name = XDoc.<DistributionModel>.<Distribution>.<Name>.Value
    '    Distrib.Continuity = XDoc.<DistributionModel>.<Distribution>.<Continuity>.Value
    '    Distrib.NParams = XDoc.<DistributionModel>.<Distribution>.<NParams>.Value

    '    'Read the Parameter Values
    '    Select Case Distrib.NParams
    '        Case 1
    '            Distrib.ParamA.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamA>.Value
    '        Case 2
    '            Distrib.ParamA.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamA>.Value
    '            Distrib.ParamB.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamB>.Value
    '        Case 3
    '            Distrib.ParamA.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamA>.Value
    '            Distrib.ParamB.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamB>.Value
    '            Distrib.ParamC.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamC>.Value
    '        Case 4
    '            Distrib.ParamA.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamA>.Value
    '            Distrib.ParamB.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamB>.Value
    '            Distrib.ParamC.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamC>.Value
    '            Distrib.ParamD.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamD>.Value
    '        Case 5
    '            Distrib.ParamA.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamA>.Value
    '            Distrib.ParamB.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamB>.Value
    '            Distrib.ParamC.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamC>.Value
    '            Distrib.ParamD.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamD>.Value
    '            Distrib.ParamE.Value = XDoc.<DistributionModel>.<Distribution>.<ParameterValues>.<ParamE>.Value
    '        Case Else
    '            'Not a valid number of parameters.
    '    End Select

    '    'Read the Parameter Information
    '    If Distrib.NParams > 0 Then
    '        Distrib.ParamA.Name = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Name>.Value
    '        If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Symbol>.Value <> Nothing Then Distrib.ParamA.Symbol = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Symbol>.Value Else Distrib.ParamA.Symbol = ""
    '        Distrib.ParamA.Type = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Type>.Value
    '        Distrib.ParamA.NumberType = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<NumberType>.Value
    '        Distrib.ParamA.Minimum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Minimum>.Value
    '        Distrib.ParamA.Maximum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Maximum>.Value
    '        If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Increment>.Value <> Nothing Then Distrib.ParamA.Increment = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Increment>.Value Else Distrib.ParamA.Increment = 0
    '        Distrib.ParamA.Description = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamA>.<Description>.Value
    '        If Distrib.NParams > 1 Then
    '            Distrib.ParamB.Name = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Symbol>.Value <> Nothing Then Distrib.ParamB.Symbol = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Symbol>.Value Else Distrib.ParamB.Symbol = ""
    '            Distrib.ParamB.Type = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Type>.Value
    '            Distrib.ParamB.NumberType = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<NumberType>.Value
    '            Distrib.ParamB.Minimum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Minimum>.Value
    '            Distrib.ParamB.Maximum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Maximum>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Increment>.Value <> Nothing Then Distrib.ParamB.Increment = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Increment>.Value Else Distrib.ParamB.Increment = 0
    '            Distrib.ParamB.Description = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamB>.<Description>.Value
    '            If Distrib.NParams > 2 Then
    '                Distrib.ParamC.Name = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Name>.Value
    '                If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Symbol>.Value <> Nothing Then Distrib.ParamC.Symbol = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Symbol>.Value Else Distrib.ParamC.Symbol = ""
    '                Distrib.ParamC.Type = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Type>.Value
    '                Distrib.ParamC.NumberType = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<NumberType>.Value
    '                Distrib.ParamC.Minimum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Minimum>.Value
    '                Distrib.ParamC.Maximum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Maximum>.Value
    '                If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Increment>.Value <> Nothing Then Distrib.ParamC.Increment = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Increment>.Value Else Distrib.ParamC.Increment = 0
    '                Distrib.ParamC.Description = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamC>.<Description>.Value
    '                If Distrib.NParams > 3 Then
    '                    Distrib.ParamD.Name = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Name>.Value
    '                    If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Symbol>.Value <> Nothing Then Distrib.ParamD.Symbol = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Symbol>.Value Else Distrib.ParamD.Symbol = ""
    '                    Distrib.ParamD.Type = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Type>.Value
    '                    Distrib.ParamD.NumberType = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<NumberType>.Value
    '                    Distrib.ParamD.Minimum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Minimum>.Value
    '                    Distrib.ParamD.Maximum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Maximum>.Value
    '                    If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Increment>.Value <> Nothing Then Distrib.ParamD.Increment = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Increment>.Value Else Distrib.ParamD.Increment = 0
    '                    Distrib.ParamD.Description = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamD>.<Description>.Value
    '                    If Distrib.NParams > 4 Then
    '                        Distrib.ParamE.Name = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Name>.Value
    '                        If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Symbol>.Value <> Nothing Then Distrib.ParamE.Symbol = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Symbol>.Value Else Distrib.ParamE.Symbol = ""
    '                        Distrib.ParamE.Type = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Type>.Value
    '                        Distrib.ParamE.NumberType = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<NumberType>.Value
    '                        Distrib.ParamE.Minimum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Minimum>.Value
    '                        Distrib.ParamE.Maximum = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Maximum>.Value
    '                        If XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Increment>.Value <> Nothing Then Distrib.ParamE.Increment = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Increment>.Value Else Distrib.ParamE.Increment = 0
    '                        Distrib.ParamE.Description = XDoc.<DistributionModel>.<Distribution>.<ParameterInfo>.<ParamE>.<Description>.Value
    '                        If Distrib.NParams > 5 Then
    '                            'Not a valid number of parameters.
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        End If
    '    End If

    '    'Read the Field Info:
    '    Select Case Distrib.Continuity
    '        Case "Continuous"
    '            Distrib.ValueInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Legend>.Value <> Nothing Then Distrib.ValueInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Legend>.Value Else Distrib.ValueInfo.Legend = ""
    '            Distrib.ValueInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Valid>.Value
    '            Distrib.ValueInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Generate>.Value
    '            'ValueInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<ColNumber>.Value
    '            Distrib.ValueInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<NumType>.Value
    '            Distrib.ValueInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Format>.Value
    '            Distrib.ValueInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Alignment>.Value
    '            Distrib.ValueInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<ValueLabel>.Value
    '            Distrib.ValueInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Units>.Value
    '            Distrib.ValueInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<LabelPrefix>.Value
    '            Distrib.ValueInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<SeriesLabel>.Value
    '            Distrib.ValueInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Description>.Value

    '            Distrib.PdfInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Legend>.Value <> Nothing Then Distrib.PdfInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Legend>.Value Else Distrib.PdfInfo.Legend = ""
    '            Distrib.PdfInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Valid>.Value
    '            Distrib.PdfInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Generate>.Value
    '            'PdfInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<ColNumber>.Value
    '            Distrib.PdfInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<NumType>.Value
    '            Distrib.PdfInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Format>.Value
    '            Distrib.PdfInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Alignment>.Value
    '            Distrib.PdfInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<ValueLabel>.Value
    '            Distrib.PdfInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Units>.Value
    '            Distrib.PdfInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<LabelPrefix>.Value
    '            Distrib.PdfInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<SeriesLabel>.Value
    '            Distrib.PdfInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDF>.<Description>.Value

    '            Distrib.PdfLnInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Legend>.Value <> Nothing Then Distrib.PdfLnInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Legend>.Value Else Distrib.PdfLnInfo.Legend = ""
    '            Distrib.PdfLnInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Valid>.Value
    '            Distrib.PdfLnInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Generate>.Value
    '            'PdfLnInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<ColNumber>.Value
    '            Distrib.PdfLnInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<NumType>.Value
    '            Distrib.PdfLnInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Format>.Value
    '            Distrib.PdfLnInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Alignment>.Value
    '            Distrib.PdfLnInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<ValueLabel>.Value
    '            Distrib.PdfLnInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Units>.Value
    '            Distrib.PdfLnInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<LabelPrefix>.Value
    '            Distrib.PdfLnInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<SeriesLabel>.Value
    '            Distrib.PdfLnInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PDFLn>.<Description>.Value

    '            Distrib.CdfInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Legend>.Value <> Nothing Then Distrib.CdfInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Legend>.Value Else Distrib.CdfInfo.Legend = ""
    '            Distrib.CdfInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Valid>.Value
    '            Distrib.CdfInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Generate>.Value
    '            'CdfInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<ColNumber>.Value
    '            Distrib.CdfInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<NumType>.Value
    '            Distrib.CdfInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Format>.Value
    '            Distrib.CdfInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Alignment>.Value
    '            Distrib.CdfInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<ValueLabel>.Value
    '            Distrib.CdfInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Units>.Value
    '            Distrib.CdfInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<LabelPrefix>.Value
    '            Distrib.CdfInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<SeriesLabel>.Value
    '            Distrib.CdfInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Description>.Value

    '            Distrib.ProbabilityInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Legend>.Value <> Nothing Then Distrib.ProbabilityInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Legend>.Value Else Distrib.ProbabilityInfo.Legend = ""
    '            Distrib.ProbabilityInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Valid>.Value
    '            Distrib.ProbabilityInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Generate>.Value
    '            'ProbabilityInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<ColNumber>.Value
    '            Distrib.ProbabilityInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<NumType>.Value
    '            Distrib.ProbabilityInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Format>.Value
    '            Distrib.ProbabilityInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Alignment>.Value
    '            Distrib.ProbabilityInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<ValueLabel>.Value
    '            Distrib.ProbabilityInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Units>.Value
    '            Distrib.ProbabilityInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<LabelPrefix>.Value
    '            Distrib.ProbabilityInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<SeriesLabel>.Value
    '            Distrib.ProbabilityInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Probability>.<Description>.Value

    '            Distrib.InvCdfInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Legend>.Value <> Nothing Then Distrib.InvCdfInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Legend>.Value Else Distrib.InvCdfInfo.Legend = ""
    '            Distrib.InvCdfInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Valid>.Value
    '            Distrib.InvCdfInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Generate>.Value
    '            'InvCdfInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<ColNumber>.Value
    '            Distrib.InvCdfInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<NumType>.Value
    '            Distrib.InvCdfInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Format>.Value
    '            Distrib.InvCdfInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Alignment>.Value
    '            Distrib.InvCdfInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<ValueLabel>.Value
    '            Distrib.InvCdfInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Units>.Value
    '            Distrib.InvCdfInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<LabelPrefix>.Value
    '            Distrib.InvCdfInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<SeriesLabel>.Value
    '            Distrib.InvCdfInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<InvCDF>.<Description>.Value

    '        Case "Discrete"
    '            Distrib.ValueInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Legend>.Value <> Nothing Then Distrib.ValueInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Legend>.Value Else Distrib.ValueInfo.Legend = ""
    '            Distrib.ValueInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Valid>.Value
    '            Distrib.ValueInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Generate>.Value
    '            'ValueInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<ColNumber>.Value
    '            Distrib.ValueInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<NumType>.Value
    '            Distrib.ValueInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Format>.Value
    '            Distrib.ValueInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Alignment>.Value
    '            Distrib.ValueInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<ValueLabel>.Value
    '            Distrib.ValueInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Units>.Value
    '            Distrib.ValueInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<LabelPrefix>.Value
    '            Distrib.ValueInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<SeriesLabel>.Value
    '            Distrib.ValueInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<Value>.<Description>.Value

    '            Distrib.PmfInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Legend>.Value <> Nothing Then Distrib.PmfInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Legend>.Value Else Distrib.PmfInfo.Legend = ""
    '            Distrib.PmfInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Valid>.Value
    '            Distrib.PmfInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Generate>.Value
    '            'PmfInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<ColNumber>.Value
    '            Distrib.PmfInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<NumType>.Value
    '            Distrib.PmfInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Format>.Value
    '            Distrib.PmfInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Alignment>.Value
    '            Distrib.PmfInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<ValueLabel>.Value
    '            Distrib.PmfInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Units>.Value
    '            Distrib.PmfInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<LabelPrefix>.Value
    '            Distrib.PmfInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<SeriesLabel>.Value
    '            Distrib.PmfInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMF>.<Description>.Value

    '            Distrib.PmfLnInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Legend>.Value <> Nothing Then Distrib.PmfLnInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Legend>.Value Else Distrib.PmfLnInfo.Legend = ""
    '            Distrib.PmfLnInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Valid>.Value
    '            Distrib.PmfLnInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Generate>.Value
    '            'PmfLnInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<ColNumber>.Value
    '            Distrib.PmfLnInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<NumType>.Value
    '            Distrib.PmfLnInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Format>.Value
    '            Distrib.PmfLnInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Alignment>.Value
    '            Distrib.PmfLnInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<ValueLabel>.Value
    '            Distrib.PmfLnInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Units>.Value
    '            Distrib.PmfLnInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<LabelPrefix>.Value
    '            Distrib.PmfLnInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<SeriesLabel>.Value
    '            Distrib.PmfLnInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<PMFLn>.<Description>.Value

    '            Distrib.CdfInfo.Name = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Name>.Value
    '            If XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Legend>.Value <> Nothing Then Distrib.CdfInfo.Legend = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Legend>.Value Else Distrib.CdfInfo.Legend = ""
    '            Distrib.CdfInfo.Valid = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Valid>.Value
    '            Distrib.CdfInfo.Generate = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Generate>.Value
    '            'CdfInfo.ColNumber = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<ColNumber>.Value
    '            Distrib.CdfInfo.NumType = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<NumType>.Value
    '            Distrib.CdfInfo.Format = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Format>.Value
    '            Distrib.CdfInfo.Alignment = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Alignment>.Value
    '            Distrib.CdfInfo.ValueLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<ValueLabel>.Value
    '            Distrib.CdfInfo.Units = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Units>.Value
    '            Distrib.CdfInfo.LabelPrefix = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<LabelPrefix>.Value
    '            Distrib.CdfInfo.SeriesLabel = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<SeriesLabel>.Value
    '            Distrib.CdfInfo.Description = XDoc.<DistributionModel>.<Distribution>.<FieldInfo>.<CDF>.<Description>.Value

    '        Case Else
    '            'Unknown Continuity
    '    End Select

    '    'Read the Random Variable Value sampling:
    '    Select Case Distrib.Continuity
    '        Case "Continuous"
    '            ContSampling.Minimum = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Minimum>.Value
    '            ContSampling.MinLock = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<MinLock>.Value
    '            ContSampling.Maximum = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Maximum>.Value
    '            ContSampling.MaxLock = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<MaxLock>.Value
    '            ContSampling.Interval = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Interval>.Value
    '            ContSampling.IntervalLock = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<IntervalLock>.Value
    '            ContSampling.NSamples = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<NSamples>.Value
    '            ContSampling.NSamplesLock = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<NSamplesLock>.Value
    '            ContSampling.Label = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Label>.Value
    '            ContSampling.Units = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Units>.Value
    '            ContSampling.Description = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Description>.Value

    '        Case "Discrete"
    '            DiscSampling.Minimum = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Minimum>.Value
    '            DiscSampling.Maximum = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Maximum>.Value
    '            DiscSampling.Label = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Label>.Value
    '            DiscSampling.Units = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Units>.Value
    '            DiscSampling.Description = XDoc.<DistributionModel>.<Distribution>.<Sampling>.<Description>.Value

    '        Case Else
    '            'Unknown Continuity
    '    End Select

    '    'Restore the Charts:
    '    'Dim Charts = From item In XDoc.<DataTable>.<ChartList>.<ChartInfo>
    '    Dim Charts = From item In XDoc.<DistributionModel>.<Distribution>.<ChartList>.<ChartInfo>
    '    If Charts.Count = 0 Then
    '        RaiseEvent Message("No charts have been saved in the Distribution file." & vbCrLf)
    '    Else
    '        Dim NextChartName As String = ""
    '        ChartList.Clear()

    '        For Each item In Charts
    '            NextChartName = item.<ChartName>.Value
    '            Dim XChart = <?xml version="1.0" encoding="utf-8"?>
    '                         <%= item.<ChartSettings> %>

    '            ChartList.Add(NextChartName, XChart)
    '        Next
    '    End If

    'End Sub 'FromXDoc

    Public Sub CheckSampling()
        'Check the Random Variable Value sampling.
        'Fix any inconsistencies.
        ContSampling.RecalcSamplingSettings("Interval")

        ''If Distrib.Continuity = "Continuous" Then
        'If Continuity = "Continuous" Then
        '    ContSampling.RecalcSamplingSettings("Interval")
        '    'ElseIf Distrib.Continuity = "Discrete" Then
        'ElseIf Continuity = "Discrete" Then
        '    'No check required - The sampling consists on of Minimum and Maximum.
        'Else
        '    'RaiseEvent ErrorMessage("Unknow continuity value: " & Distrib.Continuity & vbCrLf)
        '    RaiseEvent ErrorMessage("Unknow continuity value: " & Continuity & vbCrLf)
        'End If
    End Sub

    Public Function DistributionValue(DistribName As String, Params() As Double, FunctionType As String, XValue As Double) As Double
        'Calculate the distribution value.

        If FunctionType = "InvCDF" Then
            'XValue should lie between 0 and 1 inclusive.
            If XValue < 0 Then
                RaiseEvent ErrorMessage("The probability value is less than 0. It should lie between 0 and 1." & vbCrLf)
            ElseIf XValue > 1 Then
                RaiseEvent ErrorMessage("The probability value is greater than 1. It should lie between 0 and 1." & vbCrLf)
            Else
                If ValidParams(DistribName, Params) Then
                    Return InvCdfValue(DistribName, Params, XValue)
                Else
                    RaiseEvent ErrorMessage("The parameters provided for the distribution are not valid." & vbCrLf)
                End If
            End If

        ElseIf FunctionType = "InvRevCDF" Then
            'XValue should lie between 0 and 1 inclusive.
            If XValue < 0 Then
                RaiseEvent ErrorMessage("The probability value is less than 0. It should lie between 0 and 1." & vbCrLf)
            ElseIf XValue > 1 Then
                RaiseEvent ErrorMessage("The probability value is greater than 1. It should lie between 0 and 1." & vbCrLf)
            Else
                If ValidParams(DistribName, Params) Then
                    Return InvRevCdfValue(DistribName, Params, XValue)
                Else
                    RaiseEvent ErrorMessage("The parameters provided for the distribution are not valid." & vbCrLf)
                End If
            End If
        Else
            Dim Range As New DistribRange
            Range = GetRange(DistribName, Params)

            If Range.MinInclusive Then
                'If XValue <= Range.MinInclusive Then
                If XValue <= Range.Minimum Then
                    RaiseEvent ErrorMessage("The X value is below the valid range." & vbCrLf)
                    Return Double.NaN
                    Exit Function
                End If
            Else
                'If XValue < Range.MinInclusive Then
                If XValue < Range.Minimum Then
                    RaiseEvent ErrorMessage("The X value is below the valid range." & vbCrLf)
                    Return Double.NaN
                    Exit Function
                End If
            End If

            If Range.MaxInclusive Then
                'If XValue >= Range.MaxInclusive Then
                If XValue >= Range.Maximum Then
                    RaiseEvent ErrorMessage("The X value is above the valid range." & vbCrLf)
                    Return Double.NaN
                    Exit Function
                End If
            Else
                'If XValue > Range.MaxInclusive Then
                If XValue > Range.Maximum Then
                    RaiseEvent ErrorMessage("The X value is above the valid range." & vbCrLf)
                    Return Double.NaN
                    Exit Function
                End If
            End If

            If ValidParams(DistribName, Params) Then
                Select Case FunctionType
                    Case "PDF"
                        Return PdfValue(DistribName, Params, XValue)
                    Case "PDFLn"
                        Return PdfLnValue(DistribName, Params, XValue)
                    Case "PMF"
                        Return PmfValue(DistribName, Params, XValue)
                    Case "PMFLn"
                        Return PmfLnValue(DistribName, Params, XValue)
                    Case "CDF"
                        Return CdfValue(DistribName, Params, XValue)
                    Case "RevCDF"
                        Return RevCdfValue(DistribName, Params, XValue)
                        'Case "InvCDF" 'THIS IS HANDLED EARLIER WITH X VALUE VALIDITY CHECKS
                        '    Return InvCdfValue(DistribName, Params, XValue)
                    Case Else
                        RaiseEvent ErrorMessage("Unknown function type: " & FunctionType & vbCrLf)
                End Select
            Else
                RaiseEvent ErrorMessage("The parameters provided for the distribution are not valid." & vbCrLf)
            End If
        End If

    End Function

    Public Function PdfValue(DistribNo As Integer, XValue As Double) As Double
        'Return the PDF value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        'Dim NParams As Integer = Info(DistribNo).NParams
        'Dim Params(0 To NParams) As Double

        'Params(0) = Info(DistribNo).ParamA.Value
        'If NParams > 1 Then
        '    Params(1) = Info(DistribNo).ParamB.Value
        '    If NParams > 2 Then
        '        Params(2) = Info(DistribNo).ParamC.Value
        '        If NParams > 3 Then
        '            Params(3) = Info(DistribNo).ParamD.Value
        '            If NParams > 4 Then
        '                Params(4) = Info(DistribNo).ParamE.Value
        '            End If
        '        End If
        '    End If
        'End If

        Dim Params() As Double = Info(DistribNo).Params

        Return PdfValue(DistribName, Params, XValue)

    End Function

    Private Function PdfValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the PDF value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Beta"
                Return MathNet.Numerics.Distributions.Beta.PDF(Params(0), Params(1), XValue)

            Case "Beta Scaled"
                Return MathNet.Numerics.Distributions.BetaScaled.PDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Binomial"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Burr"
                Return MathNet.Numerics.Distributions.Burr.PDF(Params(0), Params(1), Params(2), XValue)

            Case "Categorical"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Cauchy"
                Return MathNet.Numerics.Distributions.Cauchy.PDF(Params(0), Params(1), XValue)

            Case "Chi"
                Return MathNet.Numerics.Distributions.Chi.PDF(Params(0), XValue)

            Case "Chi Squared"
                Return MathNet.Numerics.Distributions.ChiSquared.PDF(Params(0), XValue)

            Case "Continuous Uniform"
                Return MathNet.Numerics.Distributions.ContinuousUniform.PDF(Params(0), Params(1), XValue)

            Case "Conway-Maxwell-Poisson"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Discrete Uniform"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Erlang"
                Return MathNet.Numerics.Distributions.Erlang.PDF(Params(0), Params(1), XValue)

            Case "Exponential"
                Return MathNet.Numerics.Distributions.Exponential.PDF(Params(0), XValue)

            Case "Fisher-Snedecor"
                Return MathNet.Numerics.Distributions.FisherSnedecor.PDF(Params(0), Params(1), XValue)

            Case "Gamma"
                Return MathNet.Numerics.Distributions.Gamma.PDF(Params(0), Params(1), XValue)

            Case "Geometric"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Hypergeometric"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Inverse Gamma"
                Return MathNet.Numerics.Distributions.InverseGamma.PDF(Params(0), Params(1), XValue)

            Case "Inverse Gaussian"
                Return MathNet.Numerics.Distributions.InverseGaussian.PDF(Params(0), Params(1), XValue)

            Case "Laplace"
                Return MathNet.Numerics.Distributions.Laplace.PDF(Params(0), Params(1), XValue)

            Case "Log Normal"
                Return MathNet.Numerics.Distributions.LogNormal.PDF(Params(0), Params(1), XValue)

            Case "Negative Binomial"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Normal"
                Return MathNet.Numerics.Distributions.Normal.PDF(Params(0), Params(1), XValue)

            Case "Pareto"
                Return MathNet.Numerics.Distributions.Pareto.PDF(Params(0), Params(1), XValue)

            Case "Poisson"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Rayleigh"
                Return MathNet.Numerics.Distributions.Rayleigh.PDF(Params(0), XValue)

            Case "Skewed Generalized Error"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Skewed Generalized T"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(Params(0), Params(1), Params(2), Params(3), Params(4), XValue)

            Case "Stable"
                Return MathNet.Numerics.Distributions.Stable.PDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Student's T"
                Return MathNet.Numerics.Distributions.StudentT.PDF(Params(0), Params(1), Params(2), XValue)

            Case "Triangular"
                Return MathNet.Numerics.Distributions.Triangular.PDF(Params(0), Params(1), Params(2), XValue)

            Case "Truncated Pareto"
                Return MathNet.Numerics.Distributions.TruncatedPareto.PDF(Params(0), Params(1), Params(2), XValue)

            Case "Weibull"
                Return MathNet.Numerics.Distributions.Weibull.PDF(Params(0), Params(1), XValue)

            Case "Zipf"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function


    Public Function PdfLnValue(DistribNo As Integer, XValue As Double) As Double
        'Return the PDF Ln value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return PdfLnValue(DistribName, Params, XValue)

    End Function
    Private Function PdfLnValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the PDF Ln value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Beta"
                Return MathNet.Numerics.Distributions.Beta.PDFLn(Params(0), Params(1), XValue)

            Case "Beta Scaled"
                Return MathNet.Numerics.Distributions.BetaScaled.PDFLn(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Binomial"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Burr"
                Return MathNet.Numerics.Distributions.Burr.PDFLn(Params(0), Params(1), Params(2), XValue)

            Case "Categorical"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Cauchy"
                Return MathNet.Numerics.Distributions.Cauchy.PDFLn(Params(0), Params(1), XValue)

            Case "Chi"
                Return MathNet.Numerics.Distributions.Chi.PDFLn(Params(0), XValue)

            Case "Chi Squared"
                Return MathNet.Numerics.Distributions.ChiSquared.PDFLn(Params(0), XValue)

            Case "Continuous Uniform"
                Return MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(Params(0), Params(1), XValue)

            Case "Conway-Maxwell-Poisson"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Discrete Uniform"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Erlang"
                Return MathNet.Numerics.Distributions.Erlang.PDFLn(Params(0), Params(1), XValue)

            Case "Exponential"
                Return MathNet.Numerics.Distributions.Exponential.PDFLn(Params(0), XValue)

            Case "Fisher-Snedecor"
                Return MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(Params(0), Params(1), XValue)

            Case "Gamma"
                Return MathNet.Numerics.Distributions.Gamma.PDFLn(Params(0), Params(1), XValue)

            Case "Geometric"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Hypergeometric"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Inverse Gamma"
                Return MathNet.Numerics.Distributions.InverseGamma.PDFLn(Params(0), Params(1), XValue)

            Case "Inverse Gaussian"
                Return MathNet.Numerics.Distributions.InverseGaussian.PDFLn(Params(0), Params(1), XValue)

            Case "Laplace"
                Return MathNet.Numerics.Distributions.Laplace.PDFLn(Params(0), Params(1), XValue)

            Case "Log Normal"
                Return MathNet.Numerics.Distributions.LogNormal.PDFLn(Params(0), Params(1), XValue)

            Case "Negative Binomial"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Normal"
                Return MathNet.Numerics.Distributions.Normal.PDFLn(Params(0), Params(1), XValue)

            Case "Pareto"
                Return MathNet.Numerics.Distributions.Pareto.PDFLn(Params(0), Params(1), XValue)

            Case "Poisson"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case "Rayleigh"
                Return MathNet.Numerics.Distributions.Rayleigh.PDFLn(Params(0), XValue)

            Case "Skewed Generalized Error"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Skewed Generalized T"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(Params(0), Params(1), Params(2), Params(3), Params(4), XValue)

            Case "Stable"
                Return MathNet.Numerics.Distributions.Stable.PDFLn(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Student's T"
                Return MathNet.Numerics.Distributions.StudentT.PDFLn(Params(0), Params(1), Params(2), XValue)

            Case "Triangular"
                Return MathNet.Numerics.Distributions.Triangular.PDFLn(Params(0), Params(1), Params(2), XValue)

            Case "Truncated Pareto"
                Return MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(Params(0), Params(1), Params(2), XValue)

            Case "Weibull"
                Return MathNet.Numerics.Distributions.Weibull.PDFLn(Params(0), Params(1), XValue)

            Case "Zipf"
                'This is a discrete distribution. A PDF value cannot be calculated. Use the PMF function to calculate a PMF value.
                Return Double.NaN

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Public Function PmfValue(DistribNo As Integer, XValue As Double) As Double
        'Return the PMF value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return PmfValue(DistribName, Params, XValue)

    End Function
    Private Function PmfValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the PMF value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                Return MathNet.Numerics.Distributions.Bernoulli.PMF(Params(0), XValue)

            Case "Beta"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Beta Scaled"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Binomial"
                Return MathNet.Numerics.Distributions.Binomial.PMF(Params(0), Params(1), XValue)

            Case "Burr"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Categorical"
                Return MathNet.Numerics.Distributions.Categorical.PMF(Params, XValue)

            Case "Cauchy"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Chi"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Chi Squared"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Continuous Uniform"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Conway-Maxwell-Poisson"
                Return MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(Params(0), Params(1), XValue)

            Case "Discrete Uniform"
                Return MathNet.Numerics.Distributions.DiscreteUniform.PMF(Params(0), Params(1), XValue)

            Case "Erlang"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Exponential"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Fisher-Snedecor"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Gamma"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Geometric"
                Return MathNet.Numerics.Distributions.Geometric.PMF(Params(0), XValue)

            Case "Hypergeometric"
                Return MathNet.Numerics.Distributions.Hypergeometric.PMF(Params(0), Params(1), Params(2), XValue)

            Case "Inverse Gamma"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Inverse Gaussian"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Laplace"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Log Normal"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Negative Binomial"
                Return MathNet.Numerics.Distributions.NegativeBinomial.PMF(Params(0), Params(1), XValue)

            Case "Normal"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Pareto"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Poisson"
                Return MathNet.Numerics.Distributions.Poisson.PMF(Params(0), XValue)

            Case "Rayleigh"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Skewed Generalized Error"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Skewed Generalized T"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Stable"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Student's T"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Triangular"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Truncated Pareto"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Weibull"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Zipf"
                Return MathNet.Numerics.Distributions.Zipf.PMF(Params(0), Params(1), XValue)

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Public Function PmfLnValue(DistribNo As Integer, XValue As Double) As Double
        'Return the PMF Ln value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return PmfLnValue(DistribName, Params, XValue)

    End Function
    Private Function PmfLnValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the PMF LN value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                Return MathNet.Numerics.Distributions.Bernoulli.PMFLn(Params(0), XValue)

            Case "Beta"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Beta Scaled"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Binomial"
                Return MathNet.Numerics.Distributions.Binomial.PMFLn(Params(0), Params(1), XValue)

            Case "Burr"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Categorical"
                Return MathNet.Numerics.Distributions.Categorical.PMFLn(Params, XValue)

            Case "Cauchy"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Chi"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Chi Squared"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Continuous Uniform"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Conway-Maxwell-Poisson"
                Return MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(Params(0), Params(1), XValue)

            Case "Discrete Uniform"
                Return MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(Params(0), Params(1), XValue)

            Case "Erlang"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Exponential"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Fisher-Snedecor"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Gamma"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Geometric"
                Return MathNet.Numerics.Distributions.Geometric.PMFLn(Params(0), XValue)

            Case "Hypergeometric"
                Return MathNet.Numerics.Distributions.Hypergeometric.PMFLn(Params(0), Params(1), Params(2), XValue)

            Case "Inverse Gamma"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Inverse Gaussian"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Laplace"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Log Normal"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Negative Binomial"
                Return MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(Params(0), Params(1), XValue)

            Case "Normal"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Pareto"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Poisson"
                Return MathNet.Numerics.Distributions.Poisson.PMFLn(Params(0), XValue)

            Case "Rayleigh"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Skewed Generalized Error"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Skewed Generalized T"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Stable"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Student's T"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Triangular"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Truncated Pareto"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Weibull"
                'This is a continuous distribution. A PMF value cannot be calculated. Use the PDF function to calculate a PDF value.
                Return Double.NaN

            Case "Zipf"
                Return MathNet.Numerics.Distributions.Zipf.PMFLn(Params(0), Params(1), XValue)

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Public Function CdfValue(DistribNo As Integer, XValue As Double) As Double
        'Return the CDF value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return CdfValue(DistribName, Params, XValue)

    End Function

    Public Function IntervalProb(DistribNo As Integer, FromXValue As Double, ToXValue As Double) As Double
        'Return the probability of the distribution between FromXValue and ToXValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return IntervalProb(DistribName, Params, FromXValue, ToXValue)

    End Function

    Private Function IntervalProb(DistribName As String, Params() As Double, FromXValue As Double, ToXValue As Double) As Double
        'Return the probability of the distribution between FromXValue and ToXValue.
        Return CdfValue(DistribName, Params, ToXValue) - CdfValue(DistribName, Params, FromXValue)
    End Function


    Private Function CdfValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the CDF value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Bernoulli.CDF(Params(0), XValue)

            Case "Beta"
                Return MathNet.Numerics.Distributions.Beta.CDF(Params(0), Params(1), XValue)

            Case "Beta Scaled"
                Return MathNet.Numerics.Distributions.BetaScaled.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Binomial"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Binomial.CDF(Params(0), Params(1), XValue)

            Case "Burr"
                Return MathNet.Numerics.Distributions.Burr.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Categorical"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Categorical.CDF(Params, XValue)

            Case "Cauchy"
                Return MathNet.Numerics.Distributions.Cauchy.CDF(Params(0), Params(1), XValue)

            Case "Chi"
                Return MathNet.Numerics.Distributions.Chi.CDF(Params(0), XValue)

            Case "Chi Squared"
                Return MathNet.Numerics.Distributions.ChiSquared.CDF(Params(0), XValue)

            Case "Continuous Uniform"
                Return MathNet.Numerics.Distributions.ContinuousUniform.CDF(Params(0), Params(1), XValue)

            Case "Conway-Maxwell-Poisson"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(Params(0), Params(1), XValue)

            Case "Discrete Uniform"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.DiscreteUniform.CDF(Params(0), Params(1), XValue)

            Case "Erlang"
                Return MathNet.Numerics.Distributions.Erlang.CDF(Params(0), Params(1), XValue)

            Case "Exponential"
                Return MathNet.Numerics.Distributions.Exponential.CDF(Params(0), XValue)

            Case "Fisher-Snedecor"
                Return MathNet.Numerics.Distributions.FisherSnedecor.CDF(Params(0), Params(1), XValue)

            Case "Gamma"
                Return MathNet.Numerics.Distributions.Gamma.CDF(Params(0), Params(1), XValue)

            Case "Geometric"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Geometric.CDF(Params(0), XValue)

            Case "Hypergeometric"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Hypergeometric.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Inverse Gamma"
                Return MathNet.Numerics.Distributions.InverseGamma.CDF(Params(0), Params(1), XValue)

            Case "Inverse Gaussian"
                Return MathNet.Numerics.Distributions.InverseGaussian.CDF(Params(0), Params(1), XValue)

            Case "Laplace"
                Return MathNet.Numerics.Distributions.Laplace.CDF(Params(0), Params(1), XValue)

            Case "Log Normal"
                Return MathNet.Numerics.Distributions.LogNormal.CDF(Params(0), Params(1), XValue)

            Case "Negative Binomial"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.NegativeBinomial.CDF(Params(0), Params(1), XValue)

            Case "Normal"
                Return MathNet.Numerics.Distributions.Normal.CDF(Params(0), Params(1), XValue)

            Case "Pareto"
                Return MathNet.Numerics.Distributions.Pareto.CDF(Params(0), Params(1), XValue)

            Case "Poisson"
                'This is a discrete distribution.
                Return MathNet.Numerics.Distributions.Poisson.CDF(Params(0), XValue)

            Case "Rayleigh"
                Return MathNet.Numerics.Distributions.Rayleigh.CDF(Params(0), XValue)

            Case "Skewed Generalized Error"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Skewed Generalized T"
                Return MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(Params(0), Params(1), Params(2), Params(3), Params(4), XValue)

            Case "Stable"
                Return MathNet.Numerics.Distributions.Stable.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Student's T"
                Return MathNet.Numerics.Distributions.StudentT.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Triangular"
                Return MathNet.Numerics.Distributions.Triangular.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Truncated Pareto"
                Return MathNet.Numerics.Distributions.TruncatedPareto.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Weibull"
                Return MathNet.Numerics.Distributions.Weibull.CDF(Params(0), Params(1), XValue)

            Case "Zipf"
                'This is a discrete distribution. 
                Return MathNet.Numerics.Distributions.Zipf.CDF(Params(0), Params(1), XValue)

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Public Function RevCdfValue(DistribNo As Integer, XValue As Double) As Double
        'Return the Reverse CDF value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return RevCdfValue(DistribName, Params, XValue)

    End Function
    Private Function RevCdfValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the Reverse CDF value at XValue.

        Select Case DistribName
            Case "Bernoulli"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Bernoulli.CDF(Params(0), XValue)

            Case "Beta"
                Return 1 - MathNet.Numerics.Distributions.Beta.CDF(Params(0), Params(1), XValue)

            Case "Beta Scaled"
                Return 1 - MathNet.Numerics.Distributions.BetaScaled.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Binomial"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Binomial.CDF(Params(0), Params(1), XValue)

            Case "Burr"
                Return 1 - MathNet.Numerics.Distributions.Burr.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Categorical"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Categorical.CDF(Params, XValue)

            Case "Cauchy"
                Return 1 - MathNet.Numerics.Distributions.Cauchy.CDF(Params(0), Params(1), XValue)

            Case "Chi"
                Return 1 - MathNet.Numerics.Distributions.Chi.CDF(Params(0), XValue)

            Case "Chi Squared"
                Return 1 - MathNet.Numerics.Distributions.ChiSquared.CDF(Params(0), XValue)

            Case "Continuous Uniform"
                Return 1 - MathNet.Numerics.Distributions.ContinuousUniform.CDF(Params(0), Params(1), XValue)

            Case "Conway-Maxwell-Poisson"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(Params(0), Params(1), XValue)

            Case "Discrete Uniform"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.DiscreteUniform.CDF(Params(0), Params(1), XValue)

            Case "Erlang"
                Return 1 - MathNet.Numerics.Distributions.Erlang.CDF(Params(0), Params(1), XValue)

            Case "Exponential"
                Return 1 - MathNet.Numerics.Distributions.Exponential.CDF(Params(0), XValue)

            Case "Fisher-Snedecor"
                Return 1 - MathNet.Numerics.Distributions.FisherSnedecor.CDF(Params(0), Params(1), XValue)

            Case "Gamma"
                Return 1 - MathNet.Numerics.Distributions.Gamma.CDF(Params(0), Params(1), XValue)

            Case "Geometric"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Geometric.CDF(Params(0), XValue)

            Case "Hypergeometric"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Hypergeometric.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Inverse Gamma"
                Return 1 - MathNet.Numerics.Distributions.InverseGamma.CDF(Params(0), Params(1), XValue)

            Case "Inverse Gaussian"
                Return 1 - MathNet.Numerics.Distributions.InverseGaussian.CDF(Params(0), Params(1), XValue)

            Case "Laplace"
                Return 1 - MathNet.Numerics.Distributions.Laplace.CDF(Params(0), Params(1), XValue)

            Case "Log Normal"
                Return 1 - MathNet.Numerics.Distributions.LogNormal.CDF(Params(0), Params(1), XValue)

            Case "Negative Binomial"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.NegativeBinomial.CDF(Params(0), Params(1), XValue)

            Case "Normal"
                Return 1 - MathNet.Numerics.Distributions.Normal.CDF(Params(0), Params(1), XValue)

            Case "Pareto"
                Return 1 - MathNet.Numerics.Distributions.Pareto.CDF(Params(0), Params(1), XValue)

            Case "Poisson"
                'This is a discrete distribution.
                Return 1 - MathNet.Numerics.Distributions.Poisson.CDF(Params(0), XValue)

            Case "Rayleigh"
                Return 1 - MathNet.Numerics.Distributions.Rayleigh.CDF(Params(0), XValue)

            Case "Skewed Generalized Error"
                Return 1 - MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Skewed Generalized T"
                Return 1 - MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(Params(0), Params(1), Params(2), Params(3), Params(4), XValue)

            Case "Stable"
                Return 1 - MathNet.Numerics.Distributions.Stable.CDF(Params(0), Params(1), Params(2), Params(3), XValue)

            Case "Student's T"
                Return 1 - MathNet.Numerics.Distributions.StudentT.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Triangular"
                Return 1 - MathNet.Numerics.Distributions.Triangular.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Truncated Pareto"
                Return 1 - MathNet.Numerics.Distributions.TruncatedPareto.CDF(Params(0), Params(1), Params(2), XValue)

            Case "Weibull"
                Return 1 - MathNet.Numerics.Distributions.Weibull.CDF(Params(0), Params(1), XValue)

            Case "Zipf"
                'This is a discrete distribution. 
                Return 1 - MathNet.Numerics.Distributions.Zipf.CDF(Params(0), Params(1), XValue)

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    'Public Function InvCdfValue(DistribNo As Integer, XValue As Double) As Double
    Public Function InvCdfValue(DistribNo As Integer, Probability As Double) As Double
        'Return the Inverse CDF value for DistributionNo at the Probability value.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        'Return InvCdfValue(DistribName, Params, XValue)
        Return InvCdfValue(DistribName, Params, Probability)

    End Function
    'Private Function InvCdfValue(DistribName As String, Params() As Double, XValue As Double) As Double
    Private Function InvCdfValue(DistribName As String, Params() As Double, Probability As Double) As Double
        'Calculate the Inverse CDF value at probability XValue.

        If Probability < 0 Then
            RaiseEvent ErrorMessage("Invalid probability value. The value should lie between 0 and 1. The value is: " & Probability & vbCrLf)
        ElseIf Probability > 1 Then
            RaiseEvent ErrorMessage("Invalid probability value. The value should lie between 0 and 1. The value is: " & Probability & vbCrLf)
        Else
            Select Case DistribName
                Case "Bernoulli"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Bernoulli.InvCDF(Params(0), XValue)
                    Return Double.NaN

                Case "Beta"
                    Return MathNet.Numerics.Distributions.Beta.InvCDF(Params(0), Params(1), Probability)

                Case "Beta Scaled"
                    Return MathNet.Numerics.Distributions.BetaScaled.InvCDF(Params(0), Params(1), Params(2), Params(3), Probability)

                Case "Binomial"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Binomial.InvCDF(Params(0), Params(1), XValue)
                    Return Double.NaN

                Case "Burr"
                    'Return MathNet.Numerics.Distributions.Burr.InvCDF(Params(0), Params(1), Params(2), XValue)
                    'Return Double.NaN
                    Return FindBurrInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Categorical"
                    'This is a discrete distribution. 
                    Return MathNet.Numerics.Distributions.Categorical.InvCDF(Params, Probability)

                Case "Cauchy"
                    Return MathNet.Numerics.Distributions.Cauchy.InvCDF(Params(0), Params(1), Probability)

                Case "Chi"
                    'Return MathNet.Numerics.Distributions.Chi.InvCDF(Params(0), XValue)
                    'Return Double.NaN
                    Return FindChiInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Chi Squared"
                    Return MathNet.Numerics.Distributions.ChiSquared.InvCDF(Params(0), Probability)

                Case "Continuous Uniform"
                    Return MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(Params(0), Params(1), Probability)

                Case "Conway-Maxwell-Poisson"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.ConwayMaxwellPoisson.InvCDF(Params(0), Params(1), XValue)
                    Return Double.NaN

                Case "Discrete Uniform"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.DiscreteUniform.InvCDF(Params(0), Params(1), XValue)
                    Return Double.NaN

                Case "Erlang"
                    'Return MathNet.Numerics.Distributions.Erlang.InvCDF(Params(0), Params(1), XValue)
                    'Return Double.NaN
                    Return FindErlangInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Exponential"
                    Return MathNet.Numerics.Distributions.Exponential.InvCDF(Params(0), Probability)

                Case "Fisher-Snedecor"
                    Return MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(Params(0), Params(1), Probability)

                Case "Gamma"
                    Return MathNet.Numerics.Distributions.Gamma.InvCDF(Params(0), Params(1), Probability)

                Case "Geometric"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Geometric.InvCDF(Params(0), XValue)
                    Return Double.NaN

                Case "Hypergeometric"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Hypergeometric.InvCDF(Params(0), Params(1), Params(2), XValue)
                    Return Double.NaN

                Case "Inverse Gamma"
                    'Return MathNet.Numerics.Distributions.InverseGamma.InvCDF(Params(0), Params(1), XValue)
                    'Return Double.NaN
                    Return FindInvGammaInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Inverse Gaussian"
                    Return MathNet.Numerics.Distributions.InverseGaussian.ICDF(Params(0), Params(1), Probability)

                Case "Laplace"
                    'Return MathNet.Numerics.Distributions.Laplace.InvCDF(Params(0), Params(1), XValue)
                    'Return Double.NaN
                    Return FindLaplaceInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Log Normal"
                    Return MathNet.Numerics.Distributions.LogNormal.InvCDF(Params(0), Params(1), Probability)

                Case "Negative Binomial"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.NegativeBinomial.InvCDF(Params(0), Params(1), XValue)
                    Return Double.NaN

                Case "Normal"
                    Return MathNet.Numerics.Distributions.Normal.InvCDF(Params(0), Params(1), Probability)

                Case "Pareto"
                    Return MathNet.Numerics.Distributions.Pareto.InvCDF(Params(0), Params(1), Probability)

                Case "Poisson"
                    'This is a discrete distribution.
                    'Return MathNet.Numerics.Distributions.Poisson.InvCDF(Params(0), XValue)
                    Return Double.NaN

                Case "Rayleigh"
                    Return MathNet.Numerics.Distributions.Rayleigh.InvCDF(Params(0), Probability)

                Case "Skewed Generalized Error"
                    Return MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(Params(0), Params(1), Params(2), Params(3), Probability)

                Case "Skewed Generalized T"
                    Return MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(Params(0), Params(1), Params(2), Params(3), Params(4), Probability)

                Case "Stable"
                    'Return MathNet.Numerics.Distributions.Stable.InvCDF(Params(0), Params(1), Params(2), Params(3), XValue)
                    'Return Double.NaN
                    Return FindStableInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Student's T"
                    Return MathNet.Numerics.Distributions.StudentT.InvCDF(Params(0), Params(1), Params(2), Probability)

                Case "Triangular"
                    Return MathNet.Numerics.Distributions.Triangular.InvCDF(Params(0), Params(1), Params(2), Probability)

                Case "Truncated Pareto"
                    Return MathNet.Numerics.Distributions.TruncatedPareto.ICDF(Params(0), Params(1), Params(2), Probability)

                Case "Weibull"
                    'Return MathNet.Numerics.Distributions.Weibull.InvCDF(Params(0), Params(1), XValue)
                    'Return Double.NaN
                    Return FindWeibullInvCDF(Probability, Params, ProbTolerance) 'Interpolate the approximate value of InvCdf using the Cdf function.

                Case "Zipf"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Zipf.InvCDF(Params(0), Params(1), XValue)
                    Return Double.NaN

                Case Else
                    RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
            End Select
        End If
    End Function




    Public Function InvRevCdfValue(DistribNo As Integer, XValue As Double) As Double
        'Return the Inverse Reverse CDF value for DistributionNo at XValue.

        Dim DistribName As String = Info(DistribNo).Name
        Dim Params() As Double = Info(DistribNo).Params

        Return InvRevCdfValue(DistribName, Params, XValue)

    End Function

    Private Function InvRevCdfValue(DistribName As String, Params() As Double, XValue As Double) As Double
        'Calculate the Inverse Reverse CDF value at probability XValue.

        If XValue < 0 Then
            RaiseEvent ErrorMessage("Invalid probability value. The value should lie between 0 and 1. The value is: " & XValue & vbCrLf)
        ElseIf XValue > 1 Then
            RaiseEvent ErrorMessage("Invalid probability value. The value should lie between 0 and 1. The value is: " & XValue & vbCrLf)
        Else
            Select Case DistribName
                Case "Bernoulli"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Bernoulli.InvCDF(Params(0), 1 - XValue)
                    Return Double.NaN

                Case "Beta"
                    Return MathNet.Numerics.Distributions.Beta.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Beta Scaled"
                    Return MathNet.Numerics.Distributions.BetaScaled.InvCDF(Params(0), Params(1), Params(2), Params(3), 1 - XValue)

                Case "Binomial"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Binomial.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Burr"
                    'Return MathNet.Numerics.Distributions.Burr.InvCDF(Params(0), Params(1), Params(2), 1 - XValue)
                    Return Double.NaN

                Case "Categorical"
                    'This is a discrete distribution. 
                    Return MathNet.Numerics.Distributions.Categorical.InvCDF(Params, 1 - XValue)

                Case "Cauchy"
                    Return MathNet.Numerics.Distributions.Cauchy.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Chi"
                    'Return MathNet.Numerics.Distributions.Chi.InvCDF(Params(0), XValue)
                    Return Double.NaN

                Case "Chi Squared"
                    Return MathNet.Numerics.Distributions.ChiSquared.InvCDF(Params(0), 1 - XValue)

                Case "Continuous Uniform"
                    Return MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Conway-Maxwell-Poisson"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.ConwayMaxwellPoisson.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Discrete Uniform"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.DiscreteUniform.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Erlang"
                    'Return MathNet.Numerics.Distributions.Erlang.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Exponential"
                    Return MathNet.Numerics.Distributions.Exponential.InvCDF(Params(0), 1 - XValue)

                Case "Fisher-Snedecor"
                    Return MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Gamma"
                    Return MathNet.Numerics.Distributions.Gamma.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Geometric"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Geometric.InvCDF(Params(0), 1 - XValue)
                    Return Double.NaN

                Case "Hypergeometric"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Hypergeometric.InvCDF(Params(0), Params(1), Params(2), 1 - XValue)
                    Return Double.NaN

                Case "Inverse Gamma"
                    'Return MathNet.Numerics.Distributions.InverseGamma.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Inverse Gaussian"
                    Return MathNet.Numerics.Distributions.InverseGaussian.ICDF(Params(0), Params(1), 1 - XValue)

                Case "Laplace"
                    'Return MathNet.Numerics.Distributions.Laplace.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Log Normal"
                    Return MathNet.Numerics.Distributions.LogNormal.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Negative Binomial"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.NegativeBinomial.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Normal"
                    Return MathNet.Numerics.Distributions.Normal.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Pareto"
                    Return MathNet.Numerics.Distributions.Pareto.InvCDF(Params(0), Params(1), 1 - XValue)

                Case "Poisson"
                    'This is a discrete distribution.
                    'Return MathNet.Numerics.Distributions.Poisson.InvCDF(Params(0), 1 - XValue)
                    Return Double.NaN

                Case "Rayleigh"
                    Return MathNet.Numerics.Distributions.Rayleigh.InvCDF(Params(0), 1 - XValue)

                Case "Skewed Generalized Error"
                    Return MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(Params(0), Params(1), Params(2), Params(3), 1 - XValue)

                Case "Skewed Generalized T"
                    Return MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(Params(0), Params(1), Params(2), Params(3), Params(4), 1 - XValue)

                Case "Stable"
                    'Return MathNet.Numerics.Distributions.Stable.InvCDF(Params(0), Params(1), Params(2), Params(3), 1 - XValue)
                    Return Double.NaN

                Case "Student's T"
                    Return MathNet.Numerics.Distributions.StudentT.InvCDF(Params(0), Params(1), Params(2), 1 - XValue)

                Case "Triangular"
                    Return MathNet.Numerics.Distributions.Triangular.InvCDF(Params(0), Params(1), Params(2), 1 - XValue)

                Case "Truncated Pareto"
                    Return MathNet.Numerics.Distributions.TruncatedPareto.ICDF(Params(0), Params(1), Params(2), 1 - XValue)

                Case "Weibull"
                    'Return MathNet.Numerics.Distributions.Weibull.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case "Zipf"
                    'This is a discrete distribution. 
                    'Return MathNet.Numerics.Distributions.Zipf.InvCDF(Params(0), Params(1), 1 - XValue)
                    Return Double.NaN

                Case Else
                    RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
            End Select
        End If
    End Function


    'NOTE: For Alpha = 1, c = 1 and k = 1, Mean = +inf and Std Dev = NaN
    '    The following method requires a valid Mean and Std Dev:
    '    Use alternative method!
    Private Function FindBurrInvCDF_Old(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Burr distribution Inverse CDF value at the specified probability.
        'The Burr distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Dim Distrib As New MathNet.Numerics.Distributions.Burr(Params(0), Params(1), Params(2))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim Std
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        'Dim Test As New MathNet.Numerics.Distributions.Burr(ParamA.Value, ParamB.Value)
        'Return Test.CumulativeDistribution(Test)
        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If

            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If

    End Function

    Private Function FindBurrInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Burr distribution Inverse CDF value at the specified probability.
        'The Burr distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The calculated Mean and StdDev are not be valid for this distribution.

        Dim Distrib As New MathNet.Numerics.Distributions.Burr(Params(0), Params(1), Params(2))

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = 1
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between 0 and 1
            XVal2 = XVal1
            Prob2 = Prob1
            XVal1 = 0
            Prob1 = 0

        Else 'InvCDF is > 1
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While

        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    Private Function FindChiInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Chi distribution Inverse CDF value at the specified probability.
        'The Chi distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The Mean and StdDev can be used to search for the InvCDF value.
        '   Search in these intervals: 0 to Mean, Mean to StdDev, > StdDev.

        Dim Distrib As New MathNet.Numerics.Distributions.Chi(Params(0))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    Private Function FindErlangInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Erlang distribution Inverse CDF value at the specified probability.
        'The Erlang distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Dim Distrib As New MathNet.Numerics.Distributions.Erlang(Params(0), Params(1))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    Private Function FindInvGammaInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Inverse Gamma distribution Inverse CDF value at the specified probability.
        'The Inverse Gamma distribution is defined over the X axis range: gt 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The calculated distribution Mean is not always defined.

        Dim Distrib As New MathNet.Numerics.Distributions.InverseGamma(Params(0), Params(1))

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = 1
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between gt 0 and 1
            XVal2 = XVal1
            Prob2 = Prob1
            XVal1 = 0.000000001
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            If InterpXVal <= 0 Then InterpXVal = 0.000000001
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > 1
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If
    End Function

    Private Function FindLaplaceInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Laplace distribution Inverse CDF value at the specified probability.
        'The Laplace distribution is defined over the X axis range: -inf to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Debug.Print("Running FindLaplaceInvCDF")

        Dim Distrib As New MathNet.Numerics.Distributions.Laplace(Params(0), Params(1))

        'XValue range: -inf to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between -Inf and MeanVal
            Debug.Print("Probability < MeanProb")
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
            If Probability > StdDevNeg1Prob Then 'InvCDF lies between StdDevNeg1Prob and MeanVal
                Debug.Print("InvCDF lies between StdDevNeg1Prob and MeanVal")
                XVal1 = StdDevNeg1Val
                Prob1 = StdDevNeg1Prob
                XVal2 = MeanVal
                Prob2 = MeanProb
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF <= StdDevNeg1Val
                'Find a value interval that spans Probability
                Debug.Print("InvCDF <= StdDevNeg1Val")
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevNeg1Val - Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal2 = StdDevNeg1Val
                Prob2 = StdDevNeg1Prob
                While BoundingValFound = False
                    If Probability > TryBoundingProb Then
                        BoundingValFound = True
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                    Else
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal -= Increment 'Try a lower bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While

                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)

            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > MeanProb
            Debug.Print("InvCDF > MeanProb")
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                Debug.Print("InvCDF lies between MeanVal and StdDevPos1Val")
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF > StdDevPos1Val
                Debug.Print("InvCDF > StdDevPos1Val")
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If

    End Function

    Private Function FindStableInvCDF_Old(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Stable distribution Inverse CDF value at the specified probability.
        'The Stable distribution is defined over the X axis range: -inf to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Debug.Print("Running FindLaplaceInvCDF")

        Dim Distrib As New MathNet.Numerics.Distributions.Stable(Params(0), Params(1), Params(2), Params(3))

        'XValue range: -inf to +inf.
        '    Min -inf or Mu if Alpha lt 1 and Beta eq 1
        '    Max +inf or Mu if Alpha lt 1 and Beta eq -1

        'The Mean and StdDev may not be defined.
        'Dim MeanVal As Double = Distrib.Mean
        'Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        'Dim StdDev As Double = Distrib.StdDev

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = Params(3) 'The Location parameter.
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between -Inf and Location parameter
            'Debug.Print("Probability <= LocationProb")
            XVal1 = Params(3) - 1
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            If Probability > Prob1 Then 'InvCDF lies between Location - 1 and Location
                'Debug.Print("InvCDF lies between Location - 1 and Location")
                XVal2 = Params(3)
                Prob2 = Distrib.CumulativeDistribution(XVal2)
                'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF <= Location - 1
                'Find a value interval that spans Probability
                'Debug.Print("InvCDF <= Location - 1")
                Dim Increment As Double = 2
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = XVal1 - Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal2 = XVal1
                Prob2 = Prob1
                While BoundingValFound = False
                    If Probability > TryBoundingProb Then
                        BoundingValFound = True
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                    Else
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal -= Increment 'Try a lower bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
                'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > Location parameter
            'Debug.Print("InvCDF > Location paraemter")
            XVal2 = Params(3) + 1
            Prob2 = Distrib.CumulativeDistribution(XVal2)
            If Probability <= Prob2 Then 'InvCDF lies between Location and Location + 1
                Debug.Print("InvCDF lies between Location and Location + 1")
                'XVal1 = MeanVal
                'Prob1 = MeanProb
                'XVal2 = StdDevPos1Val
                'Prob2 = StdDevPos1Prob
                'XVal1, Prob1, XVal2 & Prob2 are OK to use.
                'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF > Location + 1
                Debug.Print("InvCDF > Location + 1")
                'Find a value interval that spans Probability
                Dim Increment As Double = 2
                Dim BoundingValFound As Boolean = False
                XVal1 = XVal2
                Prob1 = Prob2
                Dim TryBoundingVal As Double = XVal2 + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
                'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If
    End Function

    'Refined code version:
    Private Function FindStableInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Stable distribution Inverse CDF value at the specified probability.
        'The Stable distribution is defined over the X axis range: -inf to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        'Debug.Print("Running FindLaplaceInvCDF")

        Dim Distrib As New MathNet.Numerics.Distributions.Stable(Params(0), Params(1), Params(2), Params(3))

        'XValue range: -inf to +inf.
        '    Min -inf or Mu if Alpha lt 1 and Beta eq 1
        '    Max +inf or Mu if Alpha lt 1 and Beta eq -1

        'The Mean and StdDev may not be defined - dont use these in the search.

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = Params(3) 'The Location parameter - start searching from here.
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between -Inf and Location parameter
            'Debug.Print("Probability <= LocationProb")
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 - Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            XVal2 = XVal1
            Prob2 = Prob1
            While BoundingValFound = False
                If Probability > TryBoundingProb Then
                    BoundingValFound = True
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                Else
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal -= Increment 'Try a lower bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
        Else 'InvCDF is > Location parameter
            'Debug.Print("InvCDF > Location parameter")
            'Find a value interval that spans Probability
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal
    End Function

    Private Function FindWeibullInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
        'Search for the Weibull distribution Inverse CDF value at the specified probability.
        'The Weibull distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Dim Distrib As New MathNet.Numerics.Distributions.Weibull(Params(0), Params(1))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    Private Function LinInterpX(X1 As Double, Y1 As Double, X2 As Double, Y2 As Double, Y As Double) As Double
        'Linear interpolation of X at given Y location given two points X1, Y1 and X2, Y2.
        Return X1 + (Y - Y1) * (X2 - X1) / (Y2 - Y1)
    End Function


    Private Function ValidParams(DistribName As String, Params() As Double) As Boolean
        'Return True if the set of parameter values are valid for the specified distribution.

        'Dim IsValid As Boolean = True

        Select Case DistribName
            Case "Bernoulli"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) < 0 Then
                        RaiseEvent ErrorMessage("The Bernoulli distribution P Success parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(0) > 1 Then
                        RaiseEvent ErrorMessage("The Bernoulli distribution P Success parameter value should be less than or equal to 1." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Bernoulli distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Bernoulli distribution. A single P Success parameter is required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Bernoulli distribution. A single P Success parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Beta"
                If Params.Length = 2 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Beta distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Beta distribution Beta parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Beta distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Beta distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Beta distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Beta distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Beta Scaled"
                If Params.Length = 4 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Beta Scaled distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Beta Scaled distribution Beta parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(3) <= 0 Then
                        RaiseEvent ErrorMessage("The Beta Scaled distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Beta Scaled distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Beta Scaled distribution. The Alpha, Beta, Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 4 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Beta Scaled distribution. The Alpha, Beta, Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Beta Scaled distribution. The Alpha, Beta, Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Binomial"
                If Params.Length = 2 Then 'Correct number of parameters
                    If Params(0) < 0 Then
                        RaiseEvent ErrorMessage("The Binomial distribution P Success parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(0) > 1 Then
                        RaiseEvent ErrorMessage("The Binomial distribution P Success parameter value should be less than or equal to 1." & vbCrLf)
                        Return False
                    ElseIf Params(1) < 0 Then
                        RaiseEvent ErrorMessage("The Binomial distribution N Trials parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Binomial distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Binomial distribution. The P Success and N Trials parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Binomial distribution. The P Success and N Trials parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Binomial distribution. The P Success and N Trials parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Burr"
                If Params.Length = 3 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Burr distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Burr distribution c parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= 0 Then
                        RaiseEvent ErrorMessage("The Burr distribution k parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Burr distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Burr distribution. The Alpha, c and k parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 3 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Burr distribution. The Alpha, c and k parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Burr distribution. The Alpha, c and k parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Categorical"
                If Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Categorical distribution." & vbCrLf)
                    Return False
                Else
                    'The Categorical distribution accepts a Probability Mass array.
                    Return True
                End If

            Case "Cauchy"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Cauchy distribution Gamma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Cauchy distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Cauchy distribution. The X0 and Gamma parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Cauchy distribution. The X0 and Gamma parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Cauchy distribution. The X0 and Gamma parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Chi"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Chi distribution k parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Chi distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Chi distribution. A single k parameter is required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Chi distribution. A single k parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Chi Squared"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Chi Squared distribution k parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Chi Squared distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Chi Squared distribution. A single k parameter is required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Chi Squared distribution. A single k parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Continuous Uniform"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) < Params(0) Then
                        RaiseEvent ErrorMessage("The Continuous Uniform distribution b parameter value should be greater than or equal to the a parameter." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Continuous Uniform distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Continuous Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Continuous Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Continuous Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Conway-Maxwell-Poisson"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Conway-Maxwell-Poisson distribution Lambda parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) < 0 Then
                        RaiseEvent ErrorMessage("The Conway-Maxwell-Poisson distribution Nu parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Conway-Maxwell-Poisson distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Conway-Maxwell-Poisson distribution. The Lambda and Nu parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Conway-Maxwell-Poisson distribution. The Lambda and Nu parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Conway-Maxwell-Poisson distribution. The Lambda and Nu parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Discrete Uniform"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) < Params(0) Then
                        RaiseEvent ErrorMessage("The Discrete Uniform distribution b parameter value should be greater than or equal to the a parameter." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Discrete Uniform distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Discrete Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Discrete Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Discrete Uniform distribution. The a and b parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Erlang"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) < 1 Then
                        RaiseEvent ErrorMessage("The Erlang distribution k parameter value should be greater than or equal to 1." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Erlang distribution Lambda parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Erlang distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Erlang distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Erlang distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Erlang distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Exponential"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Exponential distribution Beta parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for an Exponential distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Exponential distribution. A single Beta parameter is required" & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Exponential distribution. A single Beta parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Fisher-Snedecor"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Fisher-Snedecor distribution d1 parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Fisher-Snedecor distribution d2 parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Fisher-Snedecor distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Fisher-Snedecor distribution. The d1 and d2 parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Fisher-Snedecor distribution. The d1 and d2 parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Fisher-Snedecor distribution. The d1 and d2 parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Gamma"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Gamma distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Gamma distribution Beta parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Gamma distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Geometric"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Geometric distribution P Success parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(0) > 1 Then
                        RaiseEvent ErrorMessage("The Geometric distribution P Success parameter value should be less than or equal to 1." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for an Geometric distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Geometric distribution. A single P Success parameter is required" & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Geometric distribution. A single P Success parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Hypergeometric"
                If Params.Length = 3 Then 'Correct number of parameters
                    If Params(0) < 0 Then
                        RaiseEvent ErrorMessage("The Hypergeometric distribution Population parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) < 0 Then
                        RaiseEvent ErrorMessage("The Hypergeometric distribution Successes parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) > Params(0) Then
                        RaiseEvent ErrorMessage("The Hypergeometric distribution Successes parameter value should be less than or equal to the Population." & vbCrLf)
                        Return False
                    ElseIf Params(2) < 0 Then
                        RaiseEvent ErrorMessage("The Hypergeometric distribution Draws parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) > Params(0) Then
                        RaiseEvent ErrorMessage("The Hypergeometric distribution Draws parameter value should be less than or equal to the Population." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Hypergeometric distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Hypergeometric distribution. The Population, Successes and Draws parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 3 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Hypergeometric distribution. The Population, Successes and Draws parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Hypergeometric distribution. The Population, Successes and Draws parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Inverse Gamma"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Inverse Gamma distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Inverse Gamma distribution Beta parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Inverse Gamma distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Inverse Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Inverse Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Inverse Gamma distribution. The Alpha and Beta parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Inverse Gaussian"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Inverse Gaussian distribution Mu parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Inverse Gaussian distribution Lambda parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Inverse Gaussian distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Inverse Gaussian distribution. The Mu and Lambda parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Inverse Gaussian distribution. The Mu and Lambda parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Inverse Gaussian distribution. The Mu and Lambda parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Laplace"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Laplace distribution b parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Laplace distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Laplace distribution. The Mu and b parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Laplace distribution. The Mu and b parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Laplace distribution. The Mu and b parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Log Normal"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) < 0 Then
                        RaiseEvent ErrorMessage("The Log Normal distribution Sigma parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Log Normal distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Log Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Log Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Log Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Negative Binomial"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) < 0 Then
                        RaiseEvent ErrorMessage("The Negative Binomial distribution r parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) < 0 Then
                        RaiseEvent ErrorMessage("The Negative Binomial distribution P success parameter value should be greater than or equal to 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) > 1 Then
                        RaiseEvent ErrorMessage("The Negative Binomial distribution P success parameter value should be less than or equal to 1." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Negative Binomial distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Negative Binomial distribution. The r and P success parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Negative Binomial distribution. The r and P success parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Negative Binomial distribution. The r and P success parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Normal"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Normal distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Normal distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Normal distribution. The Mu and Sigma parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Pareto"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Pareto distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Pareto distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Pareto distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Pareto distribution. The xm and Alpha parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Pareto distribution. The xm and Alpha parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Pareto distribution. The xm and Alpha parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Poisson"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Poisson distribution Lambda parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Poisson distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Poisson distribution. A single Lambda parameter is required" & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Poisson distribution. A single Lambda parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Rayleigh"
                If Params.Length = 1 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Rayleigh distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Rayleigh distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Rayleigh distribution. A single Sigma parameter is required" & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Rayleigh distribution. A single Sigma parameter is required." & vbCrLf)
                    Return False
                End If

            Case "Skewed Generalized Error"
                If Params.Length = 4 Then 'Correct number of parameters
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized Error distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= -1 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized Error distribution Lambda parameter value should be greater than -1." & vbCrLf)
                        Return False
                    ElseIf Params(2) >= 1 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized Error distribution Lambda parameter value should be less than 1." & vbCrLf)
                        Return False
                    ElseIf Params(3) <= 0 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized Error distribution p parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Skewed Generalized Error distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Skewed Generalized Error distribution. The Mu, Sigma, Lambda and p parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 4 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Skewed Generalized Error distribution. The Mu, Sigma, Lambda and p parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Skewed Generalized Error distribution. The Mu, Sigma, Lambda and p parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Skewed Generalized T"
                If Params.Length = 5 Then 'Correct number of parameters
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized T distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= -1 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized T distribution Lambda parameter value should be greater than -1." & vbCrLf)
                        Return False
                    ElseIf Params(2) >= 1 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized T distribution Lambda parameter value should be less than 1." & vbCrLf)
                        Return False
                    ElseIf Params(3) <= 0 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized T distribution p parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(4) <= 0 Then
                        RaiseEvent ErrorMessage("The Skewed Generalized T distribution q parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Skewed Generalized T distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Skewed Generalized T distribution. The Mu, Sigma, Lambda, p and q parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 5 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Skewed Generalized T distribution. The Mu, Sigma, Lambda, p and q parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Skewed Generalized T distribution. The Mu, Sigma, Lambda, p and q parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Stable"
                If Params.Length = 4 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Stable distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) < -1 Then
                        RaiseEvent ErrorMessage("The Stable distribution Beta parameter value should be greater than or equal to -1." & vbCrLf)
                        Return False
                    ElseIf Params(1) > 1 Then
                        RaiseEvent ErrorMessage("The Stable distribution Beta parameter value should be less than or equal to 1." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= 0 Then
                        RaiseEvent ErrorMessage("The Stable distribution c parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Stable distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Stable distribution. The Alpha, Beta, c and Mu parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 4 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Stable distribution. The Alpha, Beta, c and Mu parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Stable distribution. The Alpha, Beta, c and Mu parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Student's T"
                If Params.Length = 3 Then 'Correct number of parameters
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Student's T distribution Sigma parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= 0 Then
                        RaiseEvent ErrorMessage("The Student's T distribution Nu parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Student's T distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Student's T distribution. The Mu, Sigma and Nu parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 3 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Student's T distribution. The Mu, Sigma and Nu parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Student's T distribution. The Mu, Sigma and Nu parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Triangular"
                If Params.Length = 3 Then 'Correct number of parameters
                    If Params(1) <= Params(0) Then
                        RaiseEvent ErrorMessage("The Triangular distribution b (upper) parameter value should be greater than the a (lower) parameter." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= Params(0) Then
                        RaiseEvent ErrorMessage("The Triangular distribution c (peak) parameter value should be greater than the a (lower) parameter." & vbCrLf)
                        Return False
                    ElseIf Params(2) >= Params(1) Then
                        RaiseEvent ErrorMessage("The Triangular distribution c (peak) parameter value should be less than the b (upper) parameter." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Triangular distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Triangular distribution. The a (lower), b (upper) and c (peak) parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 3 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Triangular distribution. The a (lower), b (upper) and c (peak) parameters are required.." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Triangular distribution. The a (lower), b (upper) and c (peak) parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Truncated Pareto"
                If Params.Length = 3 Then 'Correct number of parameters
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Truncated Pareto distribution xm parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Truncated Pareto distribution Alpha parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(2) <= Params(0) Then
                        RaiseEvent ErrorMessage("The Truncated Pareto distribution T parameter value should be greater than the xm parameter." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Truncated Pareto distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Truncated Pareto distribution. The xm, Alpha and T parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length < 3 Then 'Too few parameters
                    RaiseEvent ErrorMessage("Too few parameters provided for the Truncated Pareto distribution. The xm, Alpha and T parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Truncated Pareto distribution. The xm, Alpha and T parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Weibull"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Weibull distribution k parameter value should be greater than 0." & vbCrLf)
                        Return False
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Weibull distribution Lambda parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Weibull distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Weibull distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Weibull distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Weibull distribution. The k and Lambda parameters are required." & vbCrLf)
                    Return False
                End If

            Case "Zipf"
                If Params.Length = 2 Then 'Correct number of parameters                
                    If Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Zipf distribution n parameter value should be greater than 0." & vbCrLf)
                        Return False
                    Else
                        'The parameters are acceptable for a Zipf distribution.
                        Return True
                    End If
                ElseIf Params.Length = 0 Then 'No parameters
                    RaiseEvent ErrorMessage("No parameters provided for the Zipf distribution. The s and n parameters are required." & vbCrLf)
                    Return False
                ElseIf Params.Length = 1 Then
                    RaiseEvent ErrorMessage("Only one parameter provided for the Zipf distribution. The s and n parameters are required." & vbCrLf)
                    Return False
                Else 'Too many parameters
                    RaiseEvent ErrorMessage("Too many parameters provided for the Zipf distribution. The s and n parameters are required." & vbCrLf)
                    Return False
                End If

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Private Function GetRange(DistribName As String, Params() As Double) As DistribRange
        'Get the range of possible random variable values corresponding to the specified probability distribution.
        Select Case DistribName
            Case "Bernoulli"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = 1
                Range.MaxInclusive = True '<= 1
                Return Range

            Case "Beta"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = 1
                Range.MaxInclusive = True '<= 1
                Return Range

            Case "Beta Scaled"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                'RaiseEvent Message("The range of random variable values for a Beta Scaled distribution is being investigated." & vbCrLf)
                Return Range

            Case "Binomial"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Burr"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = False '> 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Categorical"
                Dim Range As New DistribRange
                Range.Minimum = 1
                Range.MinInclusive = True '>= 1
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Cauchy"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Chi"
                Dim Range As New DistribRange
                Range.Minimum = 0
                'Range.MinInclusive = True '>= 0 Wikipedia states Support: [0, inf)
                'Range.MinInclusive = False '> 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Chi Squared"
                Dim Range As New DistribRange
                If Params.Length = 0 Then
                    RaiseEvent ErrorMessage("The Chi Squared k parameter was not provided." & vbCrLf)
                Else
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Chi Squared k parameter must be > 0." & vbCrLf)
                    Else
                        Range.Minimum = 0
                        If Params(0) = 1 Then
                            Range.MinInclusive = False '> 0
                        Else
                            Range.MinInclusive = True '>= 0
                        End If
                        Range.Maximum = Double.PositiveInfinity
                        Range.MaxInclusive = False '< infinity
                        Return Range
                    End If
                End If

            Case "Continuous Uniform"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Conway-Maxwell-Poisson"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Discrete Uniform"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Erlang"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Exponential"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Fisher-Snedecor"
                Dim Range As New DistribRange
                If Params.Length < 2 Then
                    RaiseEvent ErrorMessage("Both the d1 and d2 parameters were not provided for the Fisher-Snedecor distribution." & vbCrLf)
                Else
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Chi Squared d1 parameter must be > 0." & vbCrLf)
                        If Params(1) <= 0 Then RaiseEvent ErrorMessage("The Chi Squared d2 parameter must be > 0." & vbCrLf) 'Also send a warning if d2 is invalid too.
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Chi Squared d2 parameter must be > 0." & vbCrLf)
                    Else
                        Range.Minimum = 0
                        If Params(0) = 1 Then
                            Range.MinInclusive = False '> 0
                        Else
                            Range.MinInclusive = True '>= 0
                        End If
                        Range.Maximum = Double.PositiveInfinity
                        Range.MaxInclusive = False '< infinity
                        Return Range
                    End If
                End If

            Case "Gamma"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = False '> 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Geometric"
                Dim Range As New DistribRange
                Range.Minimum = 1
                Range.MinInclusive = True '> 1
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Hypergeometric"
                Dim Range As New DistribRange
                If Params.Length < 3 Then
                    RaiseEvent ErrorMessage("All of the Population and Successes and Draws parameters were not provided for the Hypergeometric distribution." & vbCrLf)
                Else
                    If Params(0) < 0 Then
                        RaiseEvent ErrorMessage("The Hypergeometric Population parameter must be >= 0." & vbCrLf)
                        If Params(1) < 0 Then
                            RaiseEvent ErrorMessage("The Hypergeometric Successes parameter must be >= 0." & vbCrLf)
                            If Params(2) < 0 Then
                                RaiseEvent ErrorMessage("The Hypergeometric Draws parameter must be >= 0." & vbCrLf)
                            Else
                                Range.Minimum = 0
                                If Params(2) + Params(1) - Params(0) > 0 Then Range.Minimum = Params(2) + Params(1) - Params(0)
                                Range.MinInclusive = True
                                Range.Maximum = Params(2)
                                If Params(1) < Params(2) Then Range.Maximum = Params(1)
                                Range.MaxInclusive = True
                                Return Range
                            End If
                        End If
                    End If
                End If

            Case "Inverse Gamma"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = False '> 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Inverse Gaussian"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = False '> 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Laplace"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Log Normal"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = False '> 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Negative Binomial"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Normal"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Pareto"
                Dim Range As New DistribRange
                If Params.Length < 2 Then
                    RaiseEvent ErrorMessage("Both the xm and alpha parameters were not provided for the Pareto distribution." & vbCrLf)
                Else
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Pareto xm parameter must be > 0." & vbCrLf)
                        If Params(1) <= 0 Then RaiseEvent ErrorMessage("The Pareto alpha parameter must be > 0." & vbCrLf) 'Also send a warning if alpha is invalid too.
                    ElseIf Params(1) <= 0 Then
                        RaiseEvent ErrorMessage("The Pareto alpha parameter must be > 0." & vbCrLf)
                    Else
                        Range.Minimum = Params(0)
                        Range.MinInclusive = True '>= xm
                        Range.Maximum = Double.PositiveInfinity
                        Range.MaxInclusive = False '< infinity
                        Return Range
                    End If
                End If

            Case "Poisson"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Rayleigh"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Skewed Generalized Error"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                'RaiseEvent Message("The range of random variable values for a Skewed Generalized Error distribution is being investigated." & vbCrLf)
                Return Range

            Case "Skewed Generalized T"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                'RaiseEvent Message("The range of random variable values for a Skewed Generalized T distribution is being investigated." & vbCrLf)
                Return Range

            Case "Stable"
                Dim Range As New DistribRange
                If Params.Length < 4 Then
                    RaiseEvent ErrorMessage("All of the Alpha, Beta, c and Mu parameters were not provided for the Stable distribution." & vbCrLf)
                Else
                    If Params(0) <= 0 Then
                        RaiseEvent ErrorMessage("The Alpha parameter must be > 0." & vbCrLf)
                    ElseIf Params(0) > 2 Then
                        RaiseEvent ErrorMessage("The Alpha parameter must be <= 2." & vbCrLf)
                    ElseIf Params(1) < -1 Then
                        RaiseEvent ErrorMessage("The Beta parameter must be >= -1." & vbCrLf)
                    ElseIf Params(1) > 1 Then
                        RaiseEvent ErrorMessage("The Beta parameter must be <= 1." & vbCrLf)
                    ElseIf Params(2) <= 0 Then
                        RaiseEvent ErrorMessage("The c parameter must be > 0." & vbCrLf)
                    Else
                        If Params(0) < 1 And Params(1) = 1 Then
                            Range.Minimum = Params(3) 'Mu
                            Range.MinInclusive = True '>= Mu
                            Range.Maximum = Double.PositiveInfinity
                            Range.MaxInclusive = False '< infinity
                        ElseIf Params(0) < 1 And Params(1) = -1 Then
                            Range.Minimum = Double.NegativeInfinity
                            Range.MinInclusive = False '> -infinity
                            Range.Maximum = Params(3) 'Mu
                            Range.MaxInclusive = True '>= Mu
                        Else
                            Range.Minimum = Double.NegativeInfinity
                            Range.MinInclusive = False '> -infinity
                            Range.Maximum = Double.PositiveInfinity
                            Range.MaxInclusive = False '< infinity
                        End If
                        Return Range
                    End If
                End If

            Case "Student's T"
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Triangular"
                'Note: the non-zero probability range is from Minimum to Maximum
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Truncated Pareto"
                'Note: the non-zero probability range is to T (the Truncation parameter) (CHECK THIS)
                Dim Range As New DistribRange
                Range.Minimum = Double.NegativeInfinity
                Range.MinInclusive = False '> -infinity
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Weibull"
                Dim Range As New DistribRange
                Range.Minimum = 0
                Range.MinInclusive = True '>= 0
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case "Zipf"
                Dim Range As New DistribRange
                Range.Minimum = 1
                Range.MinInclusive = True '>= 1 TO CHECK
                Range.Maximum = Double.PositiveInfinity
                Range.MaxInclusive = False '< infinity
                Return Range

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
        End Select
    End Function

    Private Function GetRange(DistribInfo As DistributionInfo) As DistribRange
        'Get the range of possible random variable values corresponding to the specified probability distribution.
        'This version of the function uses a DistribInfo argument.

        Dim DistribName As String = DistribInfo.Name

        Dim NParams As Integer = DistribInfo.NParams

        Dim Params(0 To NParams - 1) As Double
        Params(0) = DistribInfo.ParamA.Value
        If NParams > 1 Then
            Params(1) = DistribInfo.ParamB.Value
            If NParams > 2 Then
                Params(2) = DistribInfo.ParamC.Value
                If NParams > 3 Then
                    Params(3) = DistribInfo.ParamD.Value
                    If NParams > 4 Then
                        Params(4) = DistribInfo.ParamE.Value
                    End If
                End If
            End If
        End If

        Return GetRange(DistribName, Params)

    End Function

    Private Function Continuity(DistribName As String) As String
        'Return Continuous or Discrete string depending on the type of distribution of DistribName.

        Select Case DistribName
            Case "Bernoulli"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Beta"
                Return "Continuous"

            Case "Beta Scaled"
                Return "Continuous"

            Case "Binomial"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Burr"
                Return "Continuous"

            Case "Categorical"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Cauchy"
                Return "Continuous"

            Case "Chi"
                Return "Continuous"

            Case "Chi Squared"
                Return "Continuous"

            Case "Continuous Uniform"
                Return "Continuous"

            Case "Conway-Maxwell-Poisson"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Discrete Uniform"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Erlang"
                Return "Continuous"

            Case "Exponential"
                Return "Continuous"

            Case "Fisher-Snedecor"
                Return "Continuous"

            Case "Gamma"
                Return "Continuous"

            Case "Geometric"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Hypergeometric"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Inverse Gamma"
                Return "Continuous"

            Case "Inverse Gaussian"
                Return "Continuous"

            Case "Laplace"
                Return "Continuous"

            Case "Log Normal"
                Return "Continuous"

            Case "Negative Binomial"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Normal"
                Return "Continuous"

            Case "Pareto"
                Return "Continuous"

            Case "Poisson"
                'This is a discrete distribution.
                Return "Discrete"

            Case "Rayleigh"
                Return "Continuous"

            Case "Skewed Generalized Error"
                Return "Continuous"

            Case "Skewed Generalized T"
                Return "Continuous"

            Case "Stable"
                Return "Continuous"

            Case "Student's T"
                Return "Continuous"

            Case "Triangular"
                Return "Continuous"

            Case "Truncated Pareto"
                Return "Continuous"

            Case "Weibull"
                Return "Continuous"

            Case "Zipf"
                'This is a discrete distribution.
                Return "Discrete"

            Case Else
                RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
                Return "Unknown"
        End Select
    End Function

    'UPDATE: This function is now included in the DistributionInfo class:
    'Public Function Mean(DistribNo As Integer) As Double
    '    'Return the Mean of the specified distribution. DistribNo is the (zero based) index number of the distribution.
    '    Return Mean(Info(DistribNo))
    'End Function

    'UPDATE: This function is now included in the DistributionInfo class:
    'Public Function Mean(DistribInfo As DistributionInfo) As Double
    '    'Return the Mean of the specified distribution.

    '    Select Case DistribInfo.Name
    '        Case "Bernoulli"
    '            'This is a discrete distribution.
    '            Dim myBernoulli As MathNet.Numerics.Distributions.Bernoulli = New MathNet.Numerics.Distributions.Bernoulli(DistribInfo.ParamA.Value)
    '            Return myBernoulli.Mean

    '        Case "Beta"
    '            Dim myBeta As MathNet.Numerics.Distributions.Beta = New MathNet.Numerics.Distributions.Beta(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myBeta.Mean

    '        Case "Beta Scaled"
    '            Dim myBetaScaled As MathNet.Numerics.Distributions.BetaScaled = New MathNet.Numerics.Distributions.BetaScaled(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return myBetaScaled.Mean

    '        Case "Binomial"
    '            'This is a discrete distribution.
    '            Dim myBinomial As MathNet.Numerics.Distributions.Binomial = New MathNet.Numerics.Distributions.Binomial(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myBinomial.Mean

    '        Case "Burr"
    '            Dim myBurr As MathNet.Numerics.Distributions.Burr = New MathNet.Numerics.Distributions.Burr(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myBurr.Mean

    '        Case "Categorical"
    '            'This is a discrete distribution.


    '        Case "Cauchy"
    '            Dim myCauchy As MathNet.Numerics.Distributions.Cauchy = New MathNet.Numerics.Distributions.Cauchy(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myCauchy.Mean

    '        Case "Chi"
    '            Dim myChi As MathNet.Numerics.Distributions.Chi = New MathNet.Numerics.Distributions.Chi(DistribInfo.ParamA.Value)
    '            Return myChi.Mean

    '        Case "Chi Squared"
    '            Dim myChiSquared As MathNet.Numerics.Distributions.ChiSquared = New MathNet.Numerics.Distributions.ChiSquared(DistribInfo.ParamA.Value)
    '            Return myChiSquared.Mean

    '        Case "Continuous Uniform"
    '            Dim myContinuousUniform As MathNet.Numerics.Distributions.ContinuousUniform = New MathNet.Numerics.Distributions.ContinuousUniform(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myContinuousUniform.Mean

    '        Case "Conway-Maxwell-Poisson"
    '            'This is a discrete distribution.
    '            Dim myConwayMaxwellPoisson As MathNet.Numerics.Distributions.ConwayMaxwellPoisson = New MathNet.Numerics.Distributions.ConwayMaxwellPoisson(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myConwayMaxwellPoisson.Mean

    '        Case "Discrete Uniform"
    '            'This is a discrete distribution.
    '            Dim myDiscreteUniform As MathNet.Numerics.Distributions.DiscreteUniform = New MathNet.Numerics.Distributions.DiscreteUniform(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myDiscreteUniform.Mean

    '        Case "Erlang"
    '            Dim myErlang As MathNet.Numerics.Distributions.Erlang = New MathNet.Numerics.Distributions.Erlang(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myErlang.Mean

    '        Case "Exponential"
    '            Dim myExponential As MathNet.Numerics.Distributions.Exponential = New MathNet.Numerics.Distributions.Exponential(DistribInfo.ParamA.Value)
    '            Return myExponential.Mean

    '        Case "Fisher-Snedecor"
    '            Dim myFisherSnedecor As MathNet.Numerics.Distributions.FisherSnedecor = New MathNet.Numerics.Distributions.FisherSnedecor(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myFisherSnedecor.Mean

    '        Case "Gamma"
    '            Dim myGamma As MathNet.Numerics.Distributions.Gamma = New MathNet.Numerics.Distributions.Gamma(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myGamma.Mean

    '        Case "Geometric"
    '            'This is a discrete distribution.
    '            Dim myGeometric As MathNet.Numerics.Distributions.Geometric = New MathNet.Numerics.Distributions.Geometric(DistribInfo.ParamA.Value)
    '            Return myGeometric.Mean

    '        Case "Hypergeometric"
    '            'This is a discrete distribution.
    '            Dim myHypergeometric As MathNet.Numerics.Distributions.Hypergeometric = New MathNet.Numerics.Distributions.Hypergeometric(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myHypergeometric.Mean

    '        Case "Inverse Gamma"
    '            Dim myInverseGamma As MathNet.Numerics.Distributions.InverseGamma = New MathNet.Numerics.Distributions.InverseGamma(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myInverseGamma.Mean

    '        Case "Inverse Gaussian"
    '            Dim myInverseGaussian As MathNet.Numerics.Distributions.InverseGaussian = New MathNet.Numerics.Distributions.InverseGaussian(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myInverseGaussian.Mean

    '        Case "Laplace"
    '            Dim myLaplace As MathNet.Numerics.Distributions.Laplace = New MathNet.Numerics.Distributions.Laplace(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myLaplace.Mean

    '        Case "Log Normal"
    '            Dim myLogNormal As MathNet.Numerics.Distributions.LogNormal = New MathNet.Numerics.Distributions.LogNormal(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myLogNormal.Mean

    '        Case "Negative Binomial"
    '            'This is a discrete distribution.
    '            Dim myNegativeBinomial As MathNet.Numerics.Distributions.NegativeBinomial = New MathNet.Numerics.Distributions.NegativeBinomial(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myNegativeBinomial.Mean

    '        Case "Normal"
    '            Dim myNormal As MathNet.Numerics.Distributions.Normal = New MathNet.Numerics.Distributions.Normal(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myNormal.Mean

    '        Case "Pareto"
    '            Dim myPareto As MathNet.Numerics.Distributions.Pareto = New MathNet.Numerics.Distributions.Pareto(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myPareto.Mean

    '        Case "Poisson"
    '            'This is a discrete distribution.
    '            Dim myPoisson As MathNet.Numerics.Distributions.Poisson = New MathNet.Numerics.Distributions.Poisson(DistribInfo.ParamA.Value)
    '            Return myPoisson.Mean

    '        Case "Rayleigh"
    '            Dim myRayleigh As MathNet.Numerics.Distributions.Rayleigh = New MathNet.Numerics.Distributions.Rayleigh(DistribInfo.ParamA.Value)
    '            Return myRayleigh.Mean

    '        Case "Skewed Generalized Error"
    '            Dim mySkewedGeneralizedError As MathNet.Numerics.Distributions.SkewedGeneralizedError = New MathNet.Numerics.Distributions.SkewedGeneralizedError(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return mySkewedGeneralizedError.Mean

    '        Case "Skewed Generalized T"
    '            Dim mySkewedGeneralizedT As MathNet.Numerics.Distributions.SkewedGeneralizedT = New MathNet.Numerics.Distributions.SkewedGeneralizedT(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value)
    '            Return mySkewedGeneralizedT.Mean

    '        Case "Stable"
    '            Dim myStable As MathNet.Numerics.Distributions.Stable = New MathNet.Numerics.Distributions.Stable(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return myStable.Mean

    '        Case "Student's T"
    '            Dim myStudentT As MathNet.Numerics.Distributions.StudentT = New MathNet.Numerics.Distributions.StudentT(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myStudentT.Mean

    '        Case "Triangular"
    '            Dim myTriangular As MathNet.Numerics.Distributions.Triangular = New MathNet.Numerics.Distributions.Triangular(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myTriangular.Mean

    '        Case "Truncated Pareto"
    '            Dim myTruncatedPareto As MathNet.Numerics.Distributions.TruncatedPareto = New MathNet.Numerics.Distributions.TruncatedPareto(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myTruncatedPareto.Mean

    '        Case "Weibull"
    '            Dim myWeibull As MathNet.Numerics.Distributions.Weibull = New MathNet.Numerics.Distributions.Weibull(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myWeibull.Mean

    '        Case "Zipf"
    '            'This is a discrete distribution.
    '            Dim myZipf As MathNet.Numerics.Distributions.Zipf = New MathNet.Numerics.Distributions.Zipf(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myZipf.Mean

    '        Case Else
    '            RaiseEvent ErrorMessage("Unknown distribution: " & DistribInfo.Name & vbCrLf)
    '            Return Double.NaN
    '    End Select
    '    'End If
    'End Function

    'UPDATE: This function is now included in the DistributionInfo class:
    'Public Function StdDev(DistribNo As Integer) As Double
    '    'Return the Standard Deviation of the specified distribution. DistribNo is the (zero based) index number of the distribution.
    '    Return StdDev(Info(DistribNo))
    'End Function

    'UPDATE: This function is now included in the DistributionInfo class:
    'Public Function StdDev(DistribInfo As DistributionInfo) As Double
    '    'Return the Standard Deviation of the specified distribution.

    '    Select Case DistribInfo.Name
    '        Case "Bernoulli"
    '            'This is a discrete distribution.
    '            Dim myBernoulli As MathNet.Numerics.Distributions.Bernoulli = New MathNet.Numerics.Distributions.Bernoulli(DistribInfo.ParamA.Value)
    '            Return myBernoulli.StdDev

    '        Case "Beta"
    '            Dim myBeta As MathNet.Numerics.Distributions.Beta = New MathNet.Numerics.Distributions.Beta(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myBeta.StdDev

    '        Case "Beta Scaled"
    '            Dim myBetaScaled As MathNet.Numerics.Distributions.BetaScaled = New MathNet.Numerics.Distributions.BetaScaled(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return myBetaScaled.StdDev

    '        Case "Binomial"
    '            'This is a discrete distribution.
    '            Dim myBinomial As MathNet.Numerics.Distributions.Binomial = New MathNet.Numerics.Distributions.Binomial(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myBinomial.StdDev

    '        Case "Burr"
    '            Dim myBurr As MathNet.Numerics.Distributions.Burr = New MathNet.Numerics.Distributions.Burr(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myBurr.StdDev

    '        Case "Categorical"
    '            'This is a discrete distribution.


    '        Case "Cauchy"
    '            Dim myCauchy As MathNet.Numerics.Distributions.Cauchy = New MathNet.Numerics.Distributions.Cauchy(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myCauchy.StdDev

    '        Case "Chi"
    '            Dim myChi As MathNet.Numerics.Distributions.Chi = New MathNet.Numerics.Distributions.Chi(DistribInfo.ParamA.Value)
    '            Return myChi.StdDev

    '        Case "Chi Squared"
    '            Dim myChiSquared As MathNet.Numerics.Distributions.ChiSquared = New MathNet.Numerics.Distributions.ChiSquared(DistribInfo.ParamA.Value)
    '            Return myChiSquared.StdDev

    '        Case "Continuous Uniform"
    '            Dim myContinuousUniform As MathNet.Numerics.Distributions.ContinuousUniform = New MathNet.Numerics.Distributions.ContinuousUniform(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myContinuousUniform.StdDev

    '        Case "Conway-Maxwell-Poisson"
    '            'This is a discrete distribution.
    '            Dim myConwayMaxwellPoisson As MathNet.Numerics.Distributions.ConwayMaxwellPoisson = New MathNet.Numerics.Distributions.ConwayMaxwellPoisson(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myConwayMaxwellPoisson.StdDev

    '        Case "Discrete Uniform"
    '            'This is a discrete distribution.
    '            Dim myDiscreteUniform As MathNet.Numerics.Distributions.DiscreteUniform = New MathNet.Numerics.Distributions.DiscreteUniform(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myDiscreteUniform.StdDev

    '        Case "Erlang"
    '            Dim myErlang As MathNet.Numerics.Distributions.Erlang = New MathNet.Numerics.Distributions.Erlang(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myErlang.StdDev

    '        Case "Exponential"
    '            Dim myExponential As MathNet.Numerics.Distributions.Exponential = New MathNet.Numerics.Distributions.Exponential(DistribInfo.ParamA.Value)
    '            Return myExponential.StdDev

    '        Case "Fisher-Snedecor"
    '            Dim myFisherSnedecor As MathNet.Numerics.Distributions.FisherSnedecor = New MathNet.Numerics.Distributions.FisherSnedecor(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myFisherSnedecor.StdDev

    '        Case "Gamma"
    '            Dim myGamma As MathNet.Numerics.Distributions.Gamma = New MathNet.Numerics.Distributions.Gamma(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myGamma.StdDev

    '        Case "Geometric"
    '            'This is a discrete distribution.
    '            Dim myGeometric As MathNet.Numerics.Distributions.Geometric = New MathNet.Numerics.Distributions.Geometric(DistribInfo.ParamA.Value)
    '            Return myGeometric.StdDev

    '        Case "Hypergeometric"
    '            'This is a discrete distribution.
    '            Dim myHypergeometric As MathNet.Numerics.Distributions.Hypergeometric = New MathNet.Numerics.Distributions.Hypergeometric(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myHypergeometric.StdDev

    '        Case "Inverse Gamma"
    '            Dim myInverseGamma As MathNet.Numerics.Distributions.InverseGamma = New MathNet.Numerics.Distributions.InverseGamma(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myInverseGamma.StdDev

    '        Case "Inverse Gaussian"
    '            Dim myInverseGaussian As MathNet.Numerics.Distributions.InverseGaussian = New MathNet.Numerics.Distributions.InverseGaussian(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myInverseGaussian.StdDev

    '        Case "Laplace"
    '            Dim myLaplace As MathNet.Numerics.Distributions.Laplace = New MathNet.Numerics.Distributions.Laplace(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myLaplace.StdDev

    '        Case "Log Normal"
    '            Dim myLogNormal As MathNet.Numerics.Distributions.LogNormal = New MathNet.Numerics.Distributions.LogNormal(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myLogNormal.StdDev

    '        Case "Negative Binomial"
    '            'This is a discrete distribution.
    '            Dim myNegativeBinomial As MathNet.Numerics.Distributions.NegativeBinomial = New MathNet.Numerics.Distributions.NegativeBinomial(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myNegativeBinomial.StdDev

    '        Case "Normal"
    '            Dim myNormal As MathNet.Numerics.Distributions.Normal = New MathNet.Numerics.Distributions.Normal(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myNormal.StdDev

    '        Case "Pareto"
    '            Dim myPareto As MathNet.Numerics.Distributions.Pareto = New MathNet.Numerics.Distributions.Pareto(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myPareto.StdDev

    '        Case "Poisson"
    '            'This is a discrete distribution.
    '            Dim myPoisson As MathNet.Numerics.Distributions.Poisson = New MathNet.Numerics.Distributions.Poisson(DistribInfo.ParamA.Value)
    '            Return myPoisson.StdDev

    '        Case "Rayleigh"
    '            Dim myRayleigh As MathNet.Numerics.Distributions.Rayleigh = New MathNet.Numerics.Distributions.Rayleigh(DistribInfo.ParamA.Value)
    '            Return myRayleigh.StdDev

    '        Case "Skewed Generalized Error"
    '            Dim mySkewedGeneralizedError As MathNet.Numerics.Distributions.SkewedGeneralizedError = New MathNet.Numerics.Distributions.SkewedGeneralizedError(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return mySkewedGeneralizedError.StdDev

    '        Case "Skewed Generalized T"
    '            Dim mySkewedGeneralizedT As MathNet.Numerics.Distributions.SkewedGeneralizedT = New MathNet.Numerics.Distributions.SkewedGeneralizedT(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value)
    '            Return mySkewedGeneralizedT.StdDev

    '        Case "Stable"
    '            Dim myStable As MathNet.Numerics.Distributions.Stable = New MathNet.Numerics.Distributions.Stable(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value)
    '            Return myStable.StdDev

    '        Case "Student's T"
    '            Dim myStudentT As MathNet.Numerics.Distributions.StudentT = New MathNet.Numerics.Distributions.StudentT(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myStudentT.StdDev

    '        Case "Triangular"
    '            Dim myTriangular As MathNet.Numerics.Distributions.Triangular = New MathNet.Numerics.Distributions.Triangular(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myTriangular.StdDev

    '        Case "Truncated Pareto"
    '            Dim myTruncatedPareto As MathNet.Numerics.Distributions.TruncatedPareto = New MathNet.Numerics.Distributions.TruncatedPareto(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value)
    '            Return myTruncatedPareto.StdDev

    '        Case "Weibull"
    '            Dim myWeibull As MathNet.Numerics.Distributions.Weibull = New MathNet.Numerics.Distributions.Weibull(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myWeibull.StdDev

    '        Case "Zipf"
    '            'This is a discrete distribution.
    '            Dim myZipf As MathNet.Numerics.Distributions.Zipf = New MathNet.Numerics.Distributions.Zipf(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
    '            Return myZipf.StdDev

    '        Case Else
    '            RaiseEvent ErrorMessage("Unknown distribution: " & DistribInfo.Name & vbCrLf)
    '            Return Double.NaN
    '    End Select
    'End Function

    Public Sub GenerateData()
        'Generate the distribution data.

        'Data.Clear()
        'Data.Reset()

        If Data.Tables.Contains("Continuous_Data_Table") Then Data.Tables.Remove("Continuous_Data_Table")
        If Data.Tables.Contains("Discrete_Data_Table") Then Data.Tables.Remove("Discrete_Data_Table")


        'Set up the Continuous Data Table:
        Data.Tables.Add("Continuous_Data_Table")
        'Generate the sampled Random Variable Values:
        Data.Tables("Continuous_Data_Table").Columns.Add("Value", System.Type.GetType("System.Double"))
        Dim I As Integer
        For I = 0 To ContSampling.NSamples - 1
            Data.Tables("Continuous_Data_Table").Rows.Add(ContSampling.Minimum + I * ContSampling.Interval)
        Next

        'Generate the Probability data
        Data.Tables("Continuous_Data_Table").Columns.Add("Probability", System.Type.GetType("System.Double"))
        Dim NRows As Integer = Data.Tables("Continuous_Data_Table").Rows.Count
        For I = 0 To NRows - 1
            Data.Tables("Continuous_Data_Table").Rows(I).Item("Probability") = I / (NRows - 1)
        Next

        'Set up the Discrete Data Table:
        Data.Tables.Add("Discrete_Data_Table")

        Data.Tables("Discrete_Data_Table").Columns.Add("Value", System.Type.GetType("System.Int32"))
        For I = DiscSampling.Minimum To DiscSampling.Maximum
            Data.Tables("Discrete_Data_Table").Rows.Add(I)
        Next

        For Each Item In Info
            If Item.Continuity = "Continuous" Then
                GenerateContData(Item)
            ElseIf Item.Continuity = "Discrete" Then
                GenerateDiscData(Item)
            Else
                RaiseEvent ErrorMessage("Unknown distribution continuity: " & Item.Continuity & vbCrLf)
            End If
        Next

        ''If Distrib.Continuity = "Continuous" Then
        'If Continuity = "Continuous" Then
        '    Dim I As Integer
        '    'Generate the sampled Random Variable Values:
        '    Data.Tables("DataTable").Columns.Add("Value", System.Type.GetType("System.Double"))
        '    For I = 0 To ContSampling.NSamples - 1
        '        Data.Tables("DataTable").Rows.Add(ContSampling.Minimum + I * ContSampling.Interval)
        '    Next

        '    'Generate the Probability data
        '    Data.Tables("DataTable").Columns.Add("Probability", System.Type.GetType("System.Double"))
        '    Dim NRows As Integer = Data.Tables("DataTable").Rows.Count
        '    For I = 0 To NRows - 1
        '        Data.Tables("DataTable").Rows(I).Item("Probability") = I / (NRows - 1)
        '    Next

        '    ''Generate the Primary Distribution data:
        '    'GenerateContData(Distrib)

        '    'Generate the Secondary Distribution(s) data:
        '    'For Each Item In MultiDistrib
        '    For Each Item In Info
        '        GenerateContData(Item)
        '    Next
        '    'ElseIf Distrib.Continuity = "Discrete" Then
        'ElseIf Continuity = "Discrete" Then
        '    GenerateDiscData()
        'Else
        '    'RaiseEvent ErrorMessage("Unknow continuity value: " & Distrib.Continuity & vbCrLf)
        '    RaiseEvent ErrorMessage("Unknow continuity value: " & Continuity & vbCrLf)
        'End If

        ''Generate the Secondary distribution data.
        'For Each Item In MultiDistrib
        '    If Item.Continuity = "Continuous" Then

        '    End If
        'Next
    End Sub

    'Private Sub GenerateContData()
    '    'Generate the data for a continuous distribution.

    '    Dim I As Integer

    '    'Generate the sampled Random Variable Values:
    '    Data.Tables("DataTable").Columns.Add("Value", System.Type.GetType("System.Double"))
    '    For I = 0 To ContSampling.NSamples - 1
    '        Data.Tables("DataTable").Rows.Add(ContSampling.Minimum + I * ContSampling.Interval)
    '    Next

    '    'Generate the PDF data
    '    If Distrib.PdfInfo.Generate And Distrib.PdfInfo.Valid Then
    '        GenerateContDistribPdf(Distrib.Name)
    '    End If

    '    'Generate the PDF Ln data
    '    If Distrib.PdfLnInfo.Generate And Distrib.PdfLnInfo.Valid Then
    '        GenerateContDistribPdfLn(Distrib.Name)
    '    End If

    '    'Generate the CDF data
    '    If Distrib.CdfInfo.Generate And Distrib.CdfInfo.Valid Then
    '        GenerateContDistribCdf(Distrib.Name)
    '    End If

    '    'Generate the Probability data
    '    If Distrib.ProbabilityInfo.Generate And Distrib.ProbabilityInfo.Valid Then
    '        GenerateContDistribProbability()
    '    End If

    '    'Generate the Inverse CDF data
    '    If Distrib.InvCdfInfo.Generate And Distrib.InvCdfInfo.Valid Then
    '        GenerateContDistribInvCdf(Distrib.Name)
    '    End If

    'End Sub

    Public Sub UpdateData(DistribNo As Integer)
        'Update the data with the selected Distribution number.
        If DistribNo > 0 Then
            If Info(DistribNo - 1).Continuity = "Continuous" Then
                If Data.Tables.Contains("Continuous_Data_Table") Then
                    'If DistribNo = 0 Then

                    '    RaiseEvent ErrorMessage("No distribution selected for update." & vbCrLf)
                    'Else
                    'If DistribNo > MultiDistrib.Count Then
                    If DistribNo > Info.Count Then
                        RaiseEvent ErrorMessage("The selected Distribution number does not exist." & vbCrLf)
                    Else
                        'If Info(DistribNo - 1).Continuity = "Continuous" Then
                        '    GenerateContData(Info(DistribNo - 1))
                        'ElseIf Info(DistribNo - 1).Continuity = "Discrete" Then

                        'Else
                        '    RaiseEvent ErrorMessage("Unknown continuity: " & Info(DistribNo - 1).Continuity & vbCrLf)
                        'End If
                        GenerateContData(Info(DistribNo - 1))
                    End If
                    'End If
                Else
                    RaiseEvent ErrorMessage("The Continuous_Data_Table table does not exist." & vbCrLf)
                End If
            ElseIf Info(DistribNo - 1).Continuity = "Discrete" Then


                If Data.Tables.Contains("Discrete_Data_Table") Then
                    If DistribNo > Info.Count Then
                        RaiseEvent ErrorMessage("The selected Distribution number does not exist." & vbCrLf)
                    Else
                        'If Info(DistribNo - 1).Continuity = "Continuous" Then

                        'ElseIf Info(DistribNo - 1).Continuity = "Discrete" Then
                        '    GenerateDiscData(Info(DistribNo - 1))
                        'Else
                        '    RaiseEvent ErrorMessage("Unknown continuity: " & Info(DistribNo - 1).Continuity & vbCrLf)
                        'End If
                        GenerateDiscData(Info(DistribNo - 1))
                    End If
                Else
                    RaiseEvent ErrorMessage("The Discrete_Data_Table table does not exist." & vbCrLf)
                End If
            Else
                RaiseEvent ErrorMessage("Unknown continuity: " & Info(DistribNo - 1).Continuity & vbCrLf)
            End If
        Else
            RaiseEvent ErrorMessage("No distribution selected for update." & vbCrLf)
        End If


    End Sub

    Private Sub GenerateContData(DistribInfo As DistributionInfo)
        'Generate the data for a continuous distribution.

        'Generate the PDF data
        If DistribInfo.PdfInfo.Generate And DistribInfo.PdfInfo.Valid Then
            GenerateContDistribPdf(DistribInfo)
        End If

        'Generate the PDF Ln data
        'If Distrib.PdfLnInfo.Generate And Distrib.PdfLnInfo.Valid Then
        If DistribInfo.PdfLnInfo.Generate And DistribInfo.PdfLnInfo.Valid Then
            GenerateContDistribPdfLn(DistribInfo)
        End If

        'Generate the CDF data
        'If Distrib.CdfInfo.Generate And Distrib.CdfInfo.Valid Then
        If DistribInfo.CdfInfo.Generate And DistribInfo.CdfInfo.Valid Then
            GenerateContDistribCdf(DistribInfo)
        End If

        'Generate the RevCDF data
        If DistribInfo.RevCdfInfo.Generate And DistribInfo.RevCdfInfo.Valid Then
            GenerateContDistribRevCdf(DistribInfo)
        End If

        'Generate the Inverse CDF data
        'If Distrib.InvCdfInfo.Generate And Distrib.InvCdfInfo.Valid Then
        If DistribInfo.InvCdfInfo.Generate And DistribInfo.InvCdfInfo.Valid Then
            'GenerateContDistribInvCdf(Distrib.Name)
            GenerateContDistribInvCdf(DistribInfo)
        End If

        'Generate the Inverse Reverse CDF data
        If DistribInfo.InvRevCdfInfo.Generate And DistribInfo.InvRevCdfInfo.Valid Then
            GenerateContDistribInvRevCdf(DistribInfo)
        End If

    End Sub

    'Private Sub GenerateDiscData()
    '    'Generate the data fro a discrete distribution.

    '    Data.Clear()
    '    Data.Reset()

    '    Dim XValue As Double
    '    Dim I As Integer

    '    Data.Tables.Add("DataTable")

    'End Sub

    'OLD VERSION! USE: Private Sub GenerateContDistribPdf(DistribInfo As DistributionInfo)
    'Private Sub GenerateContDistribPdf(DistName As String, DistField As String, SampField As String)
    'Private Sub GenerateContDistribPdf(DistName As String)
    '    'Generate the Continuous distribution PDF data.
    '    'DistName is the name of the distribution.
    '    Try
    '        Select Case DistName
    '            Case "Beta"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("PDF") = MathNet.Numerics.Distributions.Beta.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Beta.PDF(Info(DistribNo - 1).ParamA.Value, Info(DistribNo - 1).ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Beta Scaled"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.BetaScaled.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Burr"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Burr.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Cauchy"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Cauchy.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Chi.PDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi Squared"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.ChiSquared.PDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Continuous Uniform"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.ContinuousUniform.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Erlang"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Erlang.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Exponential"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Exponential.PDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Fisher-Snedecor"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.FisherSnedecor.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Gamma"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Gamma.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gamma"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.InverseGamma.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gaussian"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.InverseGaussian.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Laplace"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Laplace.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Log Normal"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.LogNormal.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Normal"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Normal.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Pareto"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Pareto.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Rayleigh"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Rayleigh.PDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized Error"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized T"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Distrib.ParamE.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Stable"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Stable.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Student's T"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.StudentT.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Triangular"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Triangular.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Truncated Pareto"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.TruncatedPareto.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Weibull"
    '                If AddPdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDF") = MathNet.Numerics.Distributions.Weibull.PDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case Else
    '                RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistName & vbCrLf)
    '        End Select
    '    Catch ex As Exception
    '        RaiseEvent ErrorMessage(ex.Message & vbCrLf)
    '    End Try
    'End Sub

    Private Sub GenerateContDistribPdf(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution PDF data.

        'To Do: Select the Start and End Row Numbers containing the values where the PDF exists. (E.g. The PDF of Beta distribution only exists between 0 and 1 inclusive.)
        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)


        Dim ColName As String = DistribInfo.PdfInfo.Name
        Dim Value As Double

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    'If AddColumn(ColName, DistribInfo.PdfInfo.NumType) Then
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.Beta.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If
                Case "Beta Scaled"
                    'If AddColumn(ColName, DistribInfo.PdfInfo.NumType) Then
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    'Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    Value = MathNet.Numerics.Distributions.BetaScaled.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If
                Case "Burr"
                    'If AddColumn(ColName, DistribInfo.PdfInfo.NumType) Then
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then 'The valid X range: Xmin <= X <= Xmax
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then 'The valid X range: Xmin <= X < Xmax
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then 'The valid X range: Xmin < X <= Xmax
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else  'The valid X range: Xmin < X < Xmax
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Erlang"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Laplace"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Stable"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Weibull"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case Else
                    RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage("DistributionModel-GenerateContDistribPdf: " & ex.Message & vbCrLf)
        End Try

    End Sub

    'OLD VERSION! USE: Private Function AddColumn(ColName As String, ColType As String) As Boolean
    'Private Sub AddPdfColumn()
    'Private Function AddPdfColumn() As Boolean
    '    'Add the PDF column to the DataTable if it does not already exist.
    '    If Data.Tables.Contains("DataTable") Then
    '        If Data.Tables("DataTable").Columns.Contains("PDF") Then
    '            'The PDF column already exists
    '            Return True
    '        Else
    '            Select Case Distrib.PdfInfo.NumType
    '                Case "Single"
    '                    Data.Tables("DataTable").Columns.Add("PDF", System.Type.GetType("System.Single"))
    '                    Return True
    '                Case "Double"
    '                    Data.Tables("DataTable").Columns.Add("PDF", System.Type.GetType("System.Double"))
    '                    Return True
    '                Case Else
    '                    RaiseEvent ErrorMessage("Invalid number type: " & Distrib.PdfInfo.NumType & vbCrLf)
    '                    RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
    '                    Return False
    '            End Select
    '        End If
    '    Else
    '        RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
    '        Return False
    '    End If
    'End Function

    'Private Function AddColumn(ColName As String, ColType As String) As Boolean
    Private Function AddColumn(TableName As String, ColName As String, ColType As String) As Boolean
        'Add the specified column to the DataTable if it does not already exist.

        'If Data.Tables.Contains("DataTable") Then
        If Data.Tables.Contains(TableName) Then
            'If Data.Tables("DataTable").Columns.Contains(ColName) Then
            If Data.Tables(TableName).Columns.Contains(ColName) Then
                'The column already exists
                Return True
            Else
                'Select Case Distrib.PdfInfo.NumType
                Select Case ColType
                    Case "Single"
                        'Data.Tables("DataTable").Columns.Add("PDF", System.Type.GetType("System.Single"))
                        'Data.Tables("DataTable").Columns.Add(ColName, System.Type.GetType("System.Single"))
                        Data.Tables(TableName).Columns.Add(ColName, System.Type.GetType("System.Single"))
                        Return True
                    Case "Double"
                        'Data.Tables("DataTable").Columns.Add("PDF", System.Type.GetType("System.Double"))
                        'Data.Tables("DataTable").Columns.Add(ColName, System.Type.GetType("System.Double"))
                        Data.Tables(TableName).Columns.Add(ColName, System.Type.GetType("System.Double"))
                        Return True
                    Case Else
                        RaiseEvent ErrorMessage("Invalid number type: " & ColType & vbCrLf)
                        RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
                        Return False
                End Select
            End If
        Else
            'RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
            RaiseEvent ErrorMessage("The table does not exist: " & TableName & vbCrLf)
            Return False
        End If
    End Function

    'OLD VERSION! USE: Private Sub GenerateContDistribPdfLn(DistribInfo As DistributionInfo)
    'Private Sub GenerateContDistribPdfLn(DistName As String, DistField As String, SampField As String)
    'Private Sub GenerateContDistribPdfLn(DistName As String)
    '    'Generate the Continuous distribution PDF Ln data.
    '    'DistName is the name of the distribution.
    '    'DistField is the name of the DataTable Field to contain the data.
    '    'SampField is the name of the DataTable field containing the sampled Random Variable Value.
    '    Try
    '        Select Case DistName
    '            Case "Beta"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Beta.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Beta Scaled"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.BetaScaled.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Burr"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Burr.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Cauchy"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Cauchy.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Chi.PDFLn(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi Squared"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.ChiSquared.PDFLn(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Continuous Uniform"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Erlang"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Erlang.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Exponential"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Exponential.PDFLn(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Fisher-Snedecor"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Gamma"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Gamma.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gamma"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.InverseGamma.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gaussian"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Laplace"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Laplace.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Log Normal"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.LogNormal.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Normal"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Normal.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Pareto"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Pareto.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Rayleigh"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Rayleigh.PDFLn(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized Error"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized T"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Distrib.ParamE.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Stable"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Stable.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Student's T"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.StudentT.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Triangular"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Triangular.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Truncated Pareto"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Weibull"
    '                If AddPdfLnColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("PDFLn") = MathNet.Numerics.Distributions.Weibull.PDFLn(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case Else
    '                RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistName & vbCrLf)
    '        End Select
    '    Catch ex As Exception
    '        RaiseEvent ErrorMessage(ex.Message & vbCrLf)
    '    End Try
    'End Sub

    Private Sub GenerateContDistribPdfLn(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution PDF Ln data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.PdfLnInfo.Name

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    'If AddColumn(ColName, DistribInfo.PdfLnInfo.NumType) Then
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Beta Scaled"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Burr"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Erlang"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Laplace"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Stable"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Weibull"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.PdfLnInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.PDFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case Else
                    RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage("DistributionModel-GenerateContDistribPdfLn: " & ex.Message & vbCrLf)
        End Try
    End Sub

    'OLD VERSION! USE: Private Function AddColumn(ColName As String, ColType As String) As Boolean
    'Private Function AddPdfLnColumn() As Boolean
    '    'Add the PDF column to the DataTable if it does not already exist.
    '    If Data.Tables.Contains("DataTable") Then
    '        If Data.Tables("DataTable").Columns.Contains("PDFLn") Then
    '            'The PDFLn column already exists
    '            Return True
    '        Else
    '            Select Case Distrib.PdfLnInfo.NumType
    '                Case "Single"
    '                    Data.Tables("DataTable").Columns.Add("PDFLn", System.Type.GetType("System.Single"))
    '                    Return True
    '                Case "Double"
    '                    Data.Tables("DataTable").Columns.Add("PDFLn", System.Type.GetType("System.Double"))
    '                    Return True
    '                Case Else
    '                    RaiseEvent ErrorMessage("Invalid number type: " & Distrib.PdfLnInfo.NumType & vbCrLf)
    '                    RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
    '                    Return False
    '            End Select
    '        End If
    '    Else
    '        RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
    '        Return False
    '    End If
    'End Function

    'OLD VERSION! USE: Private Sub GenerateContDistribCdf(DistribInfo As DistributionInfo)
    'Private Sub GenerateContDistribCdf(DistName As String, DistField As String, SampField As String)
    'Private Sub GenerateContDistribCdf(DistName As String)
    '    'Generate the Continuous distribution PDF data.
    '    'DistName is the name of the distribution.

    '    Try
    '        Select Case DistName
    '            Case "Beta"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Beta.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Beta Scaled"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.BetaScaled.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Burr"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Burr.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Cauchy"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Cauchy.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Chi.CDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Chi Squared"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.ChiSquared.CDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Continuous Uniform"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.ContinuousUniform.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Erlang"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Erlang.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Exponential"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Exponential.CDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Fisher-Snedecor"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.FisherSnedecor.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Gamma"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Gamma.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gamma"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.InverseGamma.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Inverse Gaussian"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.InverseGaussian.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Laplace"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Laplace.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Log Normal"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.LogNormal.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Normal"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Normal.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Pareto"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Pareto.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Rayleigh"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Rayleigh.CDF(Distrib.ParamA.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized Error"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Skewed Generalized T"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Distrib.ParamE.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Stable"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Stable.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Student's T"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.StudentT.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Triangular"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Triangular.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Truncated Pareto"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.TruncatedPareto.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case "Weibull"
    '                If AddCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        Row.Item("CDF") = MathNet.Numerics.Distributions.Weibull.CDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Value"))
    '                    Next
    '                End If
    '            Case Else
    '                RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistName & vbCrLf)
    '        End Select
    '    Catch ex As Exception
    '        RaiseEvent ErrorMessage(ex.Message & vbCrLf)
    '    End Try
    'End Sub

    Private Sub GenerateContDistribCdf(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution CDF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.CdfInfo.Name

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Beta Scaled"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Burr"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Erlang"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Laplace"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Stable"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Weibull"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case Else
                    RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try

    End Sub

    Private Sub GenerateContDistribRevCdf(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution Reverse CDF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.RevCdfInfo.Name

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            'For Each Row As DataRow In Data.Tables("DataTable").Rows
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Beta.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Beta Scaled"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.BetaScaled.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Burr"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Burr.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Cauchy.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Chi.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ChiSquared.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.ContinuousUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Erlang"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Erlang.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Exponential.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.FisherSnedecor.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Gamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGamma.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.InverseGaussian.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Laplace"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Laplace.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.LogNormal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Normal.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Pareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Rayleigh.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedError.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.SkewedGeneralizedT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Stable"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Stable.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.StudentT.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Triangular.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.TruncatedPareto.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case "Weibull"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.RevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        '    Row.Item(ColName) = MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                        'Next
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Row.Item(ColName) = 1 - MathNet.Numerics.Distributions.Weibull.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                End If
                            Next
                        End If
                    End If
                Case Else
                    RaiseEvent ErrorMessage("Unknown continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try

    End Sub

    'OLD VERSION! USE: Private Function AddColumn(ColName As String, ColType As String) As Boolean
    'Private Function AddCdfColumn() As Boolean
    '    'Add the CDF column to the DataTable if it does not already exist.
    '    If Data.Tables.Contains("DataTable") Then
    '        If Data.Tables("DataTable").Columns.Contains("CDF") Then
    '            'The CDF column already exists
    '            Return True
    '        Else
    '            Select Case Distrib.CdfInfo.NumType
    '                Case "Single"
    '                    Data.Tables("DataTable").Columns.Add("CDF", System.Type.GetType("System.Single"))
    '                    Return True
    '                Case "Double"
    '                    Data.Tables("DataTable").Columns.Add("CDF", System.Type.GetType("System.Double"))
    '                    Return True
    '                Case Else
    '                    RaiseEvent ErrorMessage("Invalid number type: " & Distrib.CdfInfo.NumType & vbCrLf)
    '                    RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
    '                    Return False
    '            End Select
    '        End If
    '    Else
    '        RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
    '        Return False
    '    End If
    'End Function

    'OLD VERSION!
    'Private Sub GenerateContDistribProbability(DistName As String, DistField As String)
    'Private Sub GenerateContDistribProbability()
    '    'Generate the Continuous distribution Probability data.

    '    If AddProbabilityColumn() Then
    '        Dim NRows As Integer = Data.Tables("DataTable").Rows.Count
    '        Dim I As Integer
    '        For I = 0 To NRows - 1
    '            Data.Tables("DataTable").Rows(I).Item("Probability") = I / (NRows - 1)
    '        Next
    '    End If
    'End Sub

    'OLD VERSION! USE: Private Function AddColumn(ColName As String, ColType As String) As Boolean
    'Private Function AddProbabilityColumn() As Boolean
    '    'Add the Probability column to the DataTable if it does not already exist.

    '    If Data.Tables.Contains("DataTable") Then
    '        If Data.Tables("DataTable").Columns.Contains("Probability") Then
    '            'The Probability column already exists
    '            Return True
    '        Else
    '            Select Case Distrib.ProbabilityInfo.NumType
    '                Case "Single"
    '                    Data.Tables("DataTable").Columns.Add("Probability", System.Type.GetType("System.Single"))
    '                    Return True
    '                Case "Double"
    '                    Data.Tables("DataTable").Columns.Add("Probability", System.Type.GetType("System.Double"))
    '                    Return True
    '                Case Else
    '                    RaiseEvent ErrorMessage("Invalid number type: " & Distrib.ProbabilityInfo.NumType & vbCrLf)
    '                    RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
    '                    Return False
    '            End Select
    '        End If
    '    Else
    '        RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
    '        Return False
    '    End If
    'End Function

    'Private Sub GenerateContDistribInvCdf(DistName As String, DistField As String, SampField As String)
    'Private Sub GenerateContDistribInvCdf(DistName As String)
    '    'Generate the Continuous distribution PDF data.
    '    'DistName is the name of the distribution.
    '    Dim Value As Double
    '    Try

    '        Select Case DistName
    '            Case "Beta"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Beta.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Beta.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Beta Scaled"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.BetaScaled.InvCDF(ParamA, ParamB, ParamC, ParamD, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.BetaScaled.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Burr" 'No Inverse CDF code available

    '            Case "Cauchy"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Cauchy.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Cauchy.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Chi" 'No Inverse CDF code available

    '            Case "Chi Squared"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.ChiSquared.InvCDF(ParamA, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.ChiSquared.InvCDF(Distrib.ParamA.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Continuous Uniform"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Erlang"

    '            Case "Exponential"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Exponential.InvCDF(ParamA, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Exponential.InvCDF(Distrib.ParamA.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Fisher-Snedecor"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Gamma"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Gamma.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Gamma.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Inverse Gamma" 'No Inverse CDF code available

    '            Case "Inverse Gaussian"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.InverseGaussian.ICDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.InverseGaussian.ICDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Laplace" 'No Inverse CDF code available

    '            Case "Log Normal"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.LogNormal.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.LogNormal.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Normal"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Normal.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Pareto"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Pareto.InvCDF(ParamA, ParamB, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Pareto.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Rayleigh"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Rayleigh.InvCDF(ParamA, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Rayleigh.InvCDF(Distrib.ParamA.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Skewed Generalized Error"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(ParamA, ParamB, ParamC, ParamD, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Skewed Generalized T"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(ParamA, ParamB, ParamC, ParamD, ParamE, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Distrib.ParamD.Value, Distrib.ParamE.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '        'Case "Stable" 'No Inverse CDF code available

    '            Case "Student's T"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.StudentT.InvCDF(ParamA, ParamB, ParamC, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.StudentT.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Triangular"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.Triangular.InvCDF(ParamA, ParamB, ParamC, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.Triangular.InvCDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '            Case "Truncated Pareto"
    '                If AddInvCdfColumn() Then
    '                    For Each Row As DataRow In Data.Tables("DataTable").Rows
    '                        'Row.Item("InvCDF") = MathNet.Numerics.Distributions.TruncatedPareto.ICDF(ParamA, ParamB, ParamC, Row.Item("Probability"))
    '                        Value = MathNet.Numerics.Distributions.TruncatedPareto.ICDF(Distrib.ParamA.Value, Distrib.ParamB.Value, Distrib.ParamC.Value, Row.Item("Probability"))
    '                        If Double.IsInfinity(Value) Then
    '                            Row.Item("InvCDF") = DBNull.Value
    '                        Else
    '                            Row.Item("InvCDF") = Value
    '                        End If
    '                    Next
    '                End If
    '                'Case "Weibull" 'No Inverse CDF code available

    '            Case Else
    '                RaiseEvent ErrorMessage("Unknow continuous distribution: " & DistName & vbCrLf)
    '        End Select

    '    Catch ex As Exception
    '        RaiseEvent ErrorMessage(ex.Message & vbCrLf)
    '    End Try
    'End Sub

    'OLD VERSION! USE: Private Function AddColumn(ColName As String, ColType As String) As Boolean
    'Private Function AddInvCdfColumn() As Boolean
    '    'Add the InvCdf column to the DataTable if it does not already exist.

    '    If Data.Tables.Contains("DataTable") Then
    '        If Data.Tables("DataTable").Columns.Contains("InvCDF") Then
    '            'The Probability column already exists
    '            Return True
    '        Else
    '            Select Case Distrib.InvCdfInfo.NumType
    '                Case "Single"
    '                    Data.Tables("DataTable").Columns.Add("InvCDF", System.Type.GetType("System.Single"))
    '                    Return True
    '                Case "Double"
    '                    Data.Tables("DataTable").Columns.Add("InvCDF", System.Type.GetType("System.Double"))
    '                    Return True
    '                Case Else
    '                    RaiseEvent ErrorMessage("Invalid number type: " & Distrib.InvCdfInfo.NumType & vbCrLf)
    '                    RaiseEvent ErrorMessage("Please select either Single and Double as the number type." & vbCrLf)
    '                    Return False
    '            End Select
    '        End If
    '    Else
    '        RaiseEvent ErrorMessage("The table does not exist: DataTable" & vbCrLf)
    '        Return False
    '    End If
    'End Function

    Private Sub GenerateContDistribInvCdf(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution Inverse CDF data.

        Dim Value As Double
        Dim ColName As String = DistribInfo.InvCdfInfo.Name

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Beta.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Beta Scaled"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.BetaScaled.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Burr" 'No Inverse CDF code available

                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Cauchy.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Chi" 'No Inverse CDF code available

                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.ChiSquared.InvCDF(DistribInfo.ParamA.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Erlang"

                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Exponential.InvCDF(DistribInfo.ParamA.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Gamma.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Inverse Gamma" 'No Inverse CDF code available

                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.InverseGaussian.ICDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Laplace" 'No Inverse CDF code available

                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.LogNormal.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Normal.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Pareto.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Rayleigh.InvCDF(DistribInfo.ParamA.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Stable" 'No Inverse CDF code available

                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.StudentT.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Triangular.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.TruncatedPareto.ICDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                    'Case "Weibull" 'No Inverse CDF code available

                Case Else
                    RaiseEvent ErrorMessage("Unknow continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select

        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try
    End Sub

    Private Sub GenerateContDistribInvRevCdf(DistribInfo As DistributionInfo)
        'Generate the Continuous distribution Inverse Reverse CDF data.

        Dim Value As Double
        Dim ColName As String = DistribInfo.InvRevCdfInfo.Name

        Try
            Select Case DistribInfo.Name
                Case "Beta"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        'For Each Row As DataRow In Data.Tables("DataTable").Rows
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Beta.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Beta Scaled"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.BetaScaled.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Burr" 'No Inverse CDF code available

                Case "Cauchy"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Cauchy.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Chi" 'No Inverse CDF code available

                Case "Chi Squared"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.ChiSquared.InvCDF(DistribInfo.ParamA.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Continuous Uniform"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Erlang"

                Case "Exponential"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Exponential.InvCDF(DistribInfo.ParamA.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Fisher-Snedecor"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Gamma"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Gamma.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Inverse Gamma" 'No Inverse CDF code available

                Case "Inverse Gaussian"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.InverseGaussian.ICDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Laplace" 'No Inverse CDF code available

                Case "Log Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.LogNormal.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Normal"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Normal.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Pareto.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Rayleigh"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Rayleigh.InvCDF(DistribInfo.ParamA.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Skewed Generalized Error"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.SkewedGeneralizedError.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Skewed Generalized T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.SkewedGeneralizedT.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, DistribInfo.ParamD.Value, DistribInfo.ParamE.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
            'Case "Stable" 'No Inverse CDF code available

                Case "Student's T"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.StudentT.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Triangular"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.Triangular.InvCDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                Case "Truncated Pareto"
                    If AddColumn("Continuous_Data_Table", ColName, DistribInfo.InvRevCdfInfo.NumType) Then
                        For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                            Value = MathNet.Numerics.Distributions.TruncatedPareto.ICDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, 1 - Row.Item("Probability"))
                            If Double.IsInfinity(Value) Then
                                Row.Item(ColName) = DBNull.Value
                            Else
                                Row.Item(ColName) = Value
                            End If
                        Next
                    End If
                    'Case "Weibull" 'No Inverse CDF code available

                Case Else
                    RaiseEvent ErrorMessage("Unknow continuous distribution: " & DistribInfo.Name & vbCrLf)
            End Select

        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try
    End Sub

    Public Sub GenerateDistribSamples(DistribInfo As DistributionInfo, NSamples As Integer, TableName As String)
        'Generate a set of samples from the selected distribution.
        'NSamples will be generated.
        'The samples will be placed in the "Samples" column of the table named TableName.
        'The table and column will be created if it does not already exist.

        If Data.Tables.Contains(TableName) Then
            'If Data.Tables(TableName).Columns.Contains("Samples") Then
            '    If DistribInfo.Continuity = "Continuous" Then
            '        If Data.Tables(TableName).Columns("Samples").DataType = System.Type.GetType("System.Double") Then

            '        Else
            '            Data.Tables(TableName).Columns.Remove("Samples")
            '            Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Double"))
            '        End If
            '    Else
            '        If Data.Tables(TableName).Columns("Samples").DataType = System.Type.GetType("System.Int32") Then

            '        Else
            '            Data.Tables(TableName).Columns.Remove("Samples")
            '            Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Int32"))
            '        End If
            '    End If
            '    Data.Tables(TableName).Rows.Clear()
            'Else
            '    If DistribInfo.Continuity = "Continuous" Then
            '        Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Double"))
            '    Else
            '        Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Int32"))
            '    End If
            'End If
            Data.Tables(TableName).Rows.Clear()
            Data.Tables(TableName).Columns.Clear()
            If DistribInfo.Continuity = "Continuous" Then
                Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Double"))
            Else
                Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Int32"))
            End If
        Else
            Data.Tables.Add(TableName)
            If DistribInfo.Continuity = "Continuous" Then
                Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Double"))
            Else
                Data.Tables(TableName).Columns.Add("Samples", System.Type.GetType("System.Int32"))
            End If
        End If

        Select Case DistribInfo.Name
            Case "Beta"

            Case "Beta Scaled"

            Case "Cauchy"

            Case "Chi Squared"

            Case "Continuous Uniform"

            Case "Exponential"

            Case "Fisher-Snedecor"

            Case "Gamma"

            Case "Inverse Gaussian"

            Case "Log Normal"

            Case "Normal"
                GenerateNormalSamples(DistribInfo, NSamples, TableName)
            Case "Pareto"

            Case "Rayleigh"

            Case "Skewed Generalized Error"

            Case "Skewed Generalized T"

            Case "Student's T"

            Case "Triangular"

            Case "Truncated Pareto"

            Case "Bernoulli" 'Discrete

            Case "Binomial" 'Discrete

            Case "Categorical" 'Discrete

            Case "Conway-Maxwell-Poisson" 'Discrete

            Case "Discrete Uniform" 'Discrete

            Case "Geometric" 'Discrete

            Case "Hypergeometric" 'Discrete

            Case "Negative Binomial" 'Discrete

            Case "Poisson" 'Discrete

            Case "Zipf" 'Discrete

            Case Else





        End Select

    End Sub

    'Public Sub GenerateDistribSamples(DistribInfo As DistributionInfo, NSamples As Integer, NumberType As String, Sampling As String, Seed As Integer, Replace As Boolean, Shuffle As Boolean, ColumnName As String, TableName As String)
    'Public Sub GenerateDistribSamples(DistribInfo As DistributionInfo, NSamples As Integer, NumberType As String, Sampling As String, Seed As Integer, Replace As Boolean, ColumnName As String, TableName As String)
    Public Sub GenerateDistribSamples(DistribInfo As DistributionInfo, NSamples As Integer, FromSamp As Integer, NumberType As String, Sampling As String, Seed As Integer, ColumnName As String, TableName As String)
        'Generate a set of samples from the selected distribution.
        'NSamples will be generated.
        'FromSamp - The samples will be placed in the FromSamp (one based) location.
        'The samples will be placed in the ColumnName column of the table named TableName.
        'The table and column will be created if they do not already exist.
        'NumberType (Integer, Single or Double) The type of sample values generated.
        'Sampling (Random, Latin Hypercube, Median Latin Hypercube) The type of sampling used to generate the sample values.
        'Seed If Seed is an integer >= 0 then this value will be used as the random number generator seed.
        'UPDATE - FromSamp is now used instead of Replace - Replace (True, False)  If True the existing data will be replaced. If False the new data will be appended.
        'Shuffle (True, False) If True the data will be shuffled after the new data is generated.

        If Data.Tables.Contains(TableName) Then

        Else
            Data.Tables.Add(TableName)
        End If

        If Data.Tables(TableName).Columns.Contains(ColumnName) Then
            'If Data.Tables(TableName).Columns(ColumnName).DataType.ToString = NumberType Then 'DataType.ToString = System.Single  NumberType = Single NO MATCH!!!
            If Data.Tables(TableName).Columns(ColumnName).DataType.Name = NumberType Then

            Else
                'Select Case NumberType
                '    Case "Int16"
                '        Data.Tables(TableName).Columns(ColumnName).DataType = System.Type.GetType("System.Int16")
                '    Case "Int32"
                '        Data.Tables(TableName).Columns(ColumnName).DataType = System.Type.GetType("System.Int32")
                '    Case "Single"
                '        Data.Tables(TableName).Columns(ColumnName).DataType = System.Type.GetType("System.Single")
                '    Case "Double"
                '        Data.Tables(TableName).Columns(ColumnName).DataType = System.Type.GetType("System.Double")
                'End Select
                'NOTE: Cannot change to data type of a column once it has data!!!
                Data.Tables(TableName).Columns.Remove(ColumnName)
                CreateNewColumn(TableName, ColumnName, NumberType)
            End If
        Else
            CreateNewColumn(TableName, ColumnName, NumberType)
        End If

        'Dim FirstRow As Integer
        'If Replace() Then
        '    FirstRow = 0
        '    Data.Tables(TableName).Rows.Clear()
        'Else
        '    FirstRow = Data.Tables(TableName).Rows.Count
        'End If

        Select Case DistribInfo.Name
            Case "Beta"

            Case "Beta Scaled"

                    'Case "Burr"

            Case "Cauchy"


            Case "Chi Squared"


            Case "Continuous Uniform"


            Case "Exponential"


            Case "Fisher-Snedecor"


            Case "Gamma"


            Case "CInverse Gaussian"
                         'NOTE: There appears to be an error in the Math.Net Inverse Gaussian InvCDF function!!!

            Case "Log Normal"


            Case "Normal"
                'GenerateNormalSamples(TableName, ColumnName, Sampling, NSamples, FirstRow, Seed, DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)
                GenerateNormalSamples(TableName, ColumnName, Sampling, NSamples, FromSamp, Seed, DistribInfo.ParamA.Value, DistribInfo.ParamB.Value)

            Case "Pareto"


            Case "Rayleigh"


            Case "Skewed Generalized Error"


            Case "Skewed Generalized T"


            Case "Student's T"


            Case "Triangular"


            Case "C3 - Truncated Pareto"
                         'NOTE: There appears to be an error in the Math.Net Truncated Pareto InvCDF function!!!

            Case "Bernoulli"


            Case "Binomial"


                   'Case "D1 - Categorical" 'TO DO!

            Case "Conway-Maxwell-Poisson"

            Case "Discrete Uniform"


            Case "Geometric"


            Case "Hypergeometric"


            Case "Negative Binomial"


            Case "Poisson"


            Case "Zipf"


            Case Else
                RaiseEvent ErrorMessage("Unknown distribution name: " & DistribInfo.Name & vbCrLf)
        End Select


    End Sub


    Private Sub GenerateDiscData(DistribInfo As DistributionInfo)
        'Generate the data for a discrete distribution.

        'Generate the PMF data
        If DistribInfo.PmfInfo.Generate And DistribInfo.PmfInfo.Valid Then
            GenerateDiscDistribPmf(DistribInfo)
        End If

        'Generate the PMF Ln data
        If DistribInfo.PmfLnInfo.Generate And DistribInfo.PmfLnInfo.Valid Then
            GenerateDiscDistribPmfLn(DistribInfo)
        End If

        'Generate the CDF data
        If DistribInfo.CdfInfo.Generate And DistribInfo.CdfInfo.Valid Then
            GenerateDiscDistribCdf(DistribInfo)
        End If

        'Generate the RevCDF data
        If DistribInfo.RevCdfInfo.Generate And DistribInfo.RevCdfInfo.Valid Then
            GenerateDiscDistribRevCdf(DistribInfo)
        End If

        'Generate the Inverse CDF data
        If DistribInfo.InvCdfInfo.Generate And DistribInfo.InvCdfInfo.Valid Then
            'GenerateDiscDistribInvCdf(DistribInfo) 'NOT YET CODED
        End If

        'Generate the Inverse Reverse CDF data
        If DistribInfo.InvRevCdfInfo.Generate And DistribInfo.InvRevCdfInfo.Valid Then
            'GenerateDiscDistribInvRevCdf(DistribInfo) 'NOT YET CODED
        End If
    End Sub

    Private Sub GenerateDiscDistribPmf(DistribInfo As DistributionInfo)
        'Generate the Discrete distribution PMF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.PmfInfo.Name
        Dim Value As Double

        Try
            Select Case DistribInfo.Name
                Case "Bernoulli"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Categorical"
                    RaiseEvent ErrorMessage("The Categorical distribution has not yet been implemented." & vbCrLf)

                Case "Conway-Maxwell-Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Discrete Uniform"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Geometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Hypergeometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Negative Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Zipf"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case Else
                    RaiseEvent ErrorMessage("Unknown discrete distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage("DistributionModel-GenerateDiscDistribPmf: " & ex.Message & vbCrLf)
        End Try

    End Sub

    Private Sub GenerateDiscDistribPmfLn(DistribInfo As DistributionInfo)
        'Generate the Discrete distribution PMF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.PmfLnInfo.Name
        Dim Value As Double

        Try
            Select Case DistribInfo.Name
                Case "Bernoulli"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfLnInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        End If
                    End If

                Case "Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Categorical"
                    RaiseEvent ErrorMessage("The Categorical distribution has not yet been implemented." & vbCrLf)

                Case "Conway-Maxwell-Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Discrete Uniform"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Geometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Hypergeometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Negative Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.PMFLn(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Zipf"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.PMFLn(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case Else
                    RaiseEvent ErrorMessage("Unknown discrete distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try

    End Sub

    Private Sub GenerateDiscDistribCdf(DistribInfo As DistributionInfo)
        'Generate the Discrete distribution CDF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.CdfInfo.Name
        Dim Value As Double

        Try
            Select Case DistribInfo.Name
                Case "Bernoulli"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        End If
                    End If

                Case "Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Categorical"
                    RaiseEvent ErrorMessage("The Categorical distribution has not yet been implemented." & vbCrLf)

                Case "Conway-Maxwell-Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Discrete Uniform"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Geometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Hypergeometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Negative Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Zipf"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case Else
                    RaiseEvent ErrorMessage("Unknown discrete distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try

    End Sub

    Private Sub GenerateDiscDistribRevCdf(DistribInfo As DistributionInfo)
        'Generate the Discrete distribution CDF data.

        Dim Range As New DistribRange
        Range = GetRange(DistribInfo)

        Dim ColName As String = DistribInfo.RevCdfInfo.Name
        Dim Value As Double

        Try
            Select Case DistribInfo.Name
                Case "Bernoulli"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.CdfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Bernoulli.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next

                        End If
                    End If

                Case "Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Binomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Categorical"
                    RaiseEvent ErrorMessage("The Categorical distribution has not yet been implemented." & vbCrLf)

                Case "Conway-Maxwell-Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Discrete Uniform"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.DiscreteUniform.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Geometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Geometric.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Hypergeometric"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Hypergeometric.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, DistribInfo.ParamC.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Negative Binomial"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.NegativeBinomial.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Poisson"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Poisson.CDF(DistribInfo.ParamA.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case "Zipf"
                    'Add the specified column to the DataTable if it does not already exist:
                    If AddColumn("Discrete_Data_Table", ColName, DistribInfo.PmfInfo.NumType) Then
                        If Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Range.MinInclusive And Not Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") < Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        ElseIf Not Range.MinInclusive And Range.MaxInclusive Then
                            For Each Row As DataRow In Data.Tables("Discrete_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") > Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        Else
                            For Each Row As DataRow In Data.Tables("Continuous_Data_Table").Rows
                                If Row.Item("Value") <= Range.Minimum Then
                                    Row.Item(ColName) = DBNull.Value
                                ElseIf Row.Item("Value") >= Range.Maximum Then
                                    Row.Item(ColName) = DBNull.Value
                                Else
                                    Value = 1 - MathNet.Numerics.Distributions.Zipf.CDF(DistribInfo.ParamA.Value, DistribInfo.ParamB.Value, Row.Item("Value"))
                                    If Double.IsInfinity(Value) Then
                                        Row.Item(ColName) = DBNull.Value
                                    Else
                                        Row.Item(ColName) = Value
                                    End If
                                End If
                            Next
                        End If
                    End If

                Case Else
                    RaiseEvent ErrorMessage("Unknown discrete distribution: " & DistribInfo.Name & vbCrLf)
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage(ex.Message & vbCrLf)
        End Try

    End Sub

    Public Sub ShuffleColumn(ByVal TableName As String, ColumnName As String)
        'Randomly shuffle the specified column.
        If Data.Tables.Contains(TableName) Then
            If Data.Tables(TableName).Columns.Contains(ColumnName) Then
                Dim myRandom As New Random
                Dim Temp As Double
                Dim RowNo As Integer
                Dim RandRow As Integer
                Dim LastRowNo As Integer = Data.Tables(TableName).Rows.Count - 1
                For RowNo = 0 To LastRowNo - 1
                    Temp = Data.Tables(TableName).Rows(RowNo).Item(ColumnName) 'Temporarily save the ColumnName value in the current RowNo 
                    'Temp = Data.Tables(TableName).Rows(RowNo).Item("[" & ColumnName & "]") 'Temporarily save the ColumnName value in the current RowNo 
                    RandRow = CInt((LastRowNo - RowNo) * myRandom.NextDouble + RowNo) 'Randomly select a row number from the remaining rows. 
                    Data.Tables(TableName).Rows(RowNo).Item(ColumnName) = Data.Tables(TableName).Rows(RandRow).Item(ColumnName) 'Put the value in the Random Row at the current RowNo
                    'Data.Tables(TableName).Rows(RowNo).Item("[" & ColumnName & "]") = Data.Tables(TableName).Rows(RandRow).Item("[" & ColumnName & "]") 'Put the value in the Random Row at the current RowNo
                    Data.Tables(TableName).Rows(RandRow).Item(ColumnName) = Temp 'Put the saved RowNo value at the RandRow position
                    'Data.Tables(TableName).Rows(RandRow).Item("[" & ColumnName & "]") = Temp 'Put the saved RowNo value at the RandRow position
                Next
            Else
                RaiseEvent ErrorMessage("A column named " & ColumnName & " was not found." & vbCrLf)
            End If
        Else
            RaiseEvent ErrorMessage("A table named " & TableName & " was not found." & vbCrLf)
        End If
    End Sub

    Public Sub CreateNewColumn(ByVal TableName As String, ByVal ColumnName As String, ByVal DataType As String)
        'Create a new Column named ColumnName in the Table named TableName.
        If Data.Tables.Contains(TableName) Then
            If Data.Tables(TableName).Columns.Contains(ColumnName) Then
                RaiseEvent ErrorMessage("The table " & TableName & " already contains a column named " & ColumnName & vbCrLf)
            Else
                Select Case DataType
                    Case "Boolean"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Boolean"))
                    Case "Byte"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Byte"))
                    Case "Char"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Char"))
                    Case "DateTime"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.DateTime"))
                    Case "Decimal"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Decimal"))
                    Case "Double"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Double"))
                    Case "Int16"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Int16"))
                    Case "Int32"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Int32"))
                    Case "Int64"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Int64"))
                    Case "SByte"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.SByte"))
                    Case "Single"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.Single"))
                    Case "String"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.String"))
                    Case "TimeSpan"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.TimeSpan"))
                    Case "UInt16"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.UInt16"))
                    Case "UInt32"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.UInt32"))
                    Case "UInt64"
                        Data.Tables(TableName).Columns.Add(ColumnName, System.Type.GetType("System.UInt64"))
                    Case Else
                        RaiseEvent ErrorMessage("Unknown column data type: " & DataType & vbCrLf)
                End Select
            End If
        Else
            RaiseEvent ErrorMessage("The table does not exist: " & TableName & vbCrLf)
        End If
    End Sub

    Private Sub GenerateNormalSamples(DistribInfo As DistributionInfo, NSamples As Integer, TableName As String)
        'Generate Normal distribution data in the Specified Table.

        Dim Trial As Integer 'Loop index
        Dim PVal As Double 'The probability value passed to an InvCDF function.
        Dim SampVal As Double 'A sampled value returned by an InvCDF function at a specified PVal probability value.
        Dim ValidVal As Boolean 'True if the InvCDF function has returned a valid value.
        Dim Attempts As Integer 'The number of attempts to get a valid value

        Dim myRandom As New Random
        Dim ParamA As Double = DistribInfo.ParamA.Value
        Dim ParamB As Double = DistribInfo.ParamB.Value

        Dim I As Integer

        'This code rejects the rare cases where an invalid  distribution value is produced. Up to 100 attempts will be made at each sample point to obtain a valid sample value.
        'For Each Row As DataRow In Data.Tables(TableName).Rows
        For I = 0 To NSamples - 1
            ValidVal = False
            Attempts = 0
            While ValidVal = False
                Try
                    Attempts += 1
                    SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, myRandom.NextDouble)
                    If SampVal = Double.NaN Then
                        ValidVal = False
                    ElseIf SampVal = Double.PositiveInfinity Then
                        ValidVal = False
                    ElseIf SampVal = Double.NegativeInfinity Then
                        ValidVal = False
                    Else
                        'Row.Item(ColumnName) = SampVal
                        'Row.Item("Samples") = SampVal
                        Data.Tables(TableName).Rows.Add(SampVal)
                        ValidVal = True
                    End If
                    If Attempts > 100 Then
                        RaiseEvent ErrorMessage("100 attempts to find a valid sample value for the variable: " & "Samples" & " in table " & TableName & " have failed." & vbCrLf)
                        RaiseEvent ErrorMessage("The value for " & "Samples" & " has not been generated." & vbCrLf)
                        Exit While
                    End If
                Catch ex As Exception
                End Try
            End While
        Next I

    End Sub

    'Private Sub GenerateNormalSamples(ByVal TableName As String, ByVal ColumnName As String, Sampling As String, NTrials As Integer, FirstRow As Integer, Seed As Integer, ParamA As Double, ParamB As Double)
    Private Sub GenerateNormalSamples(ByVal TableName As String, ByVal ColumnName As String, Sampling As String, NSamples As Integer, FromSamp As Integer, Seed As Integer, ParamA As Double, ParamB As Double)
        'Generate Normal distribution data in the Specified Table and Column.
        'The Mean and Variance parameters are contained in the ParamA and ParamB variables.
        'FirstRow is the zero-based first row to start placing the data.

        'Add any required additional rows to the table to received the data:
        Dim NRows As Integer = Data.Tables(TableName).Rows.Count
        Dim I As Integer
        'For I = NRows + 1 To NTrials
        For I = NRows + 1 To FromSamp - 1 + NSamples
            Data.Tables(TableName).Rows.Add()
        Next

        Dim Trial As Integer 'Loop index
        Dim PVal As Double 'The probability value passed to an InvCDF function.
        Dim SampVal As Double 'A sampled value returned by an InvCDF function at a specified PVal probability value.
        Dim ValidVal As Boolean 'True if the InvCDF function has returned a valid value.
        Dim Attempts As Integer 'The number of attempts to get a valid value
        Dim RowNo As Integer

        'If Double.IsNaN(Seed) Then Randomize() Else Randomize(Seed) 'If a Seed is used, the random numbers are repeatable.

        Select Case Sampling
            Case "N/A"
                RaiseEvent ErrorMessage("Selected sampling is N/A." & vbCrLf)
            Case "Random"
                'This code rejects the rare cases where an invalid  distribution value is produced. Up to 100 attempts will be made at each sample point to obtain a valid sample value.
                Dim myRandom As Random
                If Seed = -1 Then
                    myRandom = New Random 'This starts a new random sequence using a seed based on the time
                Else
                    myRandom = New Random(Seed) 'This starts a new random sequence using the specified seed.
                End If
                'For Each Row As DataRow In Data.Tables(TableName).Rows
                'For RowNo = FirstRow To FirstRow + NTrials - 1
                For RowNo = FromSamp - 1 To FromSamp + NSamples - 2
                    ValidVal = False
                    Attempts = 0
                    While ValidVal = False
                        Try
                            Attempts += 1
                            SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, myRandom.NextDouble)
                            If SampVal = Double.NaN Then
                                ValidVal = False
                            ElseIf SampVal = Double.PositiveInfinity Then
                                ValidVal = False
                            ElseIf SampVal = Double.NegativeInfinity Then
                                ValidVal = False
                            Else
                                'Row.Item(ColumnName) = SampVal
                                Data.Tables(TableName).Rows(RowNo).Item(ColumnName) = SampVal
                                ValidVal = True
                            End If
                            If Attempts > 100 Then
                                RaiseEvent ErrorMessage("100 attempts to find a valid sample value for the variable: " & ColumnName & " in table " & TableName & " have failed." & vbCrLf)
                                RaiseEvent ErrorMessage("The value for " & ColumnName & " has not been generated." & vbCrLf)
                                Exit While
                            End If
                        Catch ex As Exception
                        End Try
                    End While
                Next

            Case "Latin Hypercube"
                Dim myRandom As Random
                If Seed = -1 Then
                    myRandom = New Random 'This starts a new random sequence using a seed based on the time
                Else
                    myRandom = New Random(Seed) 'This starts a new random sequence using the specified seed.
                End If
                'Get the first value - checking that the InvCDF function returns a valid value
                ValidVal = False
                Attempts = 0
                While ValidVal = False
                    Try
                        Attempts += 1
                        'PVal = myRandom.NextDouble / NTrials 'Select a random probability number between 0 and 1 / NTrials
                        PVal = myRandom.NextDouble / NSamples 'Select a random probability number between 0 and 1 / NTrials
                        SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal) 'Attempt to get a valid distribution value corresponding to PVal
                        ValidVal = True
                    Catch ex As Exception
                        If Attempts > 100 Then
                            RaiseEvent ErrorMessage("100 attempts to find a valid first Latin Hypercube sample value for the variable: " & ColumnName & " in table " & TableName & " have failed." & vbCrLf)
                            RaiseEvent ErrorMessage("The first value for " & ColumnName & " has not been generated." & vbCrLf)
                            Exit While
                        End If
                    End Try
                    If SampVal = Double.NaN Then
                        ValidVal = False
                    ElseIf SampVal = Double.PositiveInfinity Then
                        ValidVal = False
                        'ElseIf Double.NegativeInfinity Then
                    ElseIf SampVal = Double.NegativeInfinity Then
                        ValidVal = False
                    Else
                        Data.Tables(TableName).Rows(0).Item(ColumnName) = SampVal
                        ValidVal = True
                    End If
                End While

                'Get the intermediate values - the InvCDF function should be able to return valid values for these
                'For Trial = 2 To NTrials - 1
                'For Trial = 2 To NSamples - 1
                For Trial = FromSamp To FromSamp + NSamples - 3
                    'PVal = (myRandom.NextDouble + Trial - 1) / NTrials
                    PVal = (myRandom.NextDouble + Trial - 1) / NSamples
                    Data.Tables(TableName).Rows(Trial - 1).Item(ColumnName) = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal)
                Next

                'Get the last value - checking that the InvCDF function returns a valid value
                ValidVal = False
                Attempts = 0
                While ValidVal = False
                    Try
                        Attempts += 1
                        'PVal = (myRandom.NextDouble + NTrials - 1) / NTrials 'Select a random probability number between (NTrials - 1) / NTrials  and 1 
                        PVal = (myRandom.NextDouble + NSamples - 1) / NSamples 'Select a random probability number between (NTrials - 1) / NTrials  and 1 
                        SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal) 'Attempt to get a valid distribution value corresponding to PVal
                        ValidVal = True
                    Catch ex As Exception
                        If Attempts > 100 Then
                            RaiseEvent ErrorMessage("100 attempts to find a valid last Latin Hypercube sample value for the variable: " & ColumnName & " in table " & TableName & " have failed." & vbCrLf)
                            RaiseEvent ErrorMessage("The last value for " & ColumnName & " has not been generated." & vbCrLf)
                            Exit While
                        End If
                    End Try
                    If SampVal = Double.NaN Then
                        ValidVal = False
                    ElseIf SampVal = Double.PositiveInfinity Then
                        ValidVal = False
                    ElseIf SampVal = Double.NegativeInfinity Then
                        ValidVal = False
                    Else
                        'Data.Tables(TableName).Rows(NTrials - 1).Item(ColumnName) = SampVal
                        Data.Tables(TableName).Rows(NSamples - 1).Item(ColumnName) = SampVal
                        ValidVal = True
                    End If
                End While
                ShuffleColumn(TableName, ColumnName)

            Case "Sorted Latin Hypercube"
                Dim myRandom As Random
                If Seed = -1 Then
                    myRandom = New Random 'This starts a new random sequence using a seed based on the time
                Else
                    myRandom = New Random(Seed) 'This starts a new random sequence using the specified seed.
                End If
                'Get the first value - checking that the InvCDF function returns a valid value
                ValidVal = False
                Attempts = 0
                While ValidVal = False
                    Try
                        Attempts += 1
                        'PVal = myRandom.NextDouble / NTrials 'Select a random probability number between 0 and 1 / NTrials
                        PVal = myRandom.NextDouble / NSamples 'Select a random probability number between 0 and 1 / NTrials
                        SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal) 'Attempt to get a valid distribution value corresponding to PVal
                        ValidVal = True
                    Catch ex As Exception
                        If Attempts > 100 Then
                            RaiseEvent ErrorMessage("100 attempts to find a valid first Latin Hypercube sample value for the variable: " & ColumnName & " in table " & TableName & " have failed." & vbCrLf)
                            RaiseEvent ErrorMessage("The first value for " & ColumnName & " has not been generated." & vbCrLf)
                            Exit While
                        End If
                    End Try
                    If SampVal = Double.NaN Then
                        ValidVal = False
                    ElseIf SampVal = Double.PositiveInfinity Then
                        ValidVal = False
                    ElseIf SampVal = Double.NegativeInfinity Then
                        ValidVal = False
                    Else
                        Data.Tables(TableName).Rows(0).Item(ColumnName) = SampVal
                        ValidVal = True
                    End If
                End While

                'Get the intermediate values - the InvCDF function should be able to return valid values for these
                'For Trial = 2 To NTrials - 1
                'For Trial = 2 To NSamples - 1
                For Trial = FromSamp To FromSamp + NSamples - 3
                    'PVal = (myRandom.NextDouble + Trial - 1) / NTrials
                    PVal = (myRandom.NextDouble + Trial - 1) / NSamples
                    Data.Tables(TableName).Rows(Trial - 1).Item(ColumnName) = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal)
                Next

                'Get the last value - checking that the InvCDF function returns a valid value
                ValidVal = False
                Attempts = 0
                While ValidVal = False
                    Try
                        Attempts += 1
                        'PVal = (myRandom.NextDouble + NTrials - 1) / NTrials 'Select a random probability number between (NTrials - 1) / NTrials  and 1 
                        PVal = (myRandom.NextDouble + NSamples - 1) / NSamples 'Select a random probability number between (NTrials - 1) / NTrials  and 1 
                        SampVal = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal) 'Attempt to get a valid distribution value corresponding to PVal
                        ValidVal = True
                    Catch ex As Exception
                        If Attempts > 100 Then
                            RaiseEvent ErrorMessage("100 attempts to find a valid last Latin Hypercube sample value for the variable: " & ColumnName & " in table " & TableName & " have failed." & vbCrLf)
                            RaiseEvent ErrorMessage("The last value for " & ColumnName & " has not been generated." & vbCrLf)
                            Exit While
                        End If
                    End Try
                    If SampVal = Double.NaN Then
                        ValidVal = False
                    ElseIf SampVal = Double.PositiveInfinity Then
                        ValidVal = False
                    ElseIf SampVal = Double.NegativeInfinity Then
                        ValidVal = False
                    Else
                        Data.Tables(TableName).Rows(NSamples - 1).Item(ColumnName) = SampVal
                        ValidVal = True
                    End If
                End While

            Case "Median Latin Hypercube"
                'For Trial = 1 To NTrials
                'For Trial = 1 To NSamples
                For Trial = FromSamp - 1 To FromSamp + NSamples - 2
                    'PVal = (Trial - 0.5) / NTrials
                    PVal = (Trial - 0.5) / NSamples
                    Data.Tables(TableName).Rows(Trial - 1).Item(ColumnName) = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal)
                Next
                ShuffleColumn(TableName, ColumnName)

            Case "Sorted Median Latin Hypercube"
                'For Trial = 1 To NTrials
                'For Trial = 1 To NSamples
                For Trial = FromSamp - 1 To FromSamp + NSamples - 2
                    'PVal = (Trial - 0.5) / NTrials
                    PVal = (Trial - 0.5) / NSamples
                    Data.Tables(TableName).Rows(Trial - 1).Item(ColumnName) = MathNet.Numerics.Distributions.Normal.InvCDF(ParamA, ParamB, PVal)
                Next

            Case Else
                RaiseEvent ErrorMessage("Unknown sampling: " & Sampling & vbCrLf)

        End Select
    End Sub

    Private Sub GenerateDistInfo()
        'Populate the XmlList XDoc with the distribution information.
        XmlList = <?xml version="1.0" encoding="utf-8"?>
                  <DistributionList>
                      <!--The Bernoulli Distribution-->
                      <Distribution>
                          <Name>Bernoulli</Name>
                          <Description>A discrete probability distribution of a random variable that takes the value of 1 with probability p and the value of 0 with probability q = 1 - p. </Description>
                          <Usage>Used in medicine to design and analyse clinical trials. A bernoulli distribution is used to model a person experiencing an event such as death, a disease or disease exposure.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Bernoulli_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Bernoulli.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/BernoulliDistribution.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/bernoulli-distribution/</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>1</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>1</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Probability</Type>
                                  <Name>P success</Name>
                                  <Symbol>p</Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>Probability of generating 1</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>1</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternatePrameters>0</NAlternatePrameters>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>x</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Beta Distribution-->
                      <Distribution>
                          <Name>Beta</Name>
                          <Description>A continuous probability distribution with two parameters. Defined on the interval 0 to 1 inclusive. Used to model a probability distribution of probabilities.</Description>
                          <Usage>Can be used to analyse sport statistics such as baseball batting averages.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Beta_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Beta.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/BetaDistribution.html</InformationLink>
                          <InformationLink>https://towardsdatascience.com/beta-distribution-intuition-examples-and-derivation-cf00f4db57af</InformationLink>
                          <InformationLink>https://www.itl.nist.gov/div898/handbook/eda/section3/eda366h.htm</InformationLink>
                          <InformationLink>http://varianceexplained.org/statistics/beta_distribution_and_baseball/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>1</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>1</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>a</Abbreviation>
                                  <Description>A shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>b</Abbreviation>
                                  <Description>A shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Beta Scaled Distribution-->
                      <Distribution>
                          <Name>Beta Scaled</Name>
                          <Description>A version of the Beta distribtion with an additional two parameters that extend the range of the distribution beyond the 0 to 1 range of the Beta distribution.</Description>
                          <Usage></Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Beta_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/BetaScaled.htm</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>1</DefaultMax>
                          </XValueRange>
                          <NParameters>4</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>a</Abbreviation>
                                  <Description>A shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>b</Abbreviation>
                                  <Description>A shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Default>1</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterC>
                              <ParameterD>
                                  <Type>Scale</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterD>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Binomial Distribution-->
                      <Distribution>
                          <Name>Binomial</Name>
                          <Description>The discrete probability distribution of the number of successes in a sequence of independent experiments with binary outcomes. The two distribution parameter are n (number of experiments) and p (the probability of success).</Description>
                          <Usage>Used in situations where the number of tials (or observations) is fixed, each trial is independent and the probability of success is the same for each trial. Usage examples include the analysis of a drug treatment or analysis of a lottery.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Binomial_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Binomial.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/BinomialDistribution.html</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>32</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Probability</Type>
                                  <Name>P success</Name>
                                  <Symbol>p</Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>Probability of success.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>1</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Number</Type>
                                  <Name>No. trials</Name>
                                  <Symbol>N</Symbol>
                                  <Abbreviation>n</Abbreviation>
                                  <Description>Number of Bernoulli trials.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>32</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>100</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>x</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Burr Distribution-->
                      <Distribution>
                          <Name>Burr</Name>
                          <Description>Three parameter continuous distribution with a flexible shape and controllable scale.</Description>
                          <Usage>Used to model houshold income, crop prices, travel time, flood levels and failure data.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Burr_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Burr.htm</InformationLink>
                          <InformationLink>https://www.mathworks.com/help/stats/burr-type-xii-distribution.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/burr-distribution/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>3</DefaultMax>
                          </XValueRange>
                          <NParameters>3</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>a</Abbreviation>
                                  <Description>The scale parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>c</Name>
                                  <Symbol>c</Symbol>
                                  <Abbreviation>c</Abbreviation>
                                  <Description>The first shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>k</Abbreviation>
                                  <Description>The second shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Categorical Distribution-->
                      <Distribution>
                          <Name>Categorical</Name>
                          <Description>The discrete distribution of a categorical random variable.</Description>
                          <Usage>Used to analyse categorical data such as age, race, sex or educational level.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Categorical_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Categorical.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/categorical-distribution/</InformationLink>
                          <InformationLink>http://bois.caltech.edu/distribution_explorer/discrete/categorical.html</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>1</DefaultMin>
                              <DefaultMax>4</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Array of ratios</Type>
                                  <Name>Probability Mass</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>probMass</Abbreviation>
                                  <Description>An array of non-negative ratios. This array does not need to be normalized as this is often impossible using floating point arithmetic.</Description>
                                  <NumberType>Real()</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>1</Maximum>
                                  <Increment>0.1</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Category</Description>
                                      <Label>k</Label>
                                      <Units>Category</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Category</Description>
                                      <Label>k</Label>
                                      <Units>Category</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Category</Description>
                                      <Label>x</Label>
                                      <Units>Category</Units>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Cauchy Distribution-->
                      <Distribution>
                          <Name>Cauchy</Name>
                          <Alias>Lorenz</Alias>
                          <Alias>Lorenzian</Alias>
                          <Description>The distribution of the x intercept of a ray emitted from a point. The mean and variance of this distribution do not exist.</Description>
                          <Usage>Used in robustness studies, to model the ratio of two normal random variables and has been used to model situations in physics.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Cauchy_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Cauchy.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/cauchy-distribution-2/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>-5</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>x0</Name>
                                  <Symbol>X0</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>gamma</Name>
                                  <Symbol>Gamma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution. Half-width at half-maximum.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>1</NAlternateParameterSets>
                          <Alternate1>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>x0</Name>
                                  <Symbol>X0</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <Default>0</Default>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>2gamma</Name>
                                  <Symbol>2Gamma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution. Full-width at half-maximum.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Alternate1>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Chi Distribution-->
                      <Distribution>
                          <Name>Chi</Name>
                          <Description>The distribution of the positive square root of the sum of squares of a set of independent random variables.</Description>
                          <Usage></Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Chi_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Chi.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/ChiDistribution.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>4</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Freedom</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>freedom</Abbreviation>
                                  <Description>The degrees of freedom of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Chi Squared Distribution-->
                      <Distribution>
                          <Name>Chi Squared</Name>
                          <Alias>Chi Square</Alias>
                          <Description>The sum of the squares of k independent standard normal random variables.</Description>
                          <Usage>The distribution is widely used in inferential statistics.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Chi-square_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/ChiSquared.htm</InformationLink>
                          <InformationLink></InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0 or gt 0 if k eq 1</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>8</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Freedom</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>freedom</Abbreviation>
                                  <Description>The degrees of freedom of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>3</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Continuous Uniform Distribution-->
                      <Distribution>
                          <Name>Continuous Uniform</Name>
                          <Alias>Rectangular</Alias>
                          <Description>Distribution corresponding to an experiment with arbitrary outcomes between certain bounds.</Description>
                          <Usage>Situations where we have no knowledge of the likely value of a random variable within a range, such as the position of an air molecule in a room or the position of a puncture in a tyre.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/ContinuousUniform.htm</InformationLink>
                          <InformationLink>https://blog.palisade.com/2008/12/23/uses-of-the-uniform-continuous-distribution/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>4</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>a</Name>
                                  <Symbol>a</Symbol>
                                  <Abbreviation>lower</Abbreviation>
                                  <Description>Lower value</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>b</Name>
                                  <Symbol>b</Symbol>
                                  <Abbreviation>upper</Abbreviation>
                                  <Description>Upper value</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>a</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>3</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Conway Maxwell Poisson Distribution-->
                      <Distribution>
                          <Name>Conway-Maxwell-Poisson</Name>
                          <Description>A generalization of the Poisson, Geometric and Bernoulli distributions.</Description>
                          <Usage>Used for analysing queueing systems.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/ConwayMaxwellPoisson.htm</InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>16</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>lambda</Abbreviation>
                                  <Description>The lambda parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>3</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>nu</Name>
                                  <Symbol>Nu</Symbol>
                                  <Abbreviation>nu</Abbreviation>
                                  <Description>The rate of decay.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Discrete Uniform Distribution-->
                      <Distribution>
                          <Name>Discrete Uniform</Name>
                          <Description>The probability distribution for a finite number of values equally likely to be observed.</Description>
                          <Usage>Can be used to analyse lotteries or card games.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Discrete_uniform_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/DiscreteUniform.htm</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>a</Name>
                                  <Symbol>a</Symbol>
                                  <Abbreviation>lower</Abbreviation>
                                  <Description>Lower value, inclusive.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>b</Name>
                                  <Symbol>b</Symbol>
                                  <Abbreviation>upper</Abbreviation>
                                  <Description>Upper value, inclusive.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>a</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>4</Default>
                                  <AdjustMin>-0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Erlang Distribution-->
                      <Distribution>
                          <Name>Erlang</Name>
                          <Description>The Erlang distribution is a generalization of the exponential distribution. </Description>
                          <Usage>Used in the study of telecommunication networks and queueing systems.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Erlang_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Erlang.htm</InformationLink>
                          <InformationLink>https://www.sciencedirect.com/topics/mathematics/erlang-random-variable</InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>20</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>The shape parameter.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>1</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>1</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Rate</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>rate</Abbreviation>
                                  <Description>The rate or inverse scale.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>1</NAlternateParameterSets>
                          <Alternate1>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>The shape parameter.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>1</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>1</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>Reciprocal of the rate</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Alternate1>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Exponential Distribution-->
                      <Distribution>
                          <Name>Exponential</Name>
                          <Description>The distribution of the time between events that occur continuously and independently at a constant average rate (a Poisson point process).</Description>
                          <Usage>Used in reliability analysis to model data with a constant failure rate.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Exponential_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Exponential.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/ExponentialDistribution.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Rate</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>rate</Abbreviation>
                                  <Description>The rate parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>1</NAlternateParameterSets>
                          <Alternate1>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>Inverse of rate.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                          </Alternate1>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Fisher Snedecor Distribution-->
                      <Distribution>
                          <Name>Fisher-Snedecor</Name>
                          <Alias>F</Alias>
                          <Alias>Shedecor's F</Alias>
                          <Description>Used for hypothesis testing  with the comparison of variances between two samples. Also used to test if one model is statistically better than another.</Description>
                          <Usage>Used to test whether two independent samples have been drawn from normal populations with the same variance.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/F-distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/FisherSnedecor.htm</InformationLink>
                          <InformationLink>https://wiki.analytica.com/index.php?title=F-distribution</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt 0 if d1 eq 1 else 0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>d1</Name>
                                  <Symbol>d1</Symbol>
                                  <Abbreviation>d1</Abbreviation>
                                  <Description>The first degree of freedom.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>d2</Name>
                                  <Symbol>d2</Symbol>
                                  <Abbreviation>d2</Abbreviation>
                                  <Description>The second degree of freedom.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Gamma Distribution-->
                      <Distribution>
                          <Name>Gamma</Name>
                          <Description>A continuous, positive-only unimodal distribution.</Description>
                          <Usage>Widely used in engineering, science and business to model continuous variables that are always positive and have skewed distributions. Used for modelling waiting times between events that are Poisson distributed. </Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Gamma_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Gamma.htm</InformationLink>
                          <InformationLink>https://wiki.analytica.com/index.php?title=Gamma_distribution</InformationLink>
                          <InformationLink>https://alexpghayes.github.io/distributions3/reference/gamma.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt 0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>20</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Rate</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>rate</Abbreviation>
                                  <Description>The rate or inverse scale.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>2</NAlternateParameterSets>
                          <Alternate1>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>theta</Name>
                                  <Symbol>Theta</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>Inverse of rate or scale.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterB>
                          </Alternate1>
                          <Alternate2>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol>k</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Mean</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>mean</Abbreviation>
                                  <Description>k * Theta or Alpha / Beta (shape * scale or shape / rate)</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>4</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Alternate2>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Geometric Distribution-->
                      <Distribution>
                          <Name>Geometric</Name>
                          <Description>The probability distribution of the number of Bernoulli trials needed to get one success. A Bernoulli trial has two possible outcomes, success or failure, with a constant probability of success.</Description>
                          <Usage>Useful for modelling situations where we want to know how many attempts are likely to be needed for success. Used in population modelling and economics.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Geometric_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Geometric.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/GeometricDistribution.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/geometric-distribution/</InformationLink>
                          <InformationLink>https://www.rdocumentation.org/packages/distributions3/versions/0.1.1/topics/Geometric</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>1</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>1</DefaultMin>
                              <DefaultMax>10</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Probability</Type>
                                  <Name>P success</Name>
                                  <Symbol>p</Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>The probability of generating 1</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>1</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Number of trials</Description>
                                      <Label>k</Label>
                                      <Units>Trials</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Number of trials</Description>
                                      <Label>k</Label>
                                      <Units>Trials</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Number of trials</Description>
                                      <Label>x</Label>
                                      <Units>Trials</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Hypergeometric Distribution-->
                      <Distribution>
                          <Name>Hypergeometric</Name>
                          <Description>Distribution describing the probability of k successes in n draws, without replacement.</Description>
                          <Usage>Used to calculate probabilities when sampling without replacement.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Hypergeometric_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Hypergeometric.htm</InformationLink>
                          <InformationLink>http://onlinestatbook.com/2/probability/hypergeometric.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/hypergeometric-distribution-examples/</InformationLink>
                          <InformationLink>https://www.rdocumentation.org/packages/distributions3/versions/0.1.1/topics/HyperGeometric</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>Maximum of 0 and draws + success - population</Minimum>
                              <Maximum>Minimum of draws and success</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>60</DefaultMax>
                          </XValueRange>
                          <NParameters>3</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Number</Type>
                                  <Name>population</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>population</Abbreviation>
                                  <Description>The size of the population.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>500</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1000</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Number</Type>
                                  <Name>success</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>success</Abbreviation>
                                  <Description>The number of successes within the population.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>population</Maximum>
                                  <Default>50</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>100</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Number</Type>
                                  <Name>draws</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>draws</Abbreviation>
                                  <Description>The number of draws without replacement.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>population</Maximum>
                                  <Default>200</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1000</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterC>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Number of successes</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Number of successes or less</Description>
                                      <Label>x</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Inverse Gamma Distribution-->
                      <Distribution>
                          <Name>Inverse Gamma</Name>
                          <Alias>Inverted Gamma</Alias>
                          <Description>The reciprocal of the Gamma distribution.</Description>
                          <Usage>Commonly used in Bayesian statistics. Also used in machine learning, reliability theory and survival analysis.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Inverse-gamma_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/InverseGamma.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/inverse-gamma-distribution/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt 0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>3</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>Scale parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Inverse Gaussian Distribution-->
                      <Distribution>
                          <Name>Inverse Gaussian</Name>
                          <Alias>Wald</Alias>
                          <Alias>Normal Inverse Gaussian</Alias>
                          <Description>An exponential distribution with a single mode and a long tail.</Description>
                          <Usage>Used to model non-negative, positively skewed data. Used in business, survival analysis, finance and medicine.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/InverseGaussian.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/inverse-gaussian/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt 0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>3</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Mean</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>mu</Abbreviation>
                                  <Description>The mean of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>lambda</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Laplace Distribution-->
                      <Distribution>
                          <Name>Laplace</Name>
                          <Alias>Double Exponential</Alias>
                          <Description>The distribution of differences between two independent random variables with identical exponential distributions. Unimodal (one peak) and symmetrical. The peak is sharper than the normal distribution.</Description>
                          <Usage>Used to model phenonmena with heavy tails or when data has a higher peak than the normal distribution.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Laplace_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Laplace.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/LaplaceDistribution.html</InformationLink>
                          <InformationLink>https://www.sciencedirect.com/topics/mathematics/laplace-distribution</InformationLink>
                          <InformationLink>https://www.randomservices.org/random/special/Laplace.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/laplace-distribution-double-exponential/</InformationLink>
                          <InformationLink>https://www.rdocumentation.org/packages/ExtDist/versions/0.6-3/topics/Laplace</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>-10</DefaultMin>
                              <DefaultMax>10</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>b</Name>
                                  <Symbol>b</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Log Normal Distribution-->
                      <Distribution>
                          <Name>Log Normal</Name>
                          <Description>The probability distribution of a random variable whose logarithm is normally distributed. A log normal distribution is the result of the product of of a large number of independent, identically distributed variables.</Description>
                          <Usage>Used to model measurements in engineering, medicine, economics and other fields. Measurements include energy, concentrations, lengths and financial returns.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Log-normal_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/LogNormal.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/lognormal-distribution/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt 0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>3</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>mu</Abbreviation>
                                  <Description>The mean of the variable's natural logarithm</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>sigma</Abbreviation>
                                  <Description>The standard deviation of the variable's natural logarithm.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0.5</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Negative Binomial Distribution-->
                      <Distribution>
                          <Name>Negative Binomial</Name>
                          <Alias>Pascal</Alias>
                          <Description>The number of failures in a sequence of Bernoulli trials before a specified number of successes occurs. (The distribution is described as "negative" because the number of failures is counted instead of the number of successes.)</Description>
                          <Usage>Analysis of sport probabilities (basketball, baseball etc).</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Negative_binomial_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/NegativeBinomial.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/NegativeBinomialDistribution.html</InformationLink>
                          <InformationLink>https://stattrek.com/probability-distributions/negative-binomial.aspx</InformationLink>
                          <InformationLink>https://www.thoughtco.com/negative-binomial-distribution-4091991</InformationLink>
                          <InformationLink>https://www.vosesoftware.com/riskwiki/NegativeBinomial.php</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>30</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Number</Type>
                                  <Name>r</Name>
                                  <Symbol>r</Symbol>
                                  <Abbreviation>r</Abbreviation>
                                  <Description>The number of successes required to stop the experiment</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>10</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>100</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Probability</Type>
                                  <Name>P success</Name>
                                  <Symbol>p</Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>Probability of success</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>1</Maximum>
                                  <Default>0.6</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Number of failures</Description>
                                      <Label>k</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Number of failures</Description>
                                      <Label>k</Label>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Number of failures</Description>
                                      <Label>x</Label>
                                      <Units>Successes</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Normal Distribution-->
                      <Distribution>
                          <Name>Normal</Name>
                          <Alias>Gaussian</Alias>
                          <Alias>Gauss</Alias>
                          <Alias>Laplace Gauss</Alias>
                          <Alias>"Bell Curve"</Alias>
                          <Description>The most common distribution function for independent, randomly generated variables. The distribution is symmetrical, with a bell shape and an equal mean and median located at the center of the distribution.</Description>
                          <Usage>Used to model many natural phenomena such as peoples heights, blood pressure and IQ scores.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Normal_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Normal.htm</InformationLink>
                          <InformationLink>https://www.britannica.com/topic/normal-distribution</InformationLink>
                          <InformationLink>https://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/NormalDistribution.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>-5</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>Mean</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>mean</Abbreviation>
                                  <Description>The mean of the distribution.</Description>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <NumberType>Real</NumberType>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>Standard Deviation</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>stddev</Abbreviation>
                                  <Description>The standard deviation of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>1</NAlternateParameterSets>
                          <Alternate1>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>Mean</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>mean</Abbreviation>
                                  <Description>The mean of the distribution.</Description>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <NumberType>Real</NumberType>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>Variance</Name>
                                  <Symbol>Sigma squared</Symbol>
                                  <Abbreviation>variance</Abbreviation>
                                  <Description>The variance of the distribution (standard deviation squared).</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                              </ParameterB>
                          </Alternate1>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Pareto Distribution-->
                      <Distribution>
                          <Name>Pareto</Name>
                          <Description>A power-law probability distribution.</Description>
                          <Usage>Description of social, scientific, actuarial and other types of observable phenomena. Examples include sizes of sand particles, sizes of cities and towns, sizes of meteorites and sizes of listed companies.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Pareto_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Pareto.htm</InformationLink>
                          <InformationLink>http://wiki.stat.ucla.edu/socr/index.php/AP_Statistics_Curriculum_2007_Pareto</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/pareto-distribution/</InformationLink>
                          <InformationLink>https://www.sciencedirect.com/topics/computer-science/pareto-distribution</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>gt xm</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>xm</Name>
                                  <Symbol>xm</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>Minimum possible value of x.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>Shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Poisson Distribution-->
                      <Distribution>
                          <Name>Poisson</Name>
                          <Description>The probability of a given number of events occurring in a fixed interval of time or space if the independent events occur with a known constant mean rate.</Description>
                          <Usage>Number of stars in a fixed volume of space, number of decayed nuclei in a radiactive source within a given period of time, number of mail items received each day.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Poisson_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Poisson.htm</InformationLink>
                          <InformationLink>http://wiki.stat.ucla.edu/socr/index.php/AP_Statistics_Curriculum_2007_Distrib_Poisson</InformationLink>
                          <InformationLink>https://www.rdocumentation.org/packages/distributions3/versions/0.1.1/topics/Poisson</InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>20</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Rate</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>lambda</Abbreviation>
                                  <Description>The expected number of occurrences that occur during the given period.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>4</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                      <Units>Occurrences</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Rayleigh Distribution-->
                      <Distribution>
                          <Name>Rayleigh</Name>
                          <Description>A continuous probability distribution for non-negative valued random variables.</Description>
                          <Usage>Model wind speed and wave heights. Model the lifetime of an item where the lifetime depends on the age of the object.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Rayleigh_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Rayleigh.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/rayleigh-distribution/</InformationLink>
                          <InformationLink>https://www.tutorialspoint.com/statistics/rayleigh_distribution.htm</InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>10</DefaultMax>
                          </XValueRange>
                          <NParameters>1</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Skewed Generalized Error Distribution-->
                      <Distribution>
                          <Name>Skewed Generalized Error</Name>
                          <Description>A special case of the Skewed Generalized T distribution (where parameter q is set to + infinity).</Description>
                          <Usage></Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Skewed_generalized_t_distribution#Skewed_generalized_error_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/SkewedGeneralizedError.htm</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                          </XValueRange>
                          <NParameters>4</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Skew</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>skew</Abbreviation>
                                  <Description>Skew parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt -1</Minimum>
                                  <Maximum>lt 1</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-1</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                              <ParameterD>
                                  <Type>Kurtosis</Type>
                                  <Name>p</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>Kurtosis parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterD>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>pr</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Skewed Generalized T Distribution-->
                      <Distribution>
                          <Name>Skewed Generalized T</Name>
                          <Description>A highly flexible five parameter univariate distribution.</Description>
                          <Usage></Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Skewed_generalized_t_distribution#Skewed_generalized_error_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/SkewedGeneralizedT.htm</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                          </XValueRange>
                          <NParameters>5</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Skew</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>skew</Abbreviation>
                                  <Description>The skew.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt -1</Minimum>
                                  <Maximum>lt 1</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-1</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                              <ParameterD>
                                  <Type>Kurtosis</Type>
                                  <Name>p</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>p</Abbreviation>
                                  <Description>First kurtosis parameter. (Error if value lt ~1.415?)</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterD>
                              <ParameterE>
                                  <Type>Kurtosis</Type>
                                  <Name>q</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>q</Abbreviation>
                                  <Description>Second kurtosis parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterE>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>pr</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Stable Distribution-->
                      <Distribution>
                          <Name>Stable</Name>
                          <Description>A distribution where the linear combination of two independent random variables with this distribution also has the same distribution. Can be considered a generaization of the Normal distribution.</Description>
                          <Usage>Suitable for modelling heavy tails and skewness.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Stable_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Stable.htm</InformationLink>
                          <InformationLink>https://www.mathworks.com/help/stats/stable-distribution.html</InformationLink>
                          <InformationLink>https://www.randomservices.org/random/special/Stable.html</InformationLink>
                          <InformationLink>https://reference.wolfram.com/language/ref/StableDistribution.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf or Mu if Alpha lt 1 and Beta eq 1</Minimum>
                              <Maximum>+inf or Mu if Alpha lt 1 and Beta eq -1</Maximum>
                              <DefaultMin>-4</DefaultMin>
                              <DefaultMax>4</DefaultMax>
                          </XValueRange>
                          <NParameters>4</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>alpha</Abbreviation>
                                  <Description>First shape parameter - Stability.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>2</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>2</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>beta</Name>
                                  <Symbol>Beta</Symbol>
                                  <Abbreviation>beta</Abbreviation>
                                  <Description>Second shape parameter - Skewness.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-1</Minimum>
                                  <Maximum>1</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-1</AdjustMin>
                                  <AdjustMax>1</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Scale</Type>
                                  <Name>c</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale parameter.</Description>
                                  <NumberType></NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                              <ParameterD>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterD>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Student's T Distribution-->
                      <Distribution>
                          <Name>Student's T</Name>
                          <Description>The distribution was published by William Gosset in 1908 under the pseudonym "Student". Similar to the Normal distribution but with greater chance of extreme values (fatter tails).</Description>
                          <Usage>Used instead of the Normal distribution when the sample size is small (under 30) or the variance (or standard deviation) is unknown. The distribution is shorter and fatter than the Normal distribution.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Student%27s_t-distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/StudentT.htm</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/probability-and-statistics/t-distribution/</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/Studentst-Distribution.html</InformationLink>
                          <InformationLink>https://www.investopedia.com/terms/t/tdistribution.asp</InformationLink>
                          <InformationLink>https://www.mathworks.com/help/stats/students-t-distribution.html</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>-5</DefaultMin>
                              <DefaultMax>5</DefaultMax>
                          </XValueRange>
                          <NParameters>3</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Location</Type>
                                  <Name>mu</Name>
                                  <Symbol>Mu</Symbol>
                                  <Abbreviation>location</Abbreviation>
                                  <Description>The location of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>0</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>sigma</Name>
                                  <Symbol>Sigma</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Freedom</Type>
                                  <Name>nu</Name>
                                  <Symbol>Nu</Symbol>
                                  <Abbreviation>freedom</Abbreviation>
                                  <Description>Degrees of freedom: number of samples minus one.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>4</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Triangular Distribution-->
                      <Distribution>
                          <Name>Triangular</Name>
                          <Description>A continuous probability distribution with a lower limit, an upper limit and a mode within these limits.</Description>
                          <Usage>A simplistic distribution used when limited sample data is available. Used in business and economic simulations, project management and modelling natural phenomena.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Triangular_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Triangular.htm</InformationLink>
                          <InformationLink>https://www.mathworks.com/help/stats/triangular-distribution.html</InformationLink>
                          <InformationLink>https://www.statisticshowto.com/triangular-distribution/</InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>-inf</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>4</DefaultMax>
                          </XValueRange>
                          <NParameters>3</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>Minimum</Name>
                                  <Symbol>a</Symbol>
                                  <Abbreviation>lower</Abbreviation>
                                  <Description>The minimum value.</Description>
                                  <NumberType>Real</NumberType>
                                  <Maximum>lt upper</Maximum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>Maximum</Name>
                                  <Symbol>b</Symbol>
                                  <Abbreviation>upper</Abbreviation>
                                  <Description>The maximum value.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt lower</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>3</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type></Type>
                                  <Name>Peak</Name>
                                  <Symbol>c</Symbol>
                                  <Abbreviation>mode</Abbreviation>
                                  <Description>The peak value.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt lower</Minimum>
                                  <Maximum>lt upper</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.5</Increment>
                              </ParameterC>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Truncated Pareto Distribution-->
                      <Distribution>
                          <Name>Truncated Pareto</Name>
                          <Alias>Bounded Pareto</Alias>
                          <Description>A power-law probability distribution with upper and lower bounds.</Description>
                          <Usage></Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Pareto_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/TruncatedPareto.htm</InformationLink>
                          <InformationLink></InformationLink>
                          <InformationLink></InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>xm</Minimum>
                              <Maximum>T</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>10</DefaultMax>
                          </XValueRange>
                          <NParameters>3</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Scale</Type>
                                  <Name>xm</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale parameter. Minimum x value.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Shape</Type>
                                  <Name>alpha</Name>
                                  <Symbol>Alpha</Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>The shape of the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                              <ParameterC>
                                  <Type>Truncation</Type>
                                  <Name>T</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>truncation</Abbreviation>
                                  <Description>x Truncation value or the maximum value.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt xm</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>8</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterC>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                              <InvCDF>
                                  <XAxis>
                                      <Description>Probability</Description>
                                      <Label>p</Label>
                                  </XAxis>
                              </InvCDF>
                          </Types>
                      </Distribution>
                      <!--The Weibull Distribution-->
                      <Distribution>
                          <Name>Weibull</Name>
                          <Description>The Weibull distribution is versatile because of the shape parameter.</Description>
                          <Usage>Used in reliability engineering. The two parameter Weibull is commonly used in failure analysis - no failure occurs before zero time.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Weibull_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Weibull.htm</InformationLink>
                          <InformationLink></InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Continuous</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>0</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>0</DefaultMin>
                              <DefaultMax>3</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type>Shape</Type>
                                  <Name>k</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>shape</Abbreviation>
                                  <Description>The shape parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type>Scale</Type>
                                  <Name>lambda</Name>
                                  <Symbol>Lambda</Symbol>
                                  <Abbreviation>scale</Abbreviation>
                                  <Description>The scale parameter.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>gt 0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>1</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDF>
                              <PDFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </PDFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                      <!--The Zipf Distribution-->
                      <Distribution>
                          <Name>Zipf</Name>
                          <Alias>Discrete Pareto</Alias>
                          <Alias>Zeta</Alias>
                          <Description>A Zipf distribution is used to model data based on zipf's law, where the nth common item occurs 1/n times as often as the most common item.</Description>
                          <Usage>Commonly used in linguistics, insurance and modelling rare events.</Usage>
                          <InformationLink>https://en.wikipedia.org/wiki/Pareto_distribution</InformationLink>
                          <InformationLink>https://numerics.mathdotnet.com/api/MathNet.Numerics.Distributions/Zipf.htm</InformationLink>
                          <InformationLink>https://mathworld.wolfram.com/ZipfDistribution.html</InformationLink>
                          <InformationLink></InformationLink>
                          <Continuity>Discrete</Continuity>
                          <NRandomVariables>Univariate</NRandomVariables>
                          <XValueRange>
                              <Minimum>1</Minimum>
                              <Maximum>+inf</Maximum>
                              <DefaultMin>1</DefaultMin>
                              <DefaultMax>25</DefaultMax>
                          </XValueRange>
                          <NParameters>2</NParameters>
                          <Default>
                              <ParameterA>
                                  <Type></Type>
                                  <Name>s</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>s</Abbreviation>
                                  <Description>The value of the exponent used to characterize the distribution.</Description>
                                  <NumberType>Real</NumberType>
                                  <Minimum>-inf</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>2</Default>
                                  <AdjustMin>-10</AdjustMin>
                                  <AdjustMax>10</AdjustMax>
                                  <Increment>0.2</Increment>
                              </ParameterA>
                              <ParameterB>
                                  <Type></Type>
                                  <Name>n</Name>
                                  <Symbol></Symbol>
                                  <Abbreviation>n</Abbreviation>
                                  <Description>Number of elements in a population.</Description>
                                  <NumberType>Integer</NumberType>
                                  <Minimum>0</Minimum>
                                  <Maximum>+inf</Maximum>
                                  <Default>20</Default>
                                  <AdjustMin>0</AdjustMin>
                                  <AdjustMax>100</AdjustMax>
                                  <Increment>1</Increment>
                              </ParameterB>
                          </Default>
                          <NAlternateParameterSets>0</NAlternateParameterSets>
                          <Types>
                              <PMF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Item</Units>
                                  </XAxis>
                              </PMF>
                              <PMFLn>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>k</Label>
                                      <Units>Item</Units>
                                  </XAxis>
                              </PMFLn>
                              <CDF>
                                  <XAxis>
                                      <Description>Random Variable Value</Description>
                                      <Label>x</Label>
                                      <Units>Item</Units>
                                  </XAxis>
                              </CDF>
                          </Types>
                      </Distribution>
                  </DistributionList>

        'MathNet.Numerics.Distributions.

        'NOTE:
        'For Zipf distribution:
        'Types.PMF.XAxis.Minimum = 1
        'Types.PMF.XAxis.DefaultMin = 1
        'Types.PMFLn.XAxis.DefaultMin = 0
        'These properties have been moved to .XValueRange - Not sure why .PMF properties were different than .PMFLn properties

        '<Types>
        '    <PMF>
        '        <XAxis>
        '            <Description>Random Variable Value</Description>
        '            <Label>k</Label>
        '            <Units>Item</Units>
        '            <Minimum>1</Minimum>
        '            <DefaultMin>1</DefaultMin>
        '            <DefaultMax>25</DefaultMax>
        '        </XAxis>
        '    </PMF>
        '    <PMFLn>
        '        <XAxis>
        '            <Description>Random Variable Value</Description>
        '            <Label>k</Label>
        '            <Units>Item</Units>
        '            <DefaultMin>0</DefaultMin>
        '            <DefaultMax>25</DefaultMax>
        '        </XAxis>
        '    </PMFLn>
        '    <CDF>
        '        <XAxis>
        '            <Description>Random Variable Value</Description>
        '            <Label>x</Label>
        '            <Units>Item</Units>
        '            <DefaultMin>0</DefaultMin>
        '            <DefaultMax>25</DefaultMax>
        '        </XAxis>
        '    </CDF>
        '</Types>

        'NOTE: InvCDF types always have Minimum 0 and Maximum 1: (No need to specify for every distribution.)
        '<Minimum>0</Minimum>
        '<Maximum>1</Maximum>
        '<DefaultMin>0</DefaultMin>
        '<DefaultMax>1</DefaultMax>

    End Sub

    Public Sub UpdateDistribCounts()
        'Update the counts of the Continuous and Discrete distributions.
        Dim NCont As Integer = 0
        Dim NDisc As Integer = 0

        For Each Item In Info
            If Item.Continuity = "Continuous" Then
                NCont += 1
            ElseIf Item.Continuity = "Discrete" Then
                NDisc += 1
            Else
                RaiseEvent ErrorMessage("Unknown distribution continuity: " & Item.Continuity & vbCrLf)
            End If
        Next
        NContinuous = NCont
        NDiscrete = NDisc
    End Sub

#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Events - Events raised by this class." '=============================================================================================================================================
    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a normal message.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


End Class 'DistributionModel

Public Class ParamInfo
    'Probability distribution parameter information.

    Private _name As String = "" 'The name of the parameter
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
        End Set
    End Property

    Private _value As Double 'The value of the parameter.
    Property Value As Double
        Get
            Return _value
        End Get
        Set(value As Double)
            _value = value
            'RaiseEvent ValueChanged(_value)
            RaiseEvent ValueChanged()
        End Set
    End Property

    Private _symbol As String = "" 'The name of the symbol used to represent the parameter.
    Property Symbol As String
        Get
            Return _symbol
        End Get
        Set(value As String)
            _symbol = value
        End Set
    End Property

    Private _type As String = "" 'The type of parameter
    Property Type As String
        Get
            Return _type
        End Get
        Set(value As String)
            _type = value
        End Set
    End Property

    Private _numberType As String = "" 'The number type of the parameter
    Property NumberType As String
        Get
            Return _numberType
        End Get
        Set(value As String)
            _numberType = value
        End Set
    End Property

    Private _minimum As String 'The minimum possible value of the parameter (This is a text string describing the minimum valid value.)
    Property Minimum As String
        Get
            Return _minimum
        End Get
        Set(value As String)
            _minimum = value
        End Set
    End Property

    Private _maximum As String  'The maximum possible value of the parameter (This is a text string describing the maximum valid value.)
    Property Maximum As String
        Get
            Return _maximum
        End Get
        Set(value As String)
            _maximum = value
        End Set
    End Property

    'Private _adjustmin As String 'The minimum used when adjusting the parameter value
    Private _adjustmin As Double 'The minimum used when adjusting the parameter value
    'Property AdjustMin As String
    Property AdjustMin As Double
        Get
            Return _adjustmin
        End Get
        Set(value As Double)
            _adjustmin = value
        End Set
    End Property

    Private _adjustmax As Double  'The maximum used when adjusting the parameter value
    Property AdjustMax As Double
        Get
            Return _adjustmax
        End Get
        Set(value As Double)
            _adjustmax = value
        End Set
    End Property

    Private _increment As Double = 0 'The increment value used to adjust the parameter value.
    Property Increment As Double
        Get
            Return _increment
        End Get
        Set(value As Double)
            _increment = value
        End Set
    End Property

    Private _description As String = "" 'A description of the parameter
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    'NOTE: This function uses the ParamValue() function - difficult to code here - needs to access the other parameters in the distribution.
    'Public Function ValidRangeAdjust(Value As Double, Increment As Double) As Double
    '    'Check if the parameter value lies within the valid range.
    '    'Return the value, adjusted to lie within the range if needed.
    '    'Increment is the adjustment made if a valid parameter value is less than or greater than a boundary value.
    '    ' For example of .Minimum = "gt 0" an input value of 0 is returned as 0.0001 if the Increment is 0.0001

    '    Select Case Minimum
    '        Case ""
    '            'Continue - check Max constraint.
    '        Case "-Inf"
    '             'Continue - check Max constraint.
    '        Case "0"
    '            If Value < 0 Then Return 0
    '        Case "gt 0"
    '            If Value <= 0 Then Return Increment
    '        Case "a"
    '            Dim A As Double = ParamValue("a")
    '            If Value < A Then Return A
    '        Case "gt -1"
    '            If Value <= -1 Then Return -1 + Increment
    '        Case "-1"
    '            If Value < -1 Then Return -1
    '        Case "gt lower"
    '            Dim Lower As Double = ParamValue("lower")
    '            If Value <= Lower Then Return Lower + Increment
    '        Case "gt xm"
    '            Dim Xm As Double = ParamValue("xm")
    '            If Value <= Xm Then Return Xm + Increment
    '        Case Else
    '            RaiseEvent ErrorMessage("Unknown minimum: " & ParamA.Minimum & vbCrLf)
    '    End Select

    '    Select Case Maximum
    '        Case ""
    '            Return Value
    '        Case "+inf"
    '            Return Value
    '        Case "1"
    '            If Value > 1 Then Return 1
    '        Case "population"
    '            Dim Population As Double = ParamValue("population")
    '            If Value > Population Then Return Population
    '        Case "lt 1"
    '            If Value >= 1 Then Return 1 - Increment
    '        Case "lt upper"
    '            Dim Upper As Double = ParamValue("upper")
    '            If Value >= Upper Then Return Upper - Increment
    '        Case Else
    '            RaiseEvent ErrorMessage("Unknown maximum: " & Max & vbCrLf)
    '    End Select

    '    Return Value 'If this line is reached, an unknown Min or Max string was found. Just return the Value unchanged.

    'End Function

    'Event ValueChanged(ByVal NewValue As Double) 'Send the new parameter value.
    Event ValueChanged() 'Indicate that the parameter value has changed.

End Class 'ParamInfo

'Public Class FieldInfo
Public Class FunctionFieldInfo
    'Probability distribution function data table field information.

    Public Display As New SeriesDisplay

    Private _name As String = "" 'The name of the Field (or column) (PDF, PDFLn, CDF, InvCdf, PMF or PMFLn)
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
        End Set
    End Property

    Private _legend As String = "" 'The name of the Field (or column) to be used in the chart legend.
    Property Legend As String
        Get
            Return _legend
        End Get
        Set(value As String)
            _legend = value
        End Set
    End Property

    Private _valid As Boolean = True 'If True, the Field is valid for the selected distribution.
    Property Valid As Boolean
        Get
            Return _valid
        End Get
        Set(value As Boolean)
            _valid = value
        End Set
    End Property

    Private _generate As Boolean = True 'If True, the Field will be added to the data table and the values generated.
    Property Generate As Boolean
        Get
            Return _generate
        End Get
        Set(value As Boolean)
            _generate = value
        End Set
    End Property

    'Private _colNumber As Integer 'The column number of the Field.
    'Property ColNumber As Integer
    '    Get
    '        Return _colNumber
    '    End Get
    '    Set(value As Integer)
    '        _colNumber = value
    '    End Set
    'End Property

    'Private _numType As String = "System.Single" 'The type of number used to store the Field values.
    Private _numType As String = "Single" 'The type of number used to store the Field values.
    Property NumType As String
        Get
            Return _numType
        End Get
        Set(value As String)
            _numType = value
        End Set
    End Property

    Private _format As String = "" 'The format string used to display the Field values on a data grid view.
    Property Format As String
        Get
            Return _format
        End Get
        Set(value As String)
            _format = value
        End Set
    End Property

    Private _alignment As String = "NotSet" 'The text alignment used to display the Field values on a data grid view.
    Property Alignment As String
        Get
            Return _alignment
        End Get
        Set(value As String)
            _alignment = value
        End Set
    End Property

    Private _valueLabel As String = "" 'A label used to display the Field values axis on a chart.
    Property ValueLabel As String
        Get
            Return _valueLabel
        End Get
        Set(value As String)
            _valueLabel = value
        End Set
    End Property

    Private _units As String = "" 'The units of measure of the Field values.
    Property Units As String
        Get
            Return _units
        End Get
        Set(value As String)
            _units = value
        End Set
    End Property

    Private _labelPrefix As String = "" 'The series label prefix (e.g. PDF, CDF, PDF Normal, CDF Normal).
    Property LabelPrefix As String
        Get
            Return _labelPrefix
        End Get
        Set(value As String)
            _labelPrefix = value
        End Set
    End Property

    Private _seriesLabel As String = "" 'A label used to display the value series axis on a chart.
    Property SeriesLabel As String
        Get
            Return _seriesLabel
        End Get
        Set(value As String)
            _seriesLabel = value
        End Set
    End Property

    Private _description As String = "" 'A description of the Field.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

End Class 'FunctionFieldInfo

Public Class XAxisFieldInfo
    'Probability distribution function - X Axis - data table field information.

    Private _name As String = "" 'The name of the Field (or column) (Value or Probability)
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
        End Set
    End Property

    'Private _legend As String = "" 'The name of the Field (or column) to be used in the chart legend.
    'Property Legend As String
    '    Get
    '        Return _legend
    '    End Get
    '    Set(value As String)
    '        _legend = value
    '    End Set
    'End Property

    'Private _valid As Boolean = True 'If True, the Field is valid for the selected distribution.
    'Property Valid As Boolean
    '    Get
    '        Return _valid
    '    End Get
    '    Set(value As Boolean)
    '        _valid = value
    '    End Set
    'End Property

    Private _generate As Boolean = True 'If True, the Field will be added to the data table and the values generated.
    Property Generate As Boolean
        Get
            Return _generate
        End Get
        Set(value As Boolean)
            _generate = value
        End Set
    End Property

    'Private _colNumber As Integer 'The column number of the Field.
    'Property ColNumber As Integer
    '    Get
    '        Return _colNumber
    '    End Get
    '    Set(value As Integer)
    '        _colNumber = value
    '    End Set
    'End Property

    Private _numType As String = "System.Single" 'The type of number used to store the Field values.
    Property NumType As String
        Get
            Return _numType
        End Get
        Set(value As String)
            _numType = value
        End Set
    End Property

    Private _format As String = "" 'The format string used to display the Field values on a data grid view.
    Property Format As String
        Get
            Return _format
        End Get
        Set(value As String)
            _format = value
        End Set
    End Property

    Private _alignment As String = "NotSet" 'The text alignment used to display the Field values on a data grid view.
    Property Alignment As String
        Get
            Return _alignment
        End Get
        Set(value As String)
            _alignment = value
        End Set
    End Property

    Private _valueLabel As String = "" 'A label used to display the Field values axis on a chart.
    Property ValueLabel As String
        Get
            Return _valueLabel
        End Get
        Set(value As String)
            _valueLabel = value
        End Set
    End Property

    Private _units As String = "" 'The units of measure of the Field values.
    Property Units As String
        Get
            Return _units
        End Get
        Set(value As String)
            _units = value
        End Set
    End Property

    'Private _labelPrefix As String = "" 'The series label prefix (e.g. PDF, CDF, PDF Normal, CDF Normal).
    'Property LabelPrefix As String
    '    Get
    '        Return _labelPrefix
    '    End Get
    '    Set(value As String)
    '        _labelPrefix = value
    '    End Set
    'End Property

    'Private _seriesLabel As String = "" 'A label used to display the value series axis on a chart.
    'Property SeriesLabel As String
    '    Get
    '        Return _seriesLabel
    '    End Get
    '    Set(value As String)
    '        _seriesLabel = value
    '    End Set
    'End Property

    Private _description As String = "" 'A description of the Field.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Public Function ToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the X Axis Field settings.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <Settings>
                       <Name><%= Name %></Name>
                       <Generate><%= Generate %></Generate>
                       <NumType><%= NumType %></NumType>
                       <Format><%= Format %></Format>
                       <Alignment><%= Alignment %></Alignment>
                       <ValueLabel><%= ValueLabel %></ValueLabel>
                       <Units><%= Units %></Units>
                       <Description><%= Description %></Description>
                   </Settings>
        Return XDoc
    End Function

End Class 'XAxisFieldInfo

Public Class clsContSampling
    'Continuous distribution Random Variable value sampling.
    'Minimum
    'MinLock
    'Maximum
    'MaxLock
    'Interval
    'IntervalLock
    'NSamples
    'NSamplesLock
    'Label
    'Units
    'Description

    Private _minimum As Double = 0 'The minimum sampled Random Variable Value in the distribution data.
    Property Minimum As Double
        Get
            Return _minimum
        End Get
        Set(value As Double)
            _minimum = value
            RecalcSamplingSettings("Minimum")
        End Set
    End Property

    Private _minLock As Boolean = False 'If True then the minimum sampled Random Variable Value is locked.
    Property MinLock As Boolean
        Get
            Return _minLock
        End Get
        Set(value As Boolean)
            _minLock = value
        End Set
    End Property

    Private _maximum As Double = 1 'The maximum sampled Random Variable Value in the distribution data.
    Property Maximum As Double
        Get
            Return _maximum
        End Get
        Set(value As Double)
            _maximum = value
            RecalcSamplingSettings("Maximum")
        End Set
    End Property

    Private _maxLock As Boolean = False 'If True then the maximum sampled Random Variable Value is locked.
    Property MaxLock As Boolean
        Get
            Return _maxLock
        End Get
        Set(value As Boolean)
            _maxLock = value
        End Set
    End Property

    Private _interval As Double = 0.1 'The interval between the sampled Random Variable Values in the distribution data.
    Property Interval As Double
        Get
            Return _interval
        End Get
        Set(value As Double)
            _interval = value
            RecalcSamplingSettings("Interval")
        End Set
    End Property

    Private _intervalLock As Boolean = True 'If True then the interval between the sampled Random Variable Values is locked.
    Property IntervalLock As Boolean
        Get
            Return _intervalLock
        End Get
        Set(value As Boolean)
            _intervalLock = value
        End Set
    End Property

    Private _nSamples As Long = 11 'The number of sampled Random Variable Values in the distribution data.
    Property NSamples As Long
        Get
            Return _nSamples
        End Get
        Set(value As Long)
            _nSamples = value
            RecalcSamplingSettings("NSamples")
        End Set
    End Property

    Private _nSamplesLock As Boolean = False 'If True then the number of sampled Random Variable Values is locked.
    Property NSamplesLock As Boolean
        Get
            Return _nSamplesLock
        End Get
        Set(value As Boolean)
            _nSamplesLock = value
        End Set
    End Property

    Private _label As String = "" 'The X Axis label used in the chart of the Random Variable values.
    Property Label As String
        Get
            Return _label
        End Get
        Set(value As String)
            _label = value
        End Set
    End Property

    Private _units As String = "" 'The X Axis units used in the chart of the Random Variable values.
    Property Units As String
        Get
            Return _units
        End Get
        Set(value As String)
            _units = value
        End Set
    End Property

    Private _description As String = "" 'A description of the Random Variable values.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Public Sub RecalcSamplingSettings(Changed As String)
        'Recalculate the Sampling settings.
        'The Changed string indicates which settings has just been changed.
        'This setting will be temporarily locked.
        If MinLock Then
            If MaxLock Then
                If IntervalLock Then
                    If NSamplesLock Then
                        'All parameters locked - Nothing to calculate.
                    Else
                        _nSamples = Int((Maximum - Minimum) / Interval) + 1 'Update the member variable otherwise the RecalcSamplingSettings() method is retriggered
                    End If
                Else
                    If NSamplesLock Then
                        _interval = (Maximum - Minimum) / (NSamples - 1)
                    Else
                        If Changed = "Interval" Then 'Update NSamples
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                        ElseIf Changed = "NSamples" Then 'Update Interval
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else 'Update Interval
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    End If
                End If
            Else
                If IntervalLock Then
                    If NSamplesLock Then
                        _maximum = Minimum + NSamples * Interval - Interval
                    Else
                        If Changed = "NSamples" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                        Else
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                            _maximum = Minimum + NSamples * Interval - Interval
                        End If
                    End If
                Else
                    If NSamplesLock Then
                        If Changed = "Interval" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    Else
                        If Changed = "NSamples" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        ElseIf Changed = "Interval" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    End If
                End If
            End If
        Else
            If MaxLock Then
                If IntervalLock Then
                    If NSamplesLock Then
                        _minimum = Maximum - NSamples * Interval + Interval
                    Else
                        If Changed = "NSamples" Then
                            _minimum = Maximum - NSamples * Interval + Interval
                        ElseIf Changed = "Minimum" Then
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                        Else
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                            _minimum = Maximum - NSamples * Interval + Interval
                        End If
                    End If
                Else
                    If NSamplesLock Then
                        If Changed = "Interval" Then
                            _minimum = Maximum - NSamples * Interval + Interval
                        ElseIf Changed = "Minimum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    Else
                        If Changed = "NSamples" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        ElseIf Changed = "Interval" Then
                            _minimum = Maximum - NSamples * Interval + Interval
                        ElseIf Changed = "Minimum" Then
                            Interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    End If
                End If
            Else
                If IntervalLock Then
                    If NSamplesLock Then
                        If Changed = "Maximum" Then
                            _minimum = Maximum - NSamples * Interval + Interval
                        ElseIf Changed = "Minimum" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        Else
                            _maximum = Minimum + NSamples * Interval - Interval
                        End If
                    Else
                        If Changed = "NSamples" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                            _minimum = Maximum - NSamples * Interval + Interval
                        ElseIf Changed = "Minimum" Then
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                            _maximum = Minimum + NSamples * Interval - Interval
                        Else
                            _nSamples = Int((Maximum - Minimum) / Interval) + 1
                            _maximum = Minimum + NSamples * Interval - Interval
                        End If
                    End If
                Else
                    If NSamplesLock Then
                        If Changed = "Interval" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        ElseIf Changed = "Minimum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    Else
                        If Changed = "NSamples" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        ElseIf Changed = "Interval" Then
                            _maximum = Minimum + NSamples * Interval - Interval
                        ElseIf Changed = "Maximum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        ElseIf Changed = "Minimum" Then
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        Else
                            _interval = (Maximum - Minimum) / (NSamples - 1)
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Public Function ToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the Continuous Sampling settings.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <ContinuousSampling>
                       <Minimum><%= Minimum %></Minimum>
                       <MinLock><%= MinLock %></MinLock>
                       <Maximum><%= Maximum %></Maximum>
                       <MaxLock><%= MaxLock %></MaxLock>
                       <Interval><%= Interval %></Interval>
                       <IntervalLock><%= IntervalLock %></IntervalLock>
                       <NSamples><%= NSamples %></NSamples>
                       <NSamplesLock><%= NSamplesLock %></NSamplesLock>
                       <Label><%= Label %></Label>
                       <Units><%= Units %></Units>
                       <Description><%= Description %></Description>
                   </ContinuousSampling>
        Return XDoc
    End Function

    Public Sub FromXDoc(mySampling As IEnumerable(Of XElement))
        'Read the Continuous Sampling data from the Elements of an XDocument.

        Minimum = mySampling.<Minimum>.Value
        MinLock = mySampling.<MinLock>.Value
        Maximum = mySampling.<Maximum>.Value
        MaxLock = mySampling.<MaxLock>.Value
        Interval = mySampling.<Interval>.Value
        IntervalLock = mySampling.<IntervalLock>.Value
        NSamples = mySampling.<NSamples>.Value
        NSamplesLock = mySampling.<NSamplesLock>.Value
        Label = mySampling.<Label>.Value
        Units = mySampling.<Units>.Value
        Description = mySampling.<Description>.Value

        'Minimum = mySampling.<ContinuousSampling>.<Minimum>.Value
        'MinLock = mySampling.<ContinuousSampling>.<MinLock>.Value
        'Maximum = mySampling.<ContinuousSampling>.<Maximum>.Value
        'MaxLock = mySampling.<ContinuousSampling>.<MaxLock>.Value
        'Interval = mySampling.<ContinuousSampling>.<Interval>.Value
        'IntervalLock = mySampling.<ContinuousSampling>.<IntervalLock>.Value
        'NSamples = mySampling.<ContinuousSampling>.<NSamples>.Value
        'NSamplesLock = mySampling.<ContinuousSampling>.<NSamplesLock>.Value
        'Label = mySampling.<ContinuousSampling>.<Label>.Value
        'Units = mySampling.<ContinuousSampling>.<Units>.Value
        'Description = mySampling.<ContinuousSampling>.<Description>.Value
    End Sub

End Class 'clsContSampling



Public Class clsDiscSampling
    'Discrete distribution Random Variable sampling.
    'Minimum
    'Maximum
    'Label
    'Units
    'Description

    Private _minimum As Double 'The minimum sampled Random Variable Value in the distribution data.
    Property Minimum As Double
        Get
            Return _minimum
        End Get
        Set(value As Double)
            _minimum = value
        End Set
    End Property

    Private _maximum As Double 'The maximum sampled Random Variable Value in the distribution data.
    Property Maximum As Double
        Get
            Return _maximum
        End Get
        Set(value As Double)
            _maximum = value
        End Set
    End Property

    Private _label As String = "" 'The X Axis label used in the chart of the Random Variable values.
    Property Label As String
        Get
            Return _label
        End Get
        Set(value As String)
            _label = value
        End Set
    End Property

    Private _units As String = "" 'The X Axis units used in the chart of the Random Variable values.
    Property Units As String
        Get
            Return _units
        End Get
        Set(value As String)
            _units = value
        End Set
    End Property

    Private _description As String = "" 'A description of the Random Variable values.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Public Function ToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the Discrete Sampling settings.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <DiscreteSampling>
                       <Minimum><%= Minimum %></Minimum>
                       <Maximum><%= Maximum %></Maximum>
                       <Label><%= Label %></Label>
                       <Units><%= Units %></Units>
                       <Description><%= Description %></Description>
                   </DiscreteSampling>
        Return XDoc
    End Function

    Public Sub FromXDoc(mySampling As IEnumerable(Of XElement))
        'Read the Discrete Sampling data from the Elements of an XDocument.

        Minimum = mySampling.<Minimum>.Value
        Maximum = mySampling.<Maximum>.Value
        Label = mySampling.<Label>.Value
        Units = mySampling.<Units>.Value
        Description = mySampling.<Description>.Value

        'Minimum = mySampling.<DiscreteSampling>.<Minimum>.Value
        'Maximum = mySampling.<DiscreteSampling>.<Maximum>.Value
        'Label = mySampling.<DiscreteSampling>.<Label>.Value
        'Units = mySampling.<DiscreteSampling>.<Units>.Value
        'Description = mySampling.<DiscreteSampling>.<Description>.Value
    End Sub

End Class 'clsDiscSampling

'Public Class clsMultiDistrib
Public Class DistributionInfo
    'Used to store distribution information.

    'Parameter information:
    Public WithEvents ParamA As New ParamInfo
    Public WithEvents ParamB As New ParamInfo
    Public WithEvents ParamC As New ParamInfo
    Public WithEvents ParamD As New ParamInfo
    Public WithEvents ParamE As New ParamInfo

    'Field information:
    'Information about each Field (column) that may be included in the Distribution data table.

    'Public ValueInfo As New FieldInfo
    'Public ValueInfo As New FunctionFieldInfo 'NOTE: This information is common to all distributions in the model and is stoed in XValueInfo in the DistributionModel class.

    'Public PdfInfo As New FieldInfo 'Used for continuous distributions
    Public PdfInfo As New FunctionFieldInfo 'Used for continuous distributions
    Public PdfLnInfo As New FunctionFieldInfo 'Used for continuous distributions
    Public CdfInfo As New FunctionFieldInfo

    Public RevCdfInfo As New FunctionFieldInfo 'Reverse CDF Information.

    'Public ProbabilityInfo As New FieldInfo 'Used for continuous distributions
    'Public ProbabilityInfo As New FunctionFieldInfo 'Used for continuous distributions'NOTE: This information is common to all distributions in the model and is stoed in XProbInfo in the DistributionModel class.

    Public InvCdfInfo As New FunctionFieldInfo 'Used for continuous distributions

    Public InvRevCdfInfo As New FunctionFieldInfo 'Inverse Reverse CDF Information.

    Public PmfInfo As New FunctionFieldInfo 'Used for discrete distributions
    Public PmfLnInfo As New FunctionFieldInfo 'Used for discrete distributions

    Public Display As New SeriesDisplay

    Public WithEvents ParamEst As New clsParamEst 'Class used for parameter estimation.

    Private Distrib As Object 'This will store the MathNet distribution class used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.

    Private _name As String = "" 'The name of the distribution.
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
            ParamEst.DistributionName = _name 'Update the corresponding property in ParamEst
            SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
        End Set
    End Property

    Private _description As String = "" 'A description of the distribution.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Private _usage As String = "" 'The use of the distribution.
    Property Usage As String
        Get
            Return _usage
        End Get
        Set(value As String)
            _usage = value
        End Set
    End Property


    Private _continuity As String = "" 'The continuity of the distribution. (Continuous or Discrete)
    Property Continuity As String
        Get
            Return _continuity
        End Get
        Set(value As String)
            _continuity = value
            ParamEst.Continuity = _continuity 'Update the corresponding property in ParamEst
            If _continuity = "Continuous" Then
                'ValueInfo.Valid = True
                PdfInfo.Valid = True
                PdfLnInfo.Valid = True
                CdfInfo.Valid = True
                RevCdfInfo.Valid = True
                'ProbabilityInfo.Valid = True
                InvCdfInfo.Valid = True
                InvRevCdfInfo.Valid = True
                PmfInfo.Valid = False
                PmfLnInfo.Valid = False
            ElseIf _continuity = "Discrete" Then
                'ValueInfo.Valid = True
                PdfInfo.Valid = False
                PdfLnInfo.Valid = False
                CdfInfo.Valid = True
                RevCdfInfo.Valid = True
                'ProbabilityInfo.Valid = False
                InvCdfInfo.Valid = False
                InvRevCdfInfo.Valid = False
                PmfInfo.Valid = True
                PmfLnInfo.Valid = True
            Else
                RaiseEvent ErrorMessage("Unknown distribution continuity: " & _continuity & vbCrLf)
            End If
        End Set
    End Property

    Private _nParams As Integer = 1 'The number of parameters used to specify the distribution. 
    Property NParams As Integer
        Get
            Return _nParams
        End Get
        Set(value As Integer)
            _nParams = value
            ParamEst.NParams = _nParams 'Update the corresponding property in ParamEst
        End Set
    End Property

    Private _rangeMin As String 'Descrbes the minimum range of valid distribution values.
    Property RangeMin As String
        Get
            Return _rangeMin
        End Get
        Set(value As String)
            _rangeMin = value
        End Set
    End Property

    Private _rangeMax As String 'Descrbes the maximum range of valid distribution values.
    Property RangeMax As String
        Get
            Return _rangeMax
        End Get
        Set(value As String)
            _rangeMax = value
        End Set
    End Property

    Private _suffix As String 'The suffix used to label a data series generated using these distribution parameters. (e.g. Suffix = μ=0, σ=0.5 and PDF series name = PDF μ=0, σ=0.5)

    Property Suffix As String
        Get
            Return _suffix
        End Get
        Set(value As String)
            _suffix = value
            'If AutoUpdateSuffix Then UpdateSuffix()
            'If AutoUpdateSuffix Then UpdateSeriesLabels()
            If AutoUpdateLabels Then UpdateSeriesLabels()
        End Set
    End Property

    'Private _autoUpdateSuffix As Boolean = True 'If True, automatically update the Suffix when a parameter value is changed.
    Private _autoUpdateLabels As Boolean = True 'If True, automatically update the Series Labels when a parameter value (and the Suffix) is changed.
    'Property AutoUpdateSuffix As Boolean
    Property AutoUpdateLabels As Boolean
        Get
            Return _autoUpdateLabels
        End Get
        Set(value As Boolean)
            _autoUpdateLabels = value
            If _autoUpdateLabels Then UpdateSuffix()
        End Set
    End Property

    Private _probTolerance As Double = 0.0000000000001 'The tolerance on the Probability value returned by the InvCdf method.
    Property ProbTolerance As Double
        Get
            Return _probTolerance
        End Get
        Set(value As Double)
            _probTolerance = value
        End Set
    End Property

    Private _rVName As String = "" 'The name of the Random Variable that is represented by the probability distribution.
    Property RVName As String
        Get
            Return _rVName
        End Get
        Set(value As String)
            _rVName = value
        End Set
    End Property

    Private _rVDescription As String = "" 'A description of the Random Variable
    Property RVDescription As String
        Get
            Return _rVDescription
        End Get
        Set(value As String)
            _rVDescription = value
        End Set
    End Property

    Private _rVMeasurement As String = "Value" 'The property measured by the Random Variable.
    Property RVMeasurement As String
        Get
            Return _rVMeasurement
        End Get
        Set(value As String)
            _rVMeasurement = value
        End Set
    End Property

    Private _rVUnits As String = "" 'The units used to measure the Random Variable. (eg. Metres)
    Property RVUnits As String
        Get
            Return _rVUnits
        End Get
        Set(value As String)
            _rVUnits = value
        End Set
    End Property

    Private _abbrevRVUnits As String = "" 'The abbreviated units used to measure the Random Variable. (eg. m)
    Property RVAbbrevUnits As String
        Get
            Return _abbrevRVUnits
        End Get
        Set(value As String)
            _abbrevRVUnits = value
        End Set
    End Property

    Public Sub New()
        'Set the default series display settings:
        PdfInfo.Display.MarkerFill = "Yes"
        PdfInfo.Display.MarkerColor = Color.Red
        PdfInfo.Display.BorderColor = Color.Black
        PdfInfo.Display.BorderWidth = 1
        PdfInfo.Display.MarkerStyle = "Circle"
        PdfInfo.Display.MarkerSize = 6
        PdfInfo.Display.MarkerStep = 1
        PdfInfo.Display.LineColor = Color.Red
        PdfInfo.Display.LineWidth = 1

        PdfLnInfo.Display.MarkerFill = "Yes"
        PdfLnInfo.Display.MarkerColor = Color.Pink
        PdfLnInfo.Display.BorderColor = Color.Black
        PdfLnInfo.Display.BorderWidth = 1
        PdfLnInfo.Display.MarkerStyle = "Square"
        PdfLnInfo.Display.MarkerSize = 6
        PdfLnInfo.Display.MarkerStep = 1
        PdfLnInfo.Display.LineColor = Color.Pink
        PdfLnInfo.Display.LineWidth = 1

        PmfInfo.Display.MarkerFill = "Yes"
        PmfInfo.Display.MarkerColor = Color.Black
        PmfInfo.Display.BorderColor = Color.Black
        PmfInfo.Display.BorderWidth = 1
        PmfInfo.Display.MarkerStyle = "Star4"
        PmfInfo.Display.MarkerSize = 6
        PmfInfo.Display.MarkerStep = 1
        PmfInfo.Display.LineColor = Color.Black
        PmfInfo.Display.LineWidth = 1

        PmfLnInfo.Display.MarkerFill = "Yes"
        PmfLnInfo.Display.MarkerColor = Color.Gray
        PmfLnInfo.Display.BorderColor = Color.Black
        PmfLnInfo.Display.BorderWidth = 1
        PmfLnInfo.Display.MarkerStyle = "Star10"
        PmfLnInfo.Display.MarkerSize = 6
        PmfLnInfo.Display.MarkerStep = 1
        PmfLnInfo.Display.LineColor = Color.Gray
        PmfLnInfo.Display.LineWidth = 1

        CdfInfo.Display.MarkerFill = "Yes"
        CdfInfo.Display.MarkerColor = Color.Green
        CdfInfo.Display.BorderColor = Color.Black
        CdfInfo.Display.BorderWidth = 1
        CdfInfo.Display.MarkerStyle = "Diamond"
        CdfInfo.Display.MarkerSize = 6
        CdfInfo.Display.MarkerStep = 1
        CdfInfo.Display.LineColor = Color.Green
        CdfInfo.Display.LineWidth = 1

        RevCdfInfo.Display.MarkerFill = "Yes"
        'RevCdfInfo.Display.MarkerColor = Color.Green
        RevCdfInfo.Display.MarkerColor = Color.DarkGreen
        RevCdfInfo.Display.BorderColor = Color.Black
        RevCdfInfo.Display.BorderWidth = 1
        RevCdfInfo.Display.MarkerStyle = "Diamond"
        RevCdfInfo.Display.MarkerSize = 6
        RevCdfInfo.Display.MarkerStep = 1
        RevCdfInfo.Display.LineColor = Color.DarkGreen
        RevCdfInfo.Display.LineWidth = 1

        InvCdfInfo.Display.MarkerFill = "Yes"
        InvCdfInfo.Display.MarkerColor = Color.Blue
        InvCdfInfo.Display.BorderColor = Color.Black
        InvCdfInfo.Display.BorderWidth = 1
        InvCdfInfo.Display.MarkerStyle = "Triangle"
        InvCdfInfo.Display.MarkerSize = 6
        InvCdfInfo.Display.MarkerStep = 1
        InvCdfInfo.Display.LineColor = Color.Blue
        InvCdfInfo.Display.LineWidth = 1

        InvRevCdfInfo.Display.MarkerFill = "Yes"
        'InvRevCdfInfo.Display.MarkerColor = Color.Blue
        InvRevCdfInfo.Display.MarkerColor = Color.DarkBlue
        InvRevCdfInfo.Display.BorderColor = Color.Black
        InvRevCdfInfo.Display.BorderWidth = 1
        InvRevCdfInfo.Display.MarkerStyle = "Triangle"
        InvRevCdfInfo.Display.MarkerSize = 6
        InvRevCdfInfo.Display.MarkerStep = 1
        InvRevCdfInfo.Display.LineColor = Color.DarkBlue
        InvRevCdfInfo.Display.LineWidth = 1

        'Add references to the Distribution Parameters in ParamEst
        ParamEst.ParamA = ParamA
        ParamEst.ParamB = ParamB
        ParamEst.ParamC = ParamC
        ParamEst.ParamD = ParamD
        ParamEst.ParamE = ParamE

    End Sub



    Public Function ToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the Distribution settings.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <!---->
                   <!--Distribution Data-->
                   <Distribution>
                       <Name><%= Name %></Name>
                       <Description><%= Description %></Description>
                       <Usage><%= Usage %></Usage>
                       <Continuity><%= Continuity %></Continuity>
                       <NParams><%= NParams %></NParams>
                       <RangeMin><%= RangeMin %></RangeMin>
                       <RangeMax><%= RangeMax %></RangeMax>
                       <Suffix><%= Suffix %></Suffix>
                       <AutoUpdateLabels><%= AutoUpdateLabels %></AutoUpdateLabels>
                       <RandomVariable>
                           <Name><%= RVName %></Name>
                           <Description><%= RVDescription %></Description>
                           <Measurement><%= RVMeasurement %></Measurement>
                           <Units><%= RVUnits %></Units>
                           <AbbreviatedUnits><%= RVAbbrevUnits %></AbbreviatedUnits>
                       </RandomVariable>
                       <Display>
                           <MarkerFill><%= Display.MarkerFill %></MarkerFill>
                           <MarkerColor><%= Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                           <BorderColor><%= Display.BorderColor.ToArgb.ToString %></BorderColor>
                           <BorderWidth><%= Display.BorderWidth %></BorderWidth>
                           <MarkerStyle><%= Display.MarkerStyle %></MarkerStyle>
                           <MarkerSize><%= Display.MarkerSize %></MarkerSize>
                           <MarkerStep><%= Display.MarkerStep %></MarkerStep>
                           <LineColor><%= Display.LineColor.ToArgb.ToString %></LineColor>
                           <LineWidth><%= Display.LineWidth %></LineWidth>
                       </Display>
                       <!--Parameter Information-->
                       <%= ParamInfo(NParams).<ParameterInfo> %>
                       <!--Field Information-->
                       <%= FieldInfo().<FieldInfo> %>
                       <%= ParamEst.SampleValuesToXDoc.<SampleValues> %>
                   </Distribution>
        Return XDoc

        '<%= FieldInfo(Continuity).<FieldInfo> %>

        '<!--Parameter Values-->
        '<%= ParamValues(NParams).<ParameterValues> %>
    End Function

    Public Function ParamValues(NParams As Integer) As System.Xml.Linq.XDocument
        'Returns an Xml document of the Parameter values.

        Select Case NParams
            Case 1
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                               <ParamA><%= ParamA %></ParamA>
                           </ParameterValues>
                Return XDoc
            Case 2
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                               <ParamA><%= ParamA %></ParamA>
                               <ParamB><%= ParamB %></ParamB>
                           </ParameterValues>
                Return XDoc
            Case 3
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                               <ParamA><%= ParamA %></ParamA>
                               <ParamB><%= ParamB %></ParamB>
                               <ParamC><%= ParamC %></ParamC>
                           </ParameterValues>
                Return XDoc
            Case 4
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                               <ParamA><%= ParamA %></ParamA>
                               <ParamB><%= ParamB %></ParamB>
                               <ParamC><%= ParamC %></ParamC>
                               <ParamD><%= ParamD %></ParamD>
                           </ParameterValues>
                Return XDoc
            Case 5
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                               <ParamA><%= ParamA %></ParamA>
                               <ParamB><%= ParamB %></ParamB>
                               <ParamC><%= ParamC %></ParamC>
                               <ParamD><%= ParamD %></ParamD>
                               <ParamE><%= ParamE %></ParamE>
                           </ParameterValues>
                Return XDoc
            Case Else
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterValues>
                           </ParameterValues>
                Return XDoc
        End Select
    End Function

    Public Function ParamInfo(NParams As Integer) As System.Xml.Linq.XDocument
        'Returns an Xml document of the Parameter info.
        Select Case NParams
            Case 1
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                               <ParamA>
                                   <Name><%= ParamA.Name %></Name>
                                   <Symbol><%= ParamA.Symbol %></Symbol>
                                   <Value><%= ParamA.Value %></Value>
                                   <Type><%= ParamA.Type %></Type>
                                   <NumberType><%= ParamA.NumberType %></NumberType>
                                   <Minimum><%= ParamA.Minimum %></Minimum>
                                   <Maximum><%= ParamA.Maximum %></Maximum>
                                   <AdjustMin><%= ParamA.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamA.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamA.Increment %></Increment>
                                   <Description><%= ParamA.Description %></Description>
                               </ParamA>
                           </ParameterInfo>
                Return XDoc
            Case 2
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                               <ParamA>
                                   <Name><%= ParamA.Name %></Name>
                                   <Symbol><%= ParamA.Symbol %></Symbol>
                                   <Value><%= ParamA.Value %></Value>
                                   <Type><%= ParamA.Type %></Type>
                                   <NumberType><%= ParamA.NumberType %></NumberType>
                                   <Minimum><%= ParamA.Minimum %></Minimum>
                                   <Maximum><%= ParamA.Maximum %></Maximum>
                                   <AdjustMin><%= ParamA.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamA.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamA.Increment %></Increment>
                                   <Description><%= ParamA.Description %></Description>
                               </ParamA>
                               <ParamB>
                                   <Name><%= ParamB.Name %></Name>
                                   <Symbol><%= ParamB.Symbol %></Symbol>
                                   <Value><%= ParamB.Value %></Value>
                                   <Type><%= ParamB.Type %></Type>
                                   <NumberType><%= ParamB.NumberType %></NumberType>
                                   <Minimum><%= ParamB.Minimum %></Minimum>
                                   <Maximum><%= ParamB.Maximum %></Maximum>
                                   <AdjustMin><%= ParamB.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamB.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamB.Increment %></Increment>
                                   <Description><%= ParamB.Description %></Description>
                               </ParamB>
                           </ParameterInfo>
                Return XDoc
            Case 3
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                               <ParamA>
                                   <Name><%= ParamA.Name %></Name>
                                   <Symbol><%= ParamA.Symbol %></Symbol>
                                   <Value><%= ParamA.Value %></Value>
                                   <Type><%= ParamA.Type %></Type>
                                   <NumberType><%= ParamA.NumberType %></NumberType>
                                   <Minimum><%= ParamA.Minimum %></Minimum>
                                   <Maximum><%= ParamA.Maximum %></Maximum>
                                   <AdjustMin><%= ParamA.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamA.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamA.Increment %></Increment>
                                   <Description><%= ParamA.Description %></Description>
                               </ParamA>
                               <ParamB>
                                   <Name><%= ParamB.Name %></Name>
                                   <Symbol><%= ParamB.Symbol %></Symbol>
                                   <Value><%= ParamB.Value %></Value>
                                   <Type><%= ParamB.Type %></Type>
                                   <NumberType><%= ParamB.NumberType %></NumberType>
                                   <Minimum><%= ParamB.Minimum %></Minimum>
                                   <Maximum><%= ParamB.Maximum %></Maximum>
                                   <AdjustMin><%= ParamB.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamB.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamB.Increment %></Increment>
                                   <Description><%= ParamB.Description %></Description>
                               </ParamB>
                               <ParamC>
                                   <Name><%= ParamC.Name %></Name>
                                   <Symbol><%= ParamC.Symbol %></Symbol>
                                   <Value><%= ParamC.Value %></Value>
                                   <Type><%= ParamC.Type %></Type>
                                   <NumberType><%= ParamC.NumberType %></NumberType>
                                   <Minimum><%= ParamC.Minimum %></Minimum>
                                   <Maximum><%= ParamC.Maximum %></Maximum>
                                   <AdjustMin><%= ParamC.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamC.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamC.Increment %></Increment>
                                   <Description><%= ParamC.Description %></Description>
                               </ParamC>
                           </ParameterInfo>
                Return XDoc
            Case 4
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                               <ParamA>
                                   <Name><%= ParamA.Name %></Name>
                                   <Symbol><%= ParamA.Symbol %></Symbol>
                                   <Value><%= ParamA.Value %></Value>
                                   <Type><%= ParamA.Type %></Type>
                                   <NumberType><%= ParamA.NumberType %></NumberType>
                                   <Minimum><%= ParamA.Minimum %></Minimum>
                                   <Maximum><%= ParamA.Maximum %></Maximum>
                                   <AdjustMin><%= ParamA.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamA.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamA.Increment %></Increment>
                                   <Description><%= ParamA.Description %></Description>
                               </ParamA>
                               <ParamB>
                                   <Name><%= ParamB.Name %></Name>
                                   <Symbol><%= ParamB.Symbol %></Symbol>
                                   <Value><%= ParamB.Value %></Value>
                                   <Type><%= ParamB.Type %></Type>
                                   <NumberType><%= ParamB.NumberType %></NumberType>
                                   <Minimum><%= ParamB.Minimum %></Minimum>
                                   <Maximum><%= ParamB.Maximum %></Maximum>
                                   <AdjustMin><%= ParamB.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamB.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamB.Increment %></Increment>
                                   <Description><%= ParamB.Description %></Description>
                               </ParamB>
                               <ParamC>
                                   <Name><%= ParamC.Name %></Name>
                                   <Symbol><%= ParamC.Symbol %></Symbol>
                                   <Value><%= ParamC.Value %></Value>
                                   <Type><%= ParamC.Type %></Type>
                                   <NumberType><%= ParamC.NumberType %></NumberType>
                                   <Minimum><%= ParamC.Minimum %></Minimum>
                                   <Maximum><%= ParamC.Maximum %></Maximum>
                                   <AdjustMin><%= ParamC.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamC.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamC.Increment %></Increment>
                                   <Description><%= ParamC.Description %></Description>
                               </ParamC>
                               <ParamD>
                                   <Name><%= ParamD.Name %></Name>
                                   <Symbol><%= ParamD.Symbol %></Symbol>
                                   <Value><%= ParamD.Value %></Value>
                                   <Type><%= ParamD.Type %></Type>
                                   <NumberType><%= ParamD.NumberType %></NumberType>
                                   <Minimum><%= ParamD.Minimum %></Minimum>
                                   <Maximum><%= ParamD.Maximum %></Maximum>
                                   <AdjustMin><%= ParamD.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamD.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamD.Increment %></Increment>
                                   <Description><%= ParamD.Description %></Description>
                               </ParamD>
                           </ParameterInfo>
                Return XDoc
            Case 5
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                               <ParamA>
                                   <Name><%= ParamA.Name %></Name>
                                   <Symbol><%= ParamA.Symbol %></Symbol>
                                   <Value><%= ParamA.Value %></Value>
                                   <Type><%= ParamA.Type %></Type>
                                   <NumberType><%= ParamA.NumberType %></NumberType>
                                   <Minimum><%= ParamA.Minimum %></Minimum>
                                   <Maximum><%= ParamA.Maximum %></Maximum>
                                   <AdjustMin><%= ParamA.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamA.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamA.Increment %></Increment>
                                   <Description><%= ParamA.Description %></Description>
                               </ParamA>
                               <ParamB>
                                   <Name><%= ParamB.Name %></Name>
                                   <Symbol><%= ParamB.Symbol %></Symbol>
                                   <Value><%= ParamB.Value %></Value>
                                   <Type><%= ParamB.Type %></Type>
                                   <NumberType><%= ParamB.NumberType %></NumberType>
                                   <Minimum><%= ParamB.Minimum %></Minimum>
                                   <Maximum><%= ParamB.Maximum %></Maximum>
                                   <AdjustMin><%= ParamB.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamB.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamB.Increment %></Increment>
                                   <Description><%= ParamB.Description %></Description>
                               </ParamB>
                               <ParamC>
                                   <Name><%= ParamC.Name %></Name>
                                   <Symbol><%= ParamC.Symbol %></Symbol>
                                   <Value><%= ParamC.Value %></Value>
                                   <Type><%= ParamC.Type %></Type>
                                   <NumberType><%= ParamC.NumberType %></NumberType>
                                   <Minimum><%= ParamC.Minimum %></Minimum>
                                   <Maximum><%= ParamC.Maximum %></Maximum>
                                   <AdjustMin><%= ParamC.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamC.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamC.Increment %></Increment>
                                   <Description><%= ParamC.Description %></Description>
                               </ParamC>
                               <ParamD>
                                   <Name><%= ParamD.Name %></Name>
                                   <Symbol><%= ParamD.Symbol %></Symbol>
                                   <Value><%= ParamD.Value %></Value>
                                   <Type><%= ParamD.Type %></Type>
                                   <NumberType><%= ParamD.NumberType %></NumberType>
                                   <Minimum><%= ParamD.Minimum %></Minimum>
                                   <Maximum><%= ParamD.Maximum %></Maximum>
                                   <AdjustMin><%= ParamD.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamD.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamD.Increment %></Increment>
                                   <Description><%= ParamD.Description %></Description>
                               </ParamD>
                               <ParamE>
                                   <Name><%= ParamE.Name %></Name>
                                   <Symbol><%= ParamE.Symbol %></Symbol>
                                   <Value><%= ParamE.Value %></Value>
                                   <Type><%= ParamE.Type %></Type>
                                   <NumberType><%= ParamE.NumberType %></NumberType>
                                   <Minimum><%= ParamE.Minimum %></Minimum>
                                   <Maximum><%= ParamE.Maximum %></Maximum>
                                   <AdjustMin><%= ParamE.AdjustMin %></AdjustMin>
                                   <AdjustMax><%= ParamE.AdjustMax %></AdjustMax>
                                   <Increment><%= ParamE.Increment %></Increment>
                                   <Description><%= ParamE.Description %></Description>
                               </ParamE>
                           </ParameterInfo>
                Return XDoc
            Case Else
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <ParameterInfo>
                           </ParameterInfo>
                Return XDoc
        End Select

    End Function

    Public Function FieldInfo() As System.Xml.Linq.XDocument
        'Returns an Xml document of the Field information.
        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <FieldInfo>
                       <PDF>
                           <Name><%= PdfInfo.Name %></Name>
                           <Valid><%= PdfInfo.Valid %></Valid>
                           <Generate><%= PdfInfo.Generate %></Generate>
                           <NumType><%= PdfInfo.NumType %></NumType>
                           <Format><%= PdfInfo.Format %></Format>
                           <Alignment><%= PdfInfo.Alignment %></Alignment>
                           <ValueLabel><%= PdfInfo.ValueLabel %></ValueLabel>
                           <Units><%= PdfInfo.Units %></Units>
                           <LabelPrefix><%= PdfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= PdfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= PdfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= PdfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= PdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= PdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= PdfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= PdfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= PdfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= PdfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= PdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= PdfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </PDF>
                       <PDFLn>
                           <Name><%= PdfLnInfo.Name %></Name>
                           <Valid><%= PdfLnInfo.Valid %></Valid>
                           <Generate><%= PdfLnInfo.Generate %></Generate>
                           <NumType><%= PdfLnInfo.NumType %></NumType>
                           <Format><%= PdfLnInfo.Format %></Format>
                           <Alignment><%= PdfLnInfo.Alignment %></Alignment>
                           <ValueLabel><%= PdfLnInfo.ValueLabel %></ValueLabel>
                           <Units><%= PdfLnInfo.Units %></Units>
                           <LabelPrefix><%= PdfLnInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= PdfLnInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= PdfLnInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= PdfLnInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= PdfLnInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= PdfLnInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= PdfLnInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= PdfLnInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= PdfLnInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= PdfLnInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= PdfLnInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= PdfLnInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </PDFLn>
                       <PMF>
                           <Name><%= PmfInfo.Name %></Name>
                           <Valid><%= PmfInfo.Valid %></Valid>
                           <Generate><%= PmfInfo.Generate %></Generate>
                           <NumType><%= PmfInfo.NumType %></NumType>
                           <Format><%= PmfInfo.Format %></Format>
                           <Alignment><%= PmfInfo.Alignment %></Alignment>
                           <ValueLabel><%= PmfInfo.ValueLabel %></ValueLabel>
                           <Units><%= PmfInfo.Units %></Units>
                           <LabelPrefix><%= PmfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= PmfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= PmfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= PmfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= PmfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= PmfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= PmfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= PmfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= PmfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= PmfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= PmfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= PmfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </PMF>
                       <PMFLn>
                           <Name><%= PmfLnInfo.Name %></Name>
                           <Valid><%= PmfLnInfo.Valid %></Valid>
                           <Generate><%= PmfLnInfo.Generate %></Generate>
                           <NumType><%= PmfLnInfo.NumType %></NumType>
                           <Format><%= PmfLnInfo.Format %></Format>
                           <Alignment><%= PmfLnInfo.Alignment %></Alignment>
                           <ValueLabel><%= PmfLnInfo.ValueLabel %></ValueLabel>
                           <Units><%= PmfLnInfo.Units %></Units>
                           <LabelPrefix><%= PmfLnInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= PmfLnInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= PmfLnInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= PmfLnInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= PmfLnInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= PmfLnInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= PmfLnInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= PmfLnInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= PmfLnInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= PmfLnInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= PmfLnInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= PmfLnInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </PMFLn>
                       <CDF>
                           <Name><%= CdfInfo.Name %></Name>
                           <Valid><%= CdfInfo.Valid %></Valid>
                           <Generate><%= CdfInfo.Generate %></Generate>
                           <NumType><%= CdfInfo.NumType %></NumType>
                           <Format><%= CdfInfo.Format %></Format>
                           <Alignment><%= CdfInfo.Alignment %></Alignment>
                           <ValueLabel><%= CdfInfo.ValueLabel %></ValueLabel>
                           <Units><%= CdfInfo.Units %></Units>
                           <LabelPrefix><%= CdfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= CdfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= CdfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= CdfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= CdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= CdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= CdfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= CdfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= CdfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= CdfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= CdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= CdfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </CDF>
                       <RevCDF>
                           <Name><%= RevCdfInfo.Name %></Name>
                           <Valid><%= RevCdfInfo.Valid %></Valid>
                           <Generate><%= RevCdfInfo.Generate %></Generate>
                           <NumType><%= RevCdfInfo.NumType %></NumType>
                           <Format><%= RevCdfInfo.Format %></Format>
                           <Alignment><%= RevCdfInfo.Alignment %></Alignment>
                           <ValueLabel><%= RevCdfInfo.ValueLabel %></ValueLabel>
                           <Units><%= RevCdfInfo.Units %></Units>
                           <LabelPrefix><%= RevCdfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= RevCdfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= RevCdfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= RevCdfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= RevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= RevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= RevCdfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= RevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= RevCdfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= RevCdfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= RevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= RevCdfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </RevCDF>
                       <InvCDF>
                           <Name><%= InvCdfInfo.Name %></Name>
                           <Valid><%= InvCdfInfo.Valid %></Valid>
                           <Generate><%= InvCdfInfo.Generate %></Generate>
                           <NumType><%= InvCdfInfo.NumType %></NumType>
                           <Format><%= InvCdfInfo.Format %></Format>
                           <Alignment><%= InvCdfInfo.Alignment %></Alignment>
                           <ValueLabel><%= InvCdfInfo.ValueLabel %></ValueLabel>
                           <Units><%= InvCdfInfo.Units %></Units>
                           <LabelPrefix><%= InvCdfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= InvCdfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= InvCdfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= InvCdfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= InvCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= InvCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= InvCdfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= InvCdfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= InvCdfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= InvCdfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= InvCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= InvCdfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </InvCDF>
                       <InvRevCDF>
                           <Name><%= InvRevCdfInfo.Name %></Name>
                           <Valid><%= InvRevCdfInfo.Valid %></Valid>
                           <Generate><%= InvRevCdfInfo.Generate %></Generate>
                           <NumType><%= InvRevCdfInfo.NumType %></NumType>
                           <Format><%= InvRevCdfInfo.Format %></Format>
                           <Alignment><%= InvRevCdfInfo.Alignment %></Alignment>
                           <ValueLabel><%= InvRevCdfInfo.ValueLabel %></ValueLabel>
                           <Units><%= InvRevCdfInfo.Units %></Units>
                           <LabelPrefix><%= InvRevCdfInfo.LabelPrefix %></LabelPrefix>
                           <SeriesLabel><%= InvRevCdfInfo.SeriesLabel %></SeriesLabel>
                           <Description><%= InvRevCdfInfo.Description %></Description>
                           <Display>
                               <MarkerFill><%= InvRevCdfInfo.Display.MarkerFill %></MarkerFill>
                               <MarkerColor><%= InvRevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                               <BorderColor><%= InvRevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                               <BorderWidth><%= InvRevCdfInfo.Display.BorderWidth %></BorderWidth>
                               <MarkerStyle><%= InvRevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                               <MarkerSize><%= InvRevCdfInfo.Display.MarkerSize %></MarkerSize>
                               <MarkerStep><%= InvRevCdfInfo.Display.MarkerStep %></MarkerStep>
                               <LineColor><%= InvRevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                               <LineWidth><%= InvRevCdfInfo.Display.LineWidth %></LineWidth>
                           </Display>
                       </InvRevCDF>
                   </FieldInfo>

        Return XDoc

    End Function

    'NOTE: Use FieldInfo() function above - Continuous and Discrete distributions should save all field types including PDF and PMF (even though PMF will be invalid for continuous and PDF will be invalid for discrete distributions.)
    Public Function FieldInfo(Continuity As String) As System.Xml.Linq.XDocument
        'Returns an Xml document of the Field information.
        Select Case Continuity
            Case "Continuous"
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <FieldInfo>
                               <PDF>
                                   <Name><%= PdfInfo.Name %></Name>
                                   <Valid><%= PdfInfo.Valid %></Valid>
                                   <Generate><%= PdfInfo.Generate %></Generate>
                                   <NumType><%= PdfInfo.NumType %></NumType>
                                   <Format><%= PdfInfo.Format %></Format>
                                   <Alignment><%= PdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= PdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= PdfInfo.Units %></Units>
                                   <LabelPrefix><%= PdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= PdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= PdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= PdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= PdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= PdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= PdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= PdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= PdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= PdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= PdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= PdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </PDF>
                               <PDFLn>
                                   <Name><%= PdfLnInfo.Name %></Name>
                                   <Valid><%= PdfLnInfo.Valid %></Valid>
                                   <Generate><%= PdfLnInfo.Generate %></Generate>
                                   <NumType><%= PdfLnInfo.NumType %></NumType>
                                   <Format><%= PdfLnInfo.Format %></Format>
                                   <Alignment><%= PdfLnInfo.Alignment %></Alignment>
                                   <ValueLabel><%= PdfLnInfo.ValueLabel %></ValueLabel>
                                   <Units><%= PdfLnInfo.Units %></Units>
                                   <LabelPrefix><%= PdfLnInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= PdfLnInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= PdfLnInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= PdfLnInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= PdfLnInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= PdfLnInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= PdfLnInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= PdfLnInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= PdfLnInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= PdfLnInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= PdfLnInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= PdfLnInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </PDFLn>
                               <CDF>
                                   <Name><%= CdfInfo.Name %></Name>
                                   <Valid><%= CdfInfo.Valid %></Valid>
                                   <Generate><%= CdfInfo.Generate %></Generate>
                                   <NumType><%= CdfInfo.NumType %></NumType>
                                   <Format><%= CdfInfo.Format %></Format>
                                   <Alignment><%= CdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= CdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= CdfInfo.Units %></Units>
                                   <LabelPrefix><%= CdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= CdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= CdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= CdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= CdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= CdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= CdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= CdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= CdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= CdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= CdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= CdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </CDF>
                               <RevCDF>
                                   <Name><%= RevCdfInfo.Name %></Name>
                                   <Valid><%= RevCdfInfo.Valid %></Valid>
                                   <Generate><%= RevCdfInfo.Generate %></Generate>
                                   <NumType><%= RevCdfInfo.NumType %></NumType>
                                   <Format><%= RevCdfInfo.Format %></Format>
                                   <Alignment><%= RevCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= RevCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= RevCdfInfo.Units %></Units>
                                   <LabelPrefix><%= RevCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= RevCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= RevCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= RevCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= RevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= RevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= RevCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= RevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= RevCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= RevCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= RevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= RevCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </RevCDF>
                               <InvCDF>
                                   <Name><%= InvCdfInfo.Name %></Name>
                                   <Valid><%= InvCdfInfo.Valid %></Valid>
                                   <Generate><%= InvCdfInfo.Generate %></Generate>
                                   <NumType><%= InvCdfInfo.NumType %></NumType>
                                   <Format><%= InvCdfInfo.Format %></Format>
                                   <Alignment><%= InvCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= InvCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= InvCdfInfo.Units %></Units>
                                   <LabelPrefix><%= InvCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= InvCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= InvCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= InvCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= InvCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= InvCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= InvCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= InvCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= InvCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= InvCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= InvCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= InvCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </InvCDF>
                               <InvRevCDF>
                                   <Name><%= InvRevCdfInfo.Name %></Name>
                                   <Valid><%= InvRevCdfInfo.Valid %></Valid>
                                   <Generate><%= InvRevCdfInfo.Generate %></Generate>
                                   <NumType><%= InvRevCdfInfo.NumType %></NumType>
                                   <Format><%= InvRevCdfInfo.Format %></Format>
                                   <Alignment><%= InvRevCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= InvRevCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= InvRevCdfInfo.Units %></Units>
                                   <LabelPrefix><%= InvRevCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= InvRevCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= InvRevCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= InvRevCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= InvRevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= InvRevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= InvRevCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= InvRevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= InvRevCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= InvRevCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= InvRevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= InvRevCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </InvRevCDF>
                           </FieldInfo>

                '<Value>
                '    <Name><%= ValueInfo.Name %></Name>
                '    <Valid><%= ValueInfo.Valid %></Valid>
                '    <Generate><%= ValueInfo.Generate %></Generate>
                '    <NumType><%= ValueInfo.NumType %></NumType>
                '    <Format><%= ValueInfo.Format %></Format>
                '    <Alignment><%= ValueInfo.Alignment %></Alignment>
                '    <ValueLabel><%= ValueInfo.ValueLabel %></ValueLabel>
                '    <Units><%= ValueInfo.Units %></Units>
                '    <LabelPrefix><%= ValueInfo.LabelPrefix %></LabelPrefix>
                '    <SeriesLabel><%= ValueInfo.SeriesLabel %></SeriesLabel>
                '    <Description><%= ValueInfo.Description %></Description>
                '</Value>

                '<Probability>
                '    <Name><%= ProbabilityInfo.Name %></Name>
                '    <Valid><%= ProbabilityInfo.Valid %></Valid>
                '    <Generate><%= ProbabilityInfo.Generate %></Generate>
                '    <NumType><%= ProbabilityInfo.NumType %></NumType>
                '    <Format><%= ProbabilityInfo.Format %></Format>
                '    <Alignment><%= ProbabilityInfo.Alignment %></Alignment>
                '    <ValueLabel><%= ProbabilityInfo.ValueLabel %></ValueLabel>
                '    <Units><%= ProbabilityInfo.Units %></Units>
                '    <LabelPrefix><%= ProbabilityInfo.LabelPrefix %></LabelPrefix>
                '    <SeriesLabel><%= ProbabilityInfo.SeriesLabel %></SeriesLabel>
                '    <Description><%= ProbabilityInfo.Description %></Description>
                '</Probability>


                Return XDoc
            Case "Discrete"
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <FieldInfo>
                               <PMF>
                                   <Name><%= PmfInfo.Name %></Name>
                                   <Valid><%= PmfInfo.Valid %></Valid>
                                   <Generate><%= PmfInfo.Generate %></Generate>
                                   <NumType><%= PmfInfo.NumType %></NumType>
                                   <Format><%= PmfInfo.Format %></Format>
                                   <Alignment><%= PmfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= PmfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= PmfInfo.Units %></Units>
                                   <LabelPrefix><%= PmfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= PmfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= PmfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= PmfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= PmfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= PmfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= PmfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= PmfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= PmfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= PmfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= PmfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= PmfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </PMF>
                               <PMFLn>
                                   <Name><%= PmfLnInfo.Name %></Name>
                                   <Valid><%= PmfLnInfo.Valid %></Valid>
                                   <Generate><%= PmfLnInfo.Generate %></Generate>
                                   <NumType><%= PmfLnInfo.NumType %></NumType>
                                   <Format><%= PmfLnInfo.Format %></Format>
                                   <Alignment><%= PmfLnInfo.Alignment %></Alignment>
                                   <ValueLabel><%= PmfLnInfo.ValueLabel %></ValueLabel>
                                   <Units><%= PmfLnInfo.Units %></Units>
                                   <LabelPrefix><%= PmfLnInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= PmfLnInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= PmfLnInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= PmfLnInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= PmfLnInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= PmfLnInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= PmfLnInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= PmfLnInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= PmfLnInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= PmfLnInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= PmfLnInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= PmfLnInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </PMFLn>
                               <CDF>
                                   <Name><%= CdfInfo.Name %></Name>
                                   <Valid><%= CdfInfo.Valid %></Valid>
                                   <Generate><%= CdfInfo.Generate %></Generate>
                                   <NumType><%= CdfInfo.NumType %></NumType>
                                   <Format><%= CdfInfo.Format %></Format>
                                   <Alignment><%= CdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= CdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= CdfInfo.Units %></Units>
                                   <LabelPrefix><%= CdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= CdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= CdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= CdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= CdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= CdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= CdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= CdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= CdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= CdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= CdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= CdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </CDF>
                               <RevCDF>
                                   <Name><%= RevCdfInfo.Name %></Name>
                                   <Valid><%= RevCdfInfo.Valid %></Valid>
                                   <Generate><%= RevCdfInfo.Generate %></Generate>
                                   <NumType><%= RevCdfInfo.NumType %></NumType>
                                   <Format><%= RevCdfInfo.Format %></Format>
                                   <Alignment><%= RevCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= RevCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= RevCdfInfo.Units %></Units>
                                   <LabelPrefix><%= RevCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= RevCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= RevCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= RevCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= RevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= RevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= RevCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= RevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= RevCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= RevCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= RevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= RevCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </RevCDF>
                               <InvCDF>
                                   <Name><%= InvCdfInfo.Name %></Name>
                                   <Valid><%= InvCdfInfo.Valid %></Valid>
                                   <Generate><%= InvCdfInfo.Generate %></Generate>
                                   <NumType><%= InvCdfInfo.NumType %></NumType>
                                   <Format><%= InvCdfInfo.Format %></Format>
                                   <Alignment><%= InvCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= InvCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= InvCdfInfo.Units %></Units>
                                   <LabelPrefix><%= InvCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= InvCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= InvCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= InvCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= InvCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= InvCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= InvCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= InvCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= InvCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= InvCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= InvCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= InvCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </InvCDF>
                               <InvRevCDF>
                                   <Name><%= InvRevCdfInfo.Name %></Name>
                                   <Valid><%= InvRevCdfInfo.Valid %></Valid>
                                   <Generate><%= InvRevCdfInfo.Generate %></Generate>
                                   <NumType><%= InvRevCdfInfo.NumType %></NumType>
                                   <Format><%= InvRevCdfInfo.Format %></Format>
                                   <Alignment><%= InvRevCdfInfo.Alignment %></Alignment>
                                   <ValueLabel><%= InvRevCdfInfo.ValueLabel %></ValueLabel>
                                   <Units><%= InvRevCdfInfo.Units %></Units>
                                   <LabelPrefix><%= InvRevCdfInfo.LabelPrefix %></LabelPrefix>
                                   <SeriesLabel><%= InvRevCdfInfo.SeriesLabel %></SeriesLabel>
                                   <Description><%= InvRevCdfInfo.Description %></Description>
                                   <Display>
                                       <MarkerFill><%= InvRevCdfInfo.Display.MarkerFill %></MarkerFill>
                                       <MarkerColor><%= InvRevCdfInfo.Display.MarkerColor.ToArgb.ToString %></MarkerColor>
                                       <BorderColor><%= InvRevCdfInfo.Display.BorderColor.ToArgb.ToString %></BorderColor>
                                       <BorderWidth><%= InvRevCdfInfo.Display.BorderWidth %></BorderWidth>
                                       <MarkerStyle><%= InvRevCdfInfo.Display.MarkerStyle %></MarkerStyle>
                                       <MarkerSize><%= InvRevCdfInfo.Display.MarkerSize %></MarkerSize>
                                       <MarkerStep><%= InvRevCdfInfo.Display.MarkerStep %></MarkerStep>
                                       <LineColor><%= InvRevCdfInfo.Display.LineColor.ToArgb.ToString %></LineColor>
                                       <LineWidth><%= InvRevCdfInfo.Display.LineWidth %></LineWidth>
                                   </Display>
                               </InvRevCDF>
                           </FieldInfo>

                '<Value>
                '    <Name><%= ValueInfo.Name %></Name>
                '    <Valid><%= ValueInfo.Valid %></Valid>
                '    <Generate><%= ValueInfo.Generate %></Generate>
                '    <NumType><%= ValueInfo.NumType %></NumType>
                '    <Format><%= ValueInfo.Format %></Format>
                '    <Alignment><%= ValueInfo.Alignment %></Alignment>
                '    <ValueLabel><%= ValueInfo.ValueLabel %></ValueLabel>
                '    <Units><%= ValueInfo.Units %></Units>
                '    <LabelPrefix><%= ValueInfo.LabelPrefix %></LabelPrefix>
                '    <SeriesLabel><%= ValueInfo.SeriesLabel %></SeriesLabel>
                '    <Description><%= ValueInfo.Description %></Description>
                '</Value>

                Return XDoc
            Case Else
                Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                           <FieldInfo>
                           </FieldInfo>
                Return XDoc
        End Select
    End Function

    'Public Sub FromXDoc(ByRef XDoc As System.Xml.Linq.XDocument)
    Public Sub FromXDoc(myDistrib As IEnumerable(Of XElement))
        'Read the Distribution data from the Distribution Elements of an XDocument.
        'Note: The set of XElements are a Distribution subset of the XDocument that stores the entire Distribution Model.

        Name = myDistrib.<Name>.Value
        Description = myDistrib.<Description>.Value
        Usage = myDistrib.<Usage>.Value
        Continuity = myDistrib.<Continuity>.Value
        NParams = myDistrib.<NParams>.Value
        RangeMin = myDistrib.<RangeMin>.Value
        RangeMax = myDistrib.<RangeMax>.Value
        Suffix = myDistrib.<Suffix>.Value
        'If myDistrib.<AutoUpdateSuffix>.Value <> Nothing Then AutoUpdateSuffix = myDistrib.<AutoUpdateSuffix>.Value Else AutoUpdateSuffix = True
        If myDistrib.<AutoUpdateSuffix>.Value <> Nothing Then AutoUpdateLabels = myDistrib.<AutoUpdateSuffix>.Value Else AutoUpdateLabels = True '(AutoUpdateSuffix property was renamed AutoUpdateLabels)
        If myDistrib.<AutoUpdateLabels>.Value <> Nothing Then AutoUpdateLabels = myDistrib.<AutoUpdateLabels>.Value Else AutoUpdateLabels = True

        If myDistrib.<RandomVariable>.<Name>.Value <> Nothing Then RVName = myDistrib.<RandomVariable>.<Name>.Value Else RVName = ""
        If myDistrib.<RandomVariable>.<Description>.Value <> Nothing Then RVDescription = myDistrib.<RandomVariable>.<Description>.Value Else RVDescription = ""
        If myDistrib.<RandomVariable>.<Measurement>.Value <> Nothing Then RVMeasurement = myDistrib.<RandomVariable>.<Measurement>.Value Else RVDescription = "Value"
        If myDistrib.<RandomVariable>.<Units>.Value <> Nothing Then RVUnits = myDistrib.<RandomVariable>.<Units>.Value Else RVUnits = ""
        If myDistrib.<RandomVariable>.<AbbreviatedUnits>.Value <> Nothing Then RVAbbrevUnits = myDistrib.<RandomVariable>.<AbbreviatedUnits>.Value Else RVAbbrevUnits = ""

        Display.MarkerFill = myDistrib.<Display>.<MarkerFill>.Value
        Display.MarkerColor = Color.FromArgb(myDistrib.<Display>.<MarkerColor>.Value)
        Display.BorderColor = Color.FromArgb(myDistrib.<Display>.<BorderColor>.Value)
        Display.BorderWidth = myDistrib.<Display>.<BorderWidth>.Value
        Display.MarkerStyle = myDistrib.<Display>.<MarkerStyle>.Value
        Display.MarkerSize = myDistrib.<Display>.<MarkerSize>.Value
        Display.MarkerStep = myDistrib.<Display>.<MarkerStep>.Value
        Display.LineColor = Color.FromArgb(myDistrib.<Display>.<LineColor>.Value)
        Display.LineWidth = myDistrib.<Display>.<LineWidth>.Value

        'Read the Parameter Information
        If NParams > 0 Then
            ParamA.Name = myDistrib.<ParameterInfo>.<ParamA>.<Name>.Value
            ParamA.Symbol = myDistrib.<ParameterInfo>.<ParamA>.<Symbol>.Value
            ParamA.Value = myDistrib.<ParameterInfo>.<ParamA>.<Value>.Value
            ParamA.Type = myDistrib.<ParameterInfo>.<ParamA>.<Type>.Value
            ParamA.NumberType = myDistrib.<ParameterInfo>.<ParamA>.<NumberType>.Value
            ParamA.Minimum = myDistrib.<ParameterInfo>.<ParamA>.<Minimum>.Value
            ParamA.Maximum = myDistrib.<ParameterInfo>.<ParamA>.<Maximum>.Value
            ParamA.AdjustMin = myDistrib.<ParameterInfo>.<ParamA>.<AdjustMin>.Value
            ParamA.AdjustMax = myDistrib.<ParameterInfo>.<ParamA>.<AdjustMax>.Value
            ParamA.Increment = myDistrib.<ParameterInfo>.<ParamA>.<Increment>.Value
            ParamA.Description = myDistrib.<ParameterInfo>.<ParamA>.<Description>.Value
            If NParams > 1 Then
                ParamB.Name = myDistrib.<ParameterInfo>.<ParamB>.<Name>.Value
                ParamB.Symbol = myDistrib.<ParameterInfo>.<ParamB>.<Symbol>.Value
                ParamB.Value = myDistrib.<ParameterInfo>.<ParamB>.<Value>.Value
                ParamB.Type = myDistrib.<ParameterInfo>.<ParamB>.<Type>.Value
                ParamB.NumberType = myDistrib.<ParameterInfo>.<ParamB>.<NumberType>.Value
                ParamB.Minimum = myDistrib.<ParameterInfo>.<ParamB>.<Minimum>.Value
                ParamB.Maximum = myDistrib.<ParameterInfo>.<ParamB>.<Maximum>.Value
                ParamB.AdjustMin = myDistrib.<ParameterInfo>.<ParamB>.<AdjustMin>.Value
                ParamB.AdjustMax = myDistrib.<ParameterInfo>.<ParamB>.<AdjustMax>.Value
                ParamB.Increment = myDistrib.<ParameterInfo>.<ParamB>.<Increment>.Value
                ParamB.Description = myDistrib.<ParameterInfo>.<ParamB>.<Description>.Value
                If NParams > 2 Then
                    ParamC.Name = myDistrib.<ParameterInfo>.<ParamC>.<Name>.Value
                    ParamC.Symbol = myDistrib.<ParameterInfo>.<ParamC>.<Symbol>.Value
                    ParamC.Value = myDistrib.<ParameterInfo>.<ParamC>.<Value>.Value
                    ParamC.Type = myDistrib.<ParameterInfo>.<ParamC>.<Type>.Value
                    ParamC.NumberType = myDistrib.<ParameterInfo>.<ParamC>.<NumberType>.Value
                    ParamC.Minimum = myDistrib.<ParameterInfo>.<ParamC>.<Minimum>.Value
                    ParamC.Maximum = myDistrib.<ParameterInfo>.<ParamC>.<Maximum>.Value
                    ParamC.AdjustMin = myDistrib.<ParameterInfo>.<ParamC>.<AdjustMin>.Value
                    ParamC.AdjustMax = myDistrib.<ParameterInfo>.<ParamC>.<AdjustMax>.Value
                    ParamC.Increment = myDistrib.<ParameterInfo>.<ParamC>.<Increment>.Value
                    ParamC.Description = myDistrib.<ParameterInfo>.<ParamC>.<Description>.Value
                    If NParams > 3 Then
                        ParamD.Name = myDistrib.<ParameterInfo>.<ParamD>.<Name>.Value
                        ParamD.Symbol = myDistrib.<ParameterInfo>.<ParamD>.<Symbol>.Value
                        ParamD.Value = myDistrib.<ParameterInfo>.<ParamD>.<Value>.Value
                        ParamD.Type = myDistrib.<ParameterInfo>.<ParamD>.<Type>.Value
                        ParamD.NumberType = myDistrib.<ParameterInfo>.<ParamD>.<NumberType>.Value
                        ParamD.Minimum = myDistrib.<ParameterInfo>.<ParamD>.<Minimum>.Value
                        ParamD.Maximum = myDistrib.<ParameterInfo>.<ParamD>.<Maximum>.Value
                        ParamD.AdjustMin = myDistrib.<ParameterInfo>.<ParamD>.<AdjustMin>.Value
                        ParamD.AdjustMax = myDistrib.<ParameterInfo>.<ParamD>.<AdjustMax>.Value
                        ParamD.Increment = myDistrib.<ParameterInfo>.<ParamD>.<Increment>.Value
                        ParamD.Description = myDistrib.<ParameterInfo>.<ParamD>.<Description>.Value
                        If NParams > 4 Then
                            ParamE.Name = myDistrib.<ParameterInfo>.<ParamE>.<Name>.Value
                            ParamE.Symbol = myDistrib.<ParameterInfo>.<ParamE>.<Symbol>.Value
                            ParamE.Value = myDistrib.<ParameterInfo>.<ParamE>.<Value>.Value
                            ParamE.Type = myDistrib.<ParameterInfo>.<ParamE>.<Type>.Value
                            ParamE.NumberType = myDistrib.<ParameterInfo>.<ParamE>.<NumberType>.Value
                            ParamE.Minimum = myDistrib.<ParameterInfo>.<ParamE>.<Minimum>.Value
                            ParamE.Maximum = myDistrib.<ParameterInfo>.<ParamE>.<Maximum>.Value
                            ParamE.AdjustMin = myDistrib.<ParameterInfo>.<ParamE>.<AdjustMin>.Value
                            ParamE.AdjustMax = myDistrib.<ParameterInfo>.<ParamE>.<AdjustMax>.Value
                            ParamE.Increment = myDistrib.<ParameterInfo>.<ParamE>.<Increment>.Value
                            ParamE.Description = myDistrib.<ParameterInfo>.<ParamE>.<Description>.Value
                            If NParams > 5 Then
                                'Not a valid number of parameters.
                            End If
                        End If
                    End If
                End If
            End If
        End If

        'Read the Field Info:
        Select Case Continuity
            Case "Continuous"
                'ValueInfo.Name = myDistrib.<FieldInfo>.<Value>.<Name>.Value
                'ValueInfo.Valid = myDistrib.<FieldInfo>.<Value>.<Valid>.Value
                'ValueInfo.Generate = myDistrib.<FieldInfo>.<Value>.<Generate>.Value
                'ValueInfo.NumType = myDistrib.<FieldInfo>.<Value>.<NumType>.Value
                'ValueInfo.Format = myDistrib.<FieldInfo>.<Value>.<Format>.Value
                'ValueInfo.Alignment = myDistrib.<FieldInfo>.<Value>.<Alignment>.Value
                'ValueInfo.ValueLabel = myDistrib.<FieldInfo>.<Value>.<ValueLabel>.Value
                'ValueInfo.Units = myDistrib.<FieldInfo>.<Value>.<Units>.Value
                'ValueInfo.LabelPrefix = myDistrib.<FieldInfo>.<Value>.<LabelPrefix>.Value
                'ValueInfo.SeriesLabel = myDistrib.<FieldInfo>.<Value>.<SeriesLabel>.Value
                'ValueInfo.Description = myDistrib.<FieldInfo>.<Value>.<Description>.Value

                PdfInfo.Name = myDistrib.<FieldInfo>.<PDF>.<Name>.Value
                PdfInfo.Valid = myDistrib.<FieldInfo>.<PDF>.<Valid>.Value
                PdfInfo.Generate = myDistrib.<FieldInfo>.<PDF>.<Generate>.Value
                PdfInfo.NumType = myDistrib.<FieldInfo>.<PDF>.<NumType>.Value
                PdfInfo.Format = myDistrib.<FieldInfo>.<PDF>.<Format>.Value
                PdfInfo.Alignment = myDistrib.<FieldInfo>.<PDF>.<Alignment>.Value
                PdfInfo.ValueLabel = myDistrib.<FieldInfo>.<PDF>.<ValueLabel>.Value
                PdfInfo.Units = myDistrib.<FieldInfo>.<PDF>.<Units>.Value
                PdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<PDF>.<LabelPrefix>.Value
                PdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<PDF>.<SeriesLabel>.Value
                PdfInfo.Description = myDistrib.<FieldInfo>.<PDF>.<Description>.Value
                PdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<PDF>.<Display>.<MarkerFill>.Value
                PdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDF>.<Display>.<MarkerColor>.Value)
                PdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDF>.<Display>.<BorderColor>.Value)
                PdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<PDF>.<Display>.<BorderWidth>.Value
                PdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<PDF>.<Display>.<MarkerStyle>.Value
                PdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<PDF>.<Display>.<MarkerSize>.Value
                PdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<PDF>.<Display>.<MarkerStep>.Value
                PdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDF>.<Display>.<LineColor>.Value)
                PdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<PDF>.<Display>.<LineWidth>.Value

                PdfLnInfo.Name = myDistrib.<FieldInfo>.<PDFLn>.<Name>.Value
                PdfLnInfo.Valid = myDistrib.<FieldInfo>.<PDFLn>.<Valid>.Value
                PdfLnInfo.Generate = myDistrib.<FieldInfo>.<PDFLn>.<Generate>.Value
                PdfLnInfo.NumType = myDistrib.<FieldInfo>.<PDFLn>.<NumType>.Value
                PdfLnInfo.Format = myDistrib.<FieldInfo>.<PDFLn>.<Format>.Value
                PdfLnInfo.Alignment = myDistrib.<FieldInfo>.<PDFLn>.<Alignment>.Value
                PdfLnInfo.ValueLabel = myDistrib.<FieldInfo>.<PDFLn>.<ValueLabel>.Value
                PdfLnInfo.Units = myDistrib.<FieldInfo>.<PDFLn>.<Units>.Value
                PdfLnInfo.LabelPrefix = myDistrib.<FieldInfo>.<PDFLn>.<LabelPrefix>.Value
                PdfLnInfo.SeriesLabel = myDistrib.<FieldInfo>.<PDFLn>.<SeriesLabel>.Value
                PdfLnInfo.Description = myDistrib.<FieldInfo>.<PDFLn>.<Description>.Value
                PdfLnInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<MarkerFill>.Value
                PdfLnInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDFLn>.<Display>.<MarkerColor>.Value)
                PdfLnInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDFLn>.<Display>.<BorderColor>.Value)
                PdfLnInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<BorderWidth>.Value
                PdfLnInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<MarkerStyle>.Value
                PdfLnInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<MarkerSize>.Value
                PdfLnInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<MarkerStep>.Value
                PdfLnInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<PDFLn>.<Display>.<LineColor>.Value)
                PdfLnInfo.Display.LineWidth = myDistrib.<FieldInfo>.<PDFLn>.<Display>.<LineWidth>.Value

                CdfInfo.Name = myDistrib.<FieldInfo>.<CDF>.<Name>.Value
                CdfInfo.Valid = myDistrib.<FieldInfo>.<CDF>.<Valid>.Value
                CdfInfo.Generate = myDistrib.<FieldInfo>.<CDF>.<Generate>.Value
                CdfInfo.NumType = myDistrib.<FieldInfo>.<CDF>.<NumType>.Value
                CdfInfo.Format = myDistrib.<FieldInfo>.<CDF>.<Format>.Value
                CdfInfo.Alignment = myDistrib.<FieldInfo>.<CDF>.<Alignment>.Value
                CdfInfo.ValueLabel = myDistrib.<FieldInfo>.<CDF>.<ValueLabel>.Value
                CdfInfo.Units = myDistrib.<FieldInfo>.<CDF>.<Units>.Value
                CdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<CDF>.<LabelPrefix>.Value
                CdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<CDF>.<SeriesLabel>.Value
                CdfInfo.Description = myDistrib.<FieldInfo>.<CDF>.<Description>.Value
                CdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerFill>.Value
                CdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerColor>.Value)
                CdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<BorderColor>.Value)
                CdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<CDF>.<Display>.<BorderWidth>.Value
                CdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerStyle>.Value
                CdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerSize>.Value
                CdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerStep>.Value
                CdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<LineColor>.Value)
                CdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<CDF>.<Display>.<LineWidth>.Value

                RevCdfInfo.Name = myDistrib.<FieldInfo>.<RevCDF>.<Name>.Value
                RevCdfInfo.Valid = myDistrib.<FieldInfo>.<RevCDF>.<Valid>.Value
                RevCdfInfo.Generate = myDistrib.<FieldInfo>.<RevCDF>.<Generate>.Value
                RevCdfInfo.NumType = myDistrib.<FieldInfo>.<RevCDF>.<NumType>.Value
                RevCdfInfo.Format = myDistrib.<FieldInfo>.<RevCDF>.<Format>.Value
                RevCdfInfo.Alignment = myDistrib.<FieldInfo>.<RevCDF>.<Alignment>.Value
                RevCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<RevCDF>.<ValueLabel>.Value
                RevCdfInfo.Units = myDistrib.<FieldInfo>.<RevCDF>.<Units>.Value
                RevCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<RevCDF>.<LabelPrefix>.Value
                RevCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<RevCDF>.<SeriesLabel>.Value
                RevCdfInfo.Description = myDistrib.<FieldInfo>.<RevCDF>.<Description>.Value
                RevCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerFill>.Value
                RevCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerColor>.Value)
                RevCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<BorderColor>.Value)
                RevCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<BorderWidth>.Value
                RevCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerStyle>.Value
                RevCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerSize>.Value
                RevCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerStep>.Value
                RevCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<LineColor>.Value)
                RevCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<LineWidth>.Value

                'ProbabilityInfo.Name = myDistrib.<FieldInfo>.<Probability>.<Name>.Value
                'ProbabilityInfo.Valid = myDistrib.<FieldInfo>.<Probability>.<Valid>.Value
                'ProbabilityInfo.Generate = myDistrib.<FieldInfo>.<Probability>.<Generate>.Value
                'ProbabilityInfo.NumType = myDistrib.<FieldInfo>.<Probability>.<NumType>.Value
                'ProbabilityInfo.Format = myDistrib.<FieldInfo>.<Probability>.<Format>.Value
                'ProbabilityInfo.Alignment = myDistrib.<FieldInfo>.<Probability>.<Alignment>.Value
                'ProbabilityInfo.ValueLabel = myDistrib.<FieldInfo>.<Probability>.<ValueLabel>.Value
                'ProbabilityInfo.Units = myDistrib.<FieldInfo>.<Probability>.<Units>.Value
                'ProbabilityInfo.LabelPrefix = myDistrib.<FieldInfo>.<Probability>.<LabelPrefix>.Value
                'ProbabilityInfo.SeriesLabel = myDistrib.<FieldInfo>.<Probability>.<SeriesLabel>.Value
                'ProbabilityInfo.Description = myDistrib.<FieldInfo>.<Probability>.<Description>.Value

                InvCdfInfo.Name = myDistrib.<FieldInfo>.<InvCDF>.<Name>.Value
                InvCdfInfo.Valid = myDistrib.<FieldInfo>.<InvCDF>.<Valid>.Value
                InvCdfInfo.Generate = myDistrib.<FieldInfo>.<InvCDF>.<Generate>.Value
                InvCdfInfo.NumType = myDistrib.<FieldInfo>.<InvCDF>.<NumType>.Value
                InvCdfInfo.Format = myDistrib.<FieldInfo>.<InvCDF>.<Format>.Value
                InvCdfInfo.Alignment = myDistrib.<FieldInfo>.<InvCDF>.<Alignment>.Value
                InvCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<InvCDF>.<ValueLabel>.Value
                InvCdfInfo.Units = myDistrib.<FieldInfo>.<InvCDF>.<Units>.Value
                InvCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<InvCDF>.<LabelPrefix>.Value
                InvCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<InvCDF>.<SeriesLabel>.Value
                InvCdfInfo.Description = myDistrib.<FieldInfo>.<InvCDF>.<Description>.Value
                InvCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerFill>.Value
                InvCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerColor>.Value)
                InvCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<BorderColor>.Value)
                InvCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<BorderWidth>.Value
                InvCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerStyle>.Value
                InvCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerSize>.Value
                InvCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerStep>.Value
                InvCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<LineColor>.Value)
                InvCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<LineWidth>.Value

                InvRevCdfInfo.Name = myDistrib.<FieldInfo>.<InvRevCDF>.<Name>.Value
                InvRevCdfInfo.Valid = myDistrib.<FieldInfo>.<InvRevCDF>.<Valid>.Value
                InvRevCdfInfo.Generate = myDistrib.<FieldInfo>.<InvRevCDF>.<Generate>.Value
                InvRevCdfInfo.NumType = myDistrib.<FieldInfo>.<InvRevCDF>.<NumType>.Value
                InvRevCdfInfo.Format = myDistrib.<FieldInfo>.<InvRevCDF>.<Format>.Value
                InvRevCdfInfo.Alignment = myDistrib.<FieldInfo>.<InvRevCDF>.<Alignment>.Value
                InvRevCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<InvRevCDF>.<ValueLabel>.Value
                InvRevCdfInfo.Units = myDistrib.<FieldInfo>.<InvRevCDF>.<Units>.Value
                InvRevCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<InvRevCDF>.<LabelPrefix>.Value
                InvRevCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<InvRevCDF>.<SeriesLabel>.Value
                InvRevCdfInfo.Description = myDistrib.<FieldInfo>.<InvRevCDF>.<Description>.Value
                InvRevCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerFill>.Value
                InvRevCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerColor>.Value)
                InvRevCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<BorderColor>.Value)
                InvRevCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<BorderWidth>.Value
                InvRevCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerStyle>.Value
                InvRevCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerSize>.Value
                InvRevCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerStep>.Value
                InvRevCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<LineColor>.Value)
                InvRevCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<LineWidth>.Value

            Case "Discrete"
                'ValueInfo.Name = myDistrib.<FieldInfo>.<Value>.<Name>.Value
                'ValueInfo.Valid = myDistrib.<FieldInfo>.<Value>.<Valid>.Value
                'ValueInfo.Generate = myDistrib.<FieldInfo>.<Value>.<Generate>.Value
                'ValueInfo.NumType = myDistrib.<FieldInfo>.<Value>.<NumType>.Value
                'ValueInfo.Format = myDistrib.<FieldInfo>.<Value>.<Format>.Value
                'ValueInfo.Alignment = myDistrib.<FieldInfo>.<Value>.<Alignment>.Value
                'ValueInfo.ValueLabel = myDistrib.<FieldInfo>.<Value>.<ValueLabel>.Value
                'ValueInfo.Units = myDistrib.<FieldInfo>.<Value>.<Units>.Value
                'ValueInfo.LabelPrefix = myDistrib.<FieldInfo>.<Value>.<LabelPrefix>.Value
                'ValueInfo.SeriesLabel = myDistrib.<FieldInfo>.<Value>.<SeriesLabel>.Value
                'ValueInfo.Description = myDistrib.<FieldInfo>.<Value>.<Description>.Value

                PmfInfo.Name = myDistrib.<FieldInfo>.<PMF>.<Name>.Value
                PmfInfo.Valid = myDistrib.<FieldInfo>.<PMF>.<Valid>.Value
                PmfInfo.Generate = myDistrib.<FieldInfo>.<PMF>.<Generate>.Value
                PmfInfo.NumType = myDistrib.<FieldInfo>.<PMF>.<NumType>.Value
                PmfInfo.Format = myDistrib.<FieldInfo>.<PMF>.<Format>.Value
                PmfInfo.Alignment = myDistrib.<FieldInfo>.<PMF>.<Alignment>.Value
                PmfInfo.ValueLabel = myDistrib.<FieldInfo>.<PMF>.<ValueLabel>.Value
                PmfInfo.Units = myDistrib.<FieldInfo>.<PMF>.<Units>.Value
                PmfInfo.LabelPrefix = myDistrib.<FieldInfo>.<PMF>.<LabelPrefix>.Value
                PmfInfo.SeriesLabel = myDistrib.<FieldInfo>.<PMF>.<SeriesLabel>.Value
                PmfInfo.Description = myDistrib.<FieldInfo>.<PMF>.<Description>.Value
                PmfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<PMF>.<Display>.<MarkerFill>.Value
                PmfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMF>.<Display>.<MarkerColor>.Value)
                PmfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMF>.<Display>.<BorderColor>.Value)
                PmfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<PMF>.<Display>.<BorderWidth>.Value
                PmfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<PMF>.<Display>.<MarkerStyle>.Value
                PmfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<PMF>.<Display>.<MarkerSize>.Value
                PmfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<PMF>.<Display>.<MarkerStep>.Value
                PmfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMF>.<Display>.<LineColor>.Value)
                PmfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<PMF>.<Display>.<LineWidth>.Value

                PmfLnInfo.Name = myDistrib.<FieldInfo>.<PMFLn>.<Name>.Value
                PmfLnInfo.Valid = myDistrib.<FieldInfo>.<PMFLn>.<Valid>.Value
                PmfLnInfo.Generate = myDistrib.<FieldInfo>.<PMFLn>.<Generate>.Value
                PmfLnInfo.NumType = myDistrib.<FieldInfo>.<PMFLn>.<NumType>.Value
                PmfLnInfo.Format = myDistrib.<FieldInfo>.<PMFLn>.<Format>.Value
                PmfLnInfo.Alignment = myDistrib.<FieldInfo>.<PMFLn>.<Alignment>.Value
                PmfLnInfo.ValueLabel = myDistrib.<FieldInfo>.<PMFLn>.<ValueLabel>.Value
                PmfLnInfo.Units = myDistrib.<FieldInfo>.<PMFLn>.<Units>.Value
                PmfLnInfo.LabelPrefix = myDistrib.<FieldInfo>.<PMFLn>.<LabelPrefix>.Value
                PmfLnInfo.SeriesLabel = myDistrib.<FieldInfo>.<PMFLn>.<SeriesLabel>.Value
                PmfLnInfo.Description = myDistrib.<FieldInfo>.<PMFLn>.<Description>.Value
                PmfLnInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<MarkerFill>.Value
                PmfLnInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMFLn>.<Display>.<MarkerColor>.Value)
                PmfLnInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMFLn>.<Display>.<BorderColor>.Value)
                PmfLnInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<BorderWidth>.Value
                PmfLnInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<MarkerStyle>.Value
                PmfLnInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<MarkerSize>.Value
                PmfLnInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<MarkerStep>.Value
                PmfLnInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<PMFLn>.<Display>.<LineColor>.Value)
                PmfLnInfo.Display.LineWidth = myDistrib.<FieldInfo>.<PMFLn>.<Display>.<LineWidth>.Value

                CdfInfo.Name = myDistrib.<FieldInfo>.<CDF>.<Name>.Value
                CdfInfo.Valid = myDistrib.<FieldInfo>.<CDF>.<Valid>.Value
                CdfInfo.Generate = myDistrib.<FieldInfo>.<CDF>.<Generate>.Value
                CdfInfo.NumType = myDistrib.<FieldInfo>.<CDF>.<NumType>.Value
                CdfInfo.Format = myDistrib.<FieldInfo>.<CDF>.<Format>.Value
                CdfInfo.Alignment = myDistrib.<FieldInfo>.<CDF>.<Alignment>.Value
                CdfInfo.ValueLabel = myDistrib.<FieldInfo>.<CDF>.<ValueLabel>.Value
                CdfInfo.Units = myDistrib.<FieldInfo>.<CDF>.<Units>.Value
                CdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<CDF>.<LabelPrefix>.Value
                CdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<CDF>.<SeriesLabel>.Value
                CdfInfo.Description = myDistrib.<FieldInfo>.<CDF>.<Description>.Value
                CdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerFill>.Value
                CdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerColor>.Value)
                CdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<BorderColor>.Value)
                CdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<CDF>.<Display>.<BorderWidth>.Value
                CdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerStyle>.Value
                CdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerSize>.Value
                CdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<CDF>.<Display>.<MarkerStep>.Value
                CdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<CDF>.<Display>.<LineColor>.Value)
                CdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<CDF>.<Display>.<LineWidth>.Value

                'ADDED 4Sep22:
                RevCdfInfo.Name = myDistrib.<FieldInfo>.<RevCDF>.<Name>.Value
                RevCdfInfo.Valid = myDistrib.<FieldInfo>.<RevCDF>.<Valid>.Value
                RevCdfInfo.Generate = myDistrib.<FieldInfo>.<RevCDF>.<Generate>.Value
                RevCdfInfo.NumType = myDistrib.<FieldInfo>.<RevCDF>.<NumType>.Value
                RevCdfInfo.Format = myDistrib.<FieldInfo>.<RevCDF>.<Format>.Value
                RevCdfInfo.Alignment = myDistrib.<FieldInfo>.<RevCDF>.<Alignment>.Value
                RevCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<RevCDF>.<ValueLabel>.Value
                RevCdfInfo.Units = myDistrib.<FieldInfo>.<RevCDF>.<Units>.Value
                RevCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<RevCDF>.<LabelPrefix>.Value
                RevCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<RevCDF>.<SeriesLabel>.Value
                RevCdfInfo.Description = myDistrib.<FieldInfo>.<RevCDF>.<Description>.Value
                RevCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerFill>.Value
                RevCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerColor>.Value)
                RevCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<BorderColor>.Value)
                RevCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<BorderWidth>.Value
                RevCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerStyle>.Value
                RevCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerSize>.Value
                RevCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<MarkerStep>.Value
                RevCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<RevCDF>.<Display>.<LineColor>.Value)
                RevCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<RevCDF>.<Display>.<LineWidth>.Value

                'ADDED 4Sep22:
                InvCdfInfo.Name = myDistrib.<FieldInfo>.<InvCDF>.<Name>.Value
                InvCdfInfo.Valid = myDistrib.<FieldInfo>.<InvCDF>.<Valid>.Value
                InvCdfInfo.Generate = myDistrib.<FieldInfo>.<InvCDF>.<Generate>.Value
                InvCdfInfo.NumType = myDistrib.<FieldInfo>.<InvCDF>.<NumType>.Value
                InvCdfInfo.Format = myDistrib.<FieldInfo>.<InvCDF>.<Format>.Value
                InvCdfInfo.Alignment = myDistrib.<FieldInfo>.<InvCDF>.<Alignment>.Value
                InvCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<InvCDF>.<ValueLabel>.Value
                InvCdfInfo.Units = myDistrib.<FieldInfo>.<InvCDF>.<Units>.Value
                InvCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<InvCDF>.<LabelPrefix>.Value
                InvCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<InvCDF>.<SeriesLabel>.Value
                InvCdfInfo.Description = myDistrib.<FieldInfo>.<InvCDF>.<Description>.Value
                InvCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerFill>.Value
                InvCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerColor>.Value)
                InvCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<BorderColor>.Value)
                InvCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<BorderWidth>.Value
                InvCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerStyle>.Value
                InvCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerSize>.Value
                InvCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<MarkerStep>.Value
                InvCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvCDF>.<Display>.<LineColor>.Value)
                InvCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<InvCDF>.<Display>.<LineWidth>.Value

                'ADDED 4Sep22:
                InvRevCdfInfo.Name = myDistrib.<FieldInfo>.<InvRevCDF>.<Name>.Value
                InvRevCdfInfo.Valid = myDistrib.<FieldInfo>.<InvRevCDF>.<Valid>.Value
                InvRevCdfInfo.Generate = myDistrib.<FieldInfo>.<InvRevCDF>.<Generate>.Value
                InvRevCdfInfo.NumType = myDistrib.<FieldInfo>.<InvRevCDF>.<NumType>.Value
                InvRevCdfInfo.Format = myDistrib.<FieldInfo>.<InvRevCDF>.<Format>.Value
                InvRevCdfInfo.Alignment = myDistrib.<FieldInfo>.<InvRevCDF>.<Alignment>.Value
                InvRevCdfInfo.ValueLabel = myDistrib.<FieldInfo>.<InvRevCDF>.<ValueLabel>.Value
                InvRevCdfInfo.Units = myDistrib.<FieldInfo>.<InvRevCDF>.<Units>.Value
                InvRevCdfInfo.LabelPrefix = myDistrib.<FieldInfo>.<InvRevCDF>.<LabelPrefix>.Value
                InvRevCdfInfo.SeriesLabel = myDistrib.<FieldInfo>.<InvRevCDF>.<SeriesLabel>.Value
                InvRevCdfInfo.Description = myDistrib.<FieldInfo>.<InvRevCDF>.<Description>.Value
                InvRevCdfInfo.Display.MarkerFill = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerFill>.Value
                InvRevCdfInfo.Display.MarkerColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerColor>.Value)
                InvRevCdfInfo.Display.BorderColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<BorderColor>.Value)
                InvRevCdfInfo.Display.BorderWidth = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<BorderWidth>.Value
                InvRevCdfInfo.Display.MarkerStyle = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerStyle>.Value
                InvRevCdfInfo.Display.MarkerSize = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerSize>.Value
                InvRevCdfInfo.Display.MarkerStep = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<MarkerStep>.Value
                InvRevCdfInfo.Display.LineColor = Color.FromArgb(myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<LineColor>.Value)
                InvRevCdfInfo.Display.LineWidth = myDistrib.<FieldInfo>.<InvRevCDF>.<Display>.<LineWidth>.Value

            Case Else
                'Unknown Continuity
        End Select

        'Read the Sample Values
        If myDistrib.<SampleValues>.Value <> Nothing Then
            ParamEst.SampleSetName = myDistrib.<SampleValues>.<Name>.Value
            If myDistrib.<SampleValues>.<Label>.Value <> Nothing Then ParamEst.SampleSetLabel = myDistrib.<SampleValues>.<Label>.Value Else ParamEst.SampleSetLabel = ""
            If myDistrib.<SampleValues>.<Units>.Value <> Nothing Then ParamEst.SampleSetUnits = myDistrib.<SampleValues>.<Units>.Value Else ParamEst.SampleSetUnits = ""
            ParamEst.SampleSetDescription = myDistrib.<SampleValues>.<Description>.Value
            'Dim SamplesString As String = myDistrib.<SampleValues>.Value
            Dim SamplesString As String = myDistrib.<SampleValues>.<Data>.Value
            Dim Split As String() = SamplesString.Replace(vbCr, "").Replace(vbLf, "").Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
            Dim myTable As DataTable = ParamEst.Data.Tables("Samples")
            For Each value In Split
                If value.Trim <> "" Then myTable.Rows.Add(value)
            Next
        End If

    End Sub 'FromXDoc



    Public Sub UpdateSuffix()
        'Update the Suffix and the SeriesName using the parameter values.

        Dim NewSuffix As String = NameToSymbol(ParamA.Symbol) & "=" & ParamA.Value
        If NParams > 1 Then
            NewSuffix &= ", " & NameToSymbol(ParamB.Symbol) & "=" & ParamB.Value
            If NParams > 2 Then
                NewSuffix &= ", " & NameToSymbol(ParamC.Symbol) & "=" & ParamC.Value
                If NParams > 3 Then
                    NewSuffix &= ", " & NameToSymbol(ParamD.Symbol) & "=" & ParamD.Value
                    If NParams > 4 Then
                        NewSuffix &= ", " & NameToSymbol(ParamE.Symbol) & "=" & ParamE.Value
                    End If
                End If
            End If
        End If

        Suffix = NewSuffix

    End Sub

    Public Sub UpdateSeriesLabels()
        'Update the Series Labels:
        PdfInfo.SeriesLabel = PdfInfo.LabelPrefix & " " & Suffix
        PdfLnInfo.SeriesLabel = PdfLnInfo.LabelPrefix & " " & Suffix
        PmfInfo.SeriesLabel = PmfInfo.LabelPrefix & " " & Suffix
        PmfLnInfo.SeriesLabel = PmfLnInfo.LabelPrefix & " " & Suffix
        CdfInfo.SeriesLabel = CdfInfo.LabelPrefix & " " & Suffix
        RevCdfInfo.SeriesLabel = RevCdfInfo.LabelPrefix & " " & Suffix
        InvCdfInfo.SeriesLabel = InvCdfInfo.LabelPrefix & " " & Suffix
        InvRevCdfInfo.SeriesLabel = InvRevCdfInfo.LabelPrefix & " " & Suffix
    End Sub

    Private Function NameToSymbol(SymbolName As String) As String
        'Convert a parameter symbol name to the symbol character(s).
        Select Case SymbolName.ToLower

            Case "alpha"
                Return ChrW(945)

            Case "beta"
                Return ChrW(946)

            Case "gamma"
                Return ChrW(947)

            Case "delta"
                Return ChrW(948)

            Case "epsilon"
                Return ChrW(949)

            Case "zeta"
                Return ChrW(950)

            Case "eta"
                Return ChrW(951)

            Case "theta"
                Return ChrW(952)

            Case "iota"
                Return ChrW(953)

            Case "kappa"
                Return ChrW(954)

            Case "lambda"
                Return ChrW(955)

            Case "mu"
                Return ChrW(956)

            Case "nu"
                Return ChrW(957)

            Case "xi"
                Return ChrW(958)

            Case "omicron"
                Return ChrW(959)

            Case "pi"
                Return ChrW(960)

            Case "rho"
                Return ChrW(961)

            Case "sigma"
                Return ChrW(963)

            Case "tau"
                Return ChrW(964)

            Case "upsilon"
                Return ChrW(965)

            Case "phi"
                Return ChrW(966)

            Case "chi"
                Return ChrW(967)

            Case "psi"
                Return ChrW(968)

            Case "omega"
                Return ChrW(969)

            Case Else
                Return SymbolName
        End Select
    End Function 'NameToSymbol

    Private Sub ParamA_ValueChanged() Handles ParamA.ValueChanged
        'If AutoUpdateSuffix Then UpdateSuffix()
        If AutoUpdateLabels Then UpdateSuffix()
        SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
    End Sub

    Private Sub ParamB_ValueChanged() Handles ParamB.ValueChanged
        'If AutoUpdateSuffix Then UpdateSuffix()
        If AutoUpdateLabels Then UpdateSuffix()
        SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
    End Sub

    Private Sub ParamC_ValueChanged() Handles ParamC.ValueChanged
        'If AutoUpdateSuffix Then UpdateSuffix()
        If AutoUpdateLabels Then UpdateSuffix()
        SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
    End Sub

    Private Sub ParamD_ValueChanged() Handles ParamD.ValueChanged
        'If AutoUpdateSuffix Then UpdateSuffix()
        If AutoUpdateLabels Then UpdateSuffix()
        SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
    End Sub

    Private Sub ParamE_ValueChanged() Handles ParamE.ValueChanged
        'If AutoUpdateSuffix Then UpdateSuffix()
        If AutoUpdateLabels Then UpdateSuffix()
        SetupMathNetDistribution(_name) 'Set up the MathNet distribution class - used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
    End Sub

    Public Function ValidRangeAdjust(Param As String, Value As Double, Increment As Double) As Double
        'Check if the parameter value lies within the valid range.
        'Return the value, adjusted to lie within the range if needed.
        'Increment is the adjustment made if a valid parameter value is less than or greater than a boundary value.
        ' For example of ParamA.Minimum = "gt 0" an input value of 0 is returned as 0.0001 if the Increment is 0.0001

        Dim Min As String 'A string describing the minimum valid range of the parameter.
        Dim Max As String 'A string describing the maximum valid range of the parameter.

        Select Case Param
            Case "ParamA"
                Min = ParamA.Minimum
                Max = ParamA.Maximum
            Case "ParamB"
                Min = ParamB.Minimum
                Max = ParamB.Maximum
            Case "ParamC"
                Min = ParamC.Minimum
                Max = ParamC.Maximum
            Case "ParamD"
                Min = ParamD.Minimum
                Max = ParamD.Maximum
            Case "ParamE"
                Min = ParamE.Minimum
                Max = ParamE.Maximum
            Case Else
                RaiseEvent ErrorMessage("Unknown parameter: " & Param & vbCrLf)
        End Select

        Select Case Min
            Case ""
                'Continue - check Max constraint.
            Case "-Inf"
                 'Continue - check Max constraint.
            Case "-inf"
                     'Continue - check Max constraint.
            Case "0"
                If Value < 0 Then Return 0
            Case "gt 0"
                If Value <= 0 Then Return Increment
            Case "a"
                Dim A As Double = ParamValue("a")
                If Value < A Then Return A
            Case "gt -1"
                If Value <= -1 Then Return -1 + Increment
            Case "-1"
                If Value < -1 Then Return -1
            Case "gt lower"
                Dim Lower As Double = ParamValue("lower")
                If Value <= Lower Then Return Lower + Increment
            Case "gt xm"
                Dim Xm As Double = ParamValue("xm")
                If Value <= Xm Then Return Xm + Increment
            Case Else
                'RaiseEvent ErrorMessage("Unknown minimum: " & ParamA.Minimum & vbCrLf)
                RaiseEvent ErrorMessage("Unknown minimum: " & Min & vbCrLf)
        End Select

        Select Case Max
            Case ""
                Return Value
            Case "+Inf"
                Return Value
            Case "+inf"
                Return Value
            Case "1"
                If Value > 1 Then Return 1
            Case "population"
                Dim Population As Double = ParamValue("population")
                If Value > Population Then Return Population
            Case "lt 1"
                If Value >= 1 Then Return 1 - Increment
            Case "lt upper"
                Dim Upper As Double = ParamValue("upper")
                If Value >= Upper Then Return Upper - Increment
            Case Else
                RaiseEvent ErrorMessage("Unknown maximum: " & Max & vbCrLf)
        End Select

        Return Value 'If this line is reached, an unknown Min or Max string was found. Just return the Value unchanged.

    End Function

    Public Function ParamValue(ParamName As String) As Double
        'Returns the value of the parameter.
        If ParamA.Name = ParamName Then
            Return ParamA.Value
        ElseIf ParamB.Name = ParamName Then
            Return ParamB.Value
        ElseIf ParamC.Name = ParamName Then
            Return ParamC.Value
        ElseIf ParamD.Name = ParamName Then
            Return ParamD.Value
        ElseIf ParamE.Name = ParamName Then
            Return ParamE.Value
        Else
            RaiseEvent ErrorMessage("Unknown parameter name: " & ParamName & vbCrLf)
            Return Double.NaN
        End If
    End Function

    Public Function Params() As Double()
        'Return the Distribution parameters in an array.

        Dim Parameters(0 To NParams - 1) As Double
        Parameters(0) = ParamA.Value
        If NParams > 1 Then
            Parameters(1) = ParamB.Value
            If NParams > 2 Then
                Parameters(2) = ParamC.Value
                If NParams > 3 Then
                    Parameters(3) = ParamD.Value
                    If NParams > 4 Then
                        Parameters(4) = ParamE.Value
                    End If
                End If
            End If
        End If
        Return Parameters
    End Function

    Private Sub SetupMathNetDistribution(DistribName As String)
        'Set up the MathNet distribution class.
        'This is used to calculate the distribution parameters such has Entropy, Mean, Median, Mode, Skewness, StdDev and Variance.
        Try
            Select Case DistribName
                Case "Bernoulli"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Bernoulli(ParamA.Value)

                Case "Beta"
                    Distrib = New MathNet.Numerics.Distributions.Beta(ParamA.Value, ParamB.Value)

                Case "Beta Scaled"
                    Distrib = New MathNet.Numerics.Distributions.BetaScaled(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value)

                Case "Binomial"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Binomial(ParamA.Value, ParamB.Value)

                Case "Burr"
                    Distrib = New MathNet.Numerics.Distributions.Burr(ParamA.Value, ParamB.Value, ParamC.Value)

                Case "Categorical"
                'This is a discrete distribution.


                Case "Cauchy"
                    Distrib = New MathNet.Numerics.Distributions.Cauchy(ParamA.Value, ParamB.Value)

                Case "Chi"
                    'Distrib = Nothing 'TO avoid error 
                    Distrib = New MathNet.Numerics.Distributions.Chi(ParamA.Value)

                Case "Chi Squared"
                    Distrib = New MathNet.Numerics.Distributions.ChiSquared(ParamA.Value)

                Case "Continuous Uniform"
                    Distrib = New MathNet.Numerics.Distributions.ContinuousUniform(ParamA.Value, ParamB.Value)

                Case "Conway-Maxwell-Poisson"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.ConwayMaxwellPoisson(ParamA.Value, ParamB.Value)

                Case "Discrete Uniform"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.DiscreteUniform(ParamA.Value, ParamB.Value)

                Case "Erlang"
                    Distrib = New MathNet.Numerics.Distributions.Erlang(ParamA.Value, ParamB.Value)

                Case "Exponential"
                    Distrib = New MathNet.Numerics.Distributions.Exponential(ParamA.Value)

                Case "Fisher-Snedecor"
                    Distrib = New MathNet.Numerics.Distributions.FisherSnedecor(ParamA.Value, ParamB.Value)

                Case "Gamma"
                    Distrib = New MathNet.Numerics.Distributions.Gamma(ParamA.Value, ParamB.Value)

                Case "Geometric"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Geometric(ParamA.Value)

                Case "Hypergeometric"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Hypergeometric(ParamA.Value, ParamB.Value, ParamC.Value)

                Case "Inverse Gamma"
                    Distrib = New MathNet.Numerics.Distributions.InverseGamma(ParamA.Value, ParamB.Value)

                Case "Inverse Gaussian"
                    Distrib = New MathNet.Numerics.Distributions.InverseGaussian(ParamA.Value, ParamB.Value)

                Case "Laplace"
                    Distrib = New MathNet.Numerics.Distributions.Laplace(ParamA.Value, ParamB.Value)

                Case "Log Normal"
                    Distrib = New MathNet.Numerics.Distributions.LogNormal(ParamA.Value, ParamB.Value)

                Case "Negative Binomial"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.NegativeBinomial(ParamA.Value, ParamB.Value)

                Case "Normal"
                    Distrib = New MathNet.Numerics.Distributions.Normal(ParamA.Value, ParamB.Value)

                Case "Pareto"
                    Distrib = New MathNet.Numerics.Distributions.Pareto(ParamA.Value, ParamB.Value)

                Case "Poisson"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Poisson(ParamA.Value)

                Case "Rayleigh"
                    Distrib = New MathNet.Numerics.Distributions.Rayleigh(ParamA.Value)

                Case "Skewed Generalized Error"
                    Distrib = New MathNet.Numerics.Distributions.SkewedGeneralizedError(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value)

                Case "Skewed Generalized T"
                    Distrib = New MathNet.Numerics.Distributions.SkewedGeneralizedT(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value, ParamE.Value)

                Case "Stable"
                    Distrib = New MathNet.Numerics.Distributions.Stable(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value)

                Case "Student's T"
                    Distrib = New MathNet.Numerics.Distributions.StudentT(ParamA.Value, ParamB.Value, ParamC.Value)

                Case "Triangular"
                    Distrib = New MathNet.Numerics.Distributions.Triangular(ParamA.Value, ParamB.Value, ParamC.Value)

                Case "Truncated Pareto"
                    Distrib = New MathNet.Numerics.Distributions.TruncatedPareto(ParamA.Value, ParamB.Value, ParamC.Value)

                Case "Weibull"
                    Distrib = New MathNet.Numerics.Distributions.Weibull(ParamA.Value, ParamB.Value)

                Case "Zipf"
                    'This is a discrete distribution.
                    Distrib = New MathNet.Numerics.Distributions.Zipf(ParamA.Value, ParamB.Value)

                Case Else
                    RaiseEvent ErrorMessage("Unknown distribution: " & DistribName & vbCrLf)
                    Distrib = Nothing
            End Select
        Catch ex As Exception
            RaiseEvent ErrorMessage("Error setting up the distribution: " & vbCrLf & ex.Message & vbCrLf)
        End Try

    End Sub

    Public Function Entropy() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Entropy
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Entropy: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Mean() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Mean
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Mean: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Median() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Median
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Median: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Mode() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Mode
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Mode: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Skewness() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Skewness
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Skewness: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function StdDev() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.StdDev
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-StdDev: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Variance() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Variance
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Variance: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Minimum() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Minimum
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Minimum: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function Maximum() As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Maximum
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-Maximum: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function PDF(XValue As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Density(XValue)
                'Dim Test As New MathNet.Numerics.Distributions.Normal(ParamA.Value, ParamB.Value)
                'Return Test.Density(XValue)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-PDF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function PMF(XValue As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.Probability(XValue)
                'Dim Test As New MathNet.Numerics.Distributions.Geometric(ParamA.Value)
                'Return Test.Probability(XValue)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-PMF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function CDF(XValue As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return Distrib.CumulativeDistribution(XValue)
                'Dim Test As New MathNet.Numerics.Distributions.Normal(ParamA.Value, ParamB.Value)
                'Return Test.CumulativeDistribution(XValue)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-CDF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function RevCDF(XValue As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Return 1 - Distrib.CumulativeDistribution(XValue)
                'Dim Test As New MathNet.Numerics.Distributions.Normal(ParamA.Value, ParamB.Value)
                'Return Test.CumulativeDistribution(XValue)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-RevCDF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function InvCDF(Probability As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Select Case Name
                    Case "Bernoulli" 'Discrete - 1 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Beta" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Beta Scaled" 'Continuous - 4 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Binomial" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Burr" 'Continuous - 3 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindBurrInvCDF(Probability, ProbTolerance)
                    Case "Categorical" 'Discrete - 1 parameter (array of ratios)
                        'InverseCumulativeDistribution is not a member
                    Case "Cauchy" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Chi" 'Continuous - 1 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindChiInvCDF(Probability, ProbTolerance)
                    Case "Chi Squared" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Continuous Uniform" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Conway-Maxwell-Poisson" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Discrete Uniform" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Erlang" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindErlangInvCDF(Probability, ProbTolerance)
                    Case "Exponential" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Fisher-Snedecor" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Gamma" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Geometric" 'Discrete - 2 parameter
                          'InverseCumulativeDistribution is not a member
                    Case "Hypergeometric" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Inverse Gamma" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindInvGammaInvCDF(Probability, ProbTolerance)
                    Case "Inverse Gaussian" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Laplace" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindLaplaceInvCDF(Probability, ProbTolerance)
                    Case "Log Normal" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Negative Binomial" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Normal" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Pareto" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Poisson" 'Discrete - 1 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Rayleigh" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Skewed Generalized Error" 'Continuous - 4 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Skewed Generalized T" 'Continuous - 5 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Stable" 'Continuous - 4 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindStableInvCDF(Probability, ProbTolerance)
                    Case "Student's T" 'Continuous - 3 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Triangular" 'Continuous - 3 parameter
                        Return Distrib.InverseCumulativeDistribution(Probability)
                    Case "Truncated Pareto" 'Continuous - 3 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Weibull" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindWeibullInvCDF(Probability, ProbTolerance)
                    Case "Zipf" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case Else
                        Main.Message.AddWarning("Unknown distribution: " & Name & vbCrLf)
                        Return Double.NaN
                End Select

                'Dim Test As New MathNet.Numerics.Distributions.Zipf(ParamA.Value, ParamB.Value)
                'Return Test.InverseCumulativeDistribution(Probability)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-InvCDF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    Public Function InvRevCDF(Probability As Double) As Double
        If IsNothing(Distrib) Then
            RaiseEvent ErrorMessage("Distribution class not defined." & vbCrLf)
            Return Double.NaN
        Else
            Try
                Select Case Name
                    Case "Bernoulli" 'Discrete - 1 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Beta" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Beta Scaled" 'Continuous - 4 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Binomial" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Burr" 'Continuous - 3 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindBurrInvCDF(1 - Probability, ProbTolerance)
                    Case "Categorical" 'Discrete - 1 parameter (array of ratios)
                        'InverseCumulativeDistribution is not a member
                    Case "Cauchy" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Chi" 'Continuous - 1 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindChiInvCDF(1 - Probability, ProbTolerance)
                    Case "Chi Squared" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Continuous Uniform" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Conway-Maxwell-Poisson" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Discrete Uniform" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Erlang" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindErlangInvCDF(1 - Probability, ProbTolerance)
                    Case "Exponential" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Fisher-Snedecor" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Gamma" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Geometric" 'Discrete - 2 parameter
                          'InverseCumulativeDistribution is not a member
                    Case "Hypergeometric" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Inverse Gamma" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindInvGammaInvCDF(1 - Probability, ProbTolerance)
                    Case "Inverse Gaussian" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Laplace" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindLaplaceInvCDF(1 - Probability, ProbTolerance)
                    Case "Log Normal" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Negative Binomial" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Normal" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Pareto" 'Continuous - 2 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Poisson" 'Discrete - 1 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Rayleigh" 'Continuous - 1 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Skewed Generalized Error" 'Continuous - 4 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Skewed Generalized T" 'Continuous - 5 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Stable" 'Continuous - 4 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindStableInvCDF(1 - Probability, ProbTolerance)
                    Case "Student's T" 'Continuous - 3 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Triangular" 'Continuous - 3 parameter
                        Return Distrib.InverseCumulativeDistribution(1 - Probability)
                    Case "Truncated Pareto" 'Continuous - 3 parameter
                        'InverseCumulativeDistribution is not a member
                    Case "Weibull" 'Continuous - 2 parameter
                        'InverseCumulativeDistribution is not a member
                        Return FindWeibullInvCDF(1 - Probability, ProbTolerance)
                    Case "Zipf" 'Discrete - 2 parameter
                        'InverseCumulativeDistribution is not a member
                    Case Else
                        Main.Message.AddWarning("Unknown distribution: " & Name & vbCrLf)
                        Return Double.NaN
                End Select

                'Dim Test As New MathNet.Numerics.Distributions.Zipf(ParamA.Value, ParamB.Value)
                'Return Test.InverseCumulativeDistribution(Probability)
            Catch ex As Exception
                RaiseEvent ErrorMessage("DistributionMode-InvRevCDF: " & ex.Message & vbCrLf)
                Return Double.NaN
            End Try
        End If
    End Function

    'List of missing MathNet Public Distribution properties:
    'Beta - No Median
    'Beta Scaled - No Entropy - No Median
    'Burr - No Entropy - No Skewness
    'Categorical - To Be Coded
    'Cauchy - No Mean - No Std Dev - No Variance - No Skewness
    'Chi - No Median
    'Conway Maxwell Poisson - No Maximum - No Entropy - No Median - No Mode - No Skewness
    'Erlang - No Median
    'Fisher Snedecor - No Entropy - No Mean - No Median - No Std Dev - No Variance- No Skewness
    'Gamma - No Median
    'Hypergeometric - No Entropy - No Median
    'Inverse Gamma - No Median - No Variance - No Skew
    'Inverse Gaussian - No Entropy
    'Negative Binomial - No Entropy - No Median
    'Pareto - No Mean
    'Skewed Generalized Error - No Entropy
    'Skewed Generalized T - No Entropy
    'Stable - No Entropy - No Mean - No Skewness
    'Truncated Pareto - No Entropy - No Mode
    'Zipf - No Median - No Std Dev - No Variance - No Skewness

    'NOTE: This method has been updated below.
    Private Function FindBurrInvCDF_Old(Probability As Double, Tolerance As Double) As Double
        'Search for the Burr distribution Inverse CDF value at the specified probability.
        'The Burr distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        'Dim Std
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        'Dim Test As New MathNet.Numerics.Distributions.Burr(ParamA.Value, ParamB.Value)
        'Return Test.CumulativeDistribution(Test)
        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If

            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If

    End Function

    'Private Function FindBurrInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindBurrInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Burr distribution Inverse CDF value at the specified probability.
        'The Burr distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The calculated Mean and StdDev are not be valid for this distribution.

        'Dim Distrib As New MathNet.Numerics.Distributions.Burr(Params(0), Params(1), Params(2))

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = 1
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between 0 and 1
            XVal2 = XVal1
            Prob2 = Prob1
            XVal1 = 0
            Prob1 = 0

        Else 'InvCDF is > 1
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While

        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    'Private Function FindChiInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindChiInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Chi distribution Inverse CDF value at the specified probability.
        'The Chi distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The Mean and StdDev can be used to search for the InvCDF value.
        '   Search in these intervals: 0 to Mean, Mean to StdDev, > StdDev.

        'Dim Distrib As New MathNet.Numerics.Distributions.Chi(Params(0))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    'Private Function FindErlangInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindErlangInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Erlang distribution Inverse CDF value at the specified probability.
        'The Erlang distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        'Dim Distrib As New MathNet.Numerics.Distributions.Erlang(Params(0), Params(1))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    'Private Function FindInvGammaInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindInvGammaInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Inverse Gamma distribution Inverse CDF value at the specified probability.
        'The Inverse Gamma distribution is defined over the X axis range: gt 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.
        'NOTE: The calculated distribution Mean is not always defined.

        'Dim Distrib As New MathNet.Numerics.Distributions.InverseGamma(Params(0), Params(1))

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = 1
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between gt 0 and 1
            XVal2 = XVal1
            Prob2 = Prob1
            XVal1 = 0.000000001
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            If InterpXVal <= 0 Then InterpXVal = 0.000000001
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > 1
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If
    End Function

    'Private Function FindLaplaceInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindLaplaceInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Laplace distribution Inverse CDF value at the specified probability.
        'The Laplace distribution is defined over the X axis range: -inf to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        Debug.Print("Running FindLaplaceInvCDF")

        'Dim Distrib As New MathNet.Numerics.Distributions.Laplace(Params(0), Params(1))

        'XValue range: -inf to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between -Inf and MeanVal
            Debug.Print("Probability < MeanProb")
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
            If Probability > StdDevNeg1Prob Then 'InvCDF lies between StdDevNeg1Prob and MeanVal
                Debug.Print("InvCDF lies between StdDevNeg1Prob and MeanVal")
                XVal1 = StdDevNeg1Val
                Prob1 = StdDevNeg1Prob
                XVal2 = MeanVal
                Prob2 = MeanProb
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF <= StdDevNeg1Val
                'Find a value interval that spans Probability
                Debug.Print("InvCDF <= StdDevNeg1Val")
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevNeg1Val - Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal2 = StdDevNeg1Val
                Prob2 = StdDevNeg1Prob
                While BoundingValFound = False
                    If Probability > TryBoundingProb Then
                        BoundingValFound = True
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                    Else
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal -= Increment 'Try a lower bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While

                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)

            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        Else 'InvCDF is > MeanProb
            Debug.Print("InvCDF > MeanProb")
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                Debug.Print("InvCDF lies between MeanVal and StdDevPos1Val")
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            Else 'InvCDF > StdDevPos1Val
                Debug.Print("InvCDF > StdDevPos1Val")
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
                Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
            End If

            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
            While AbsProbError > Tolerance
                If Probability > InterpProb Then
                    XVal1 = InterpXVal
                    Prob1 = InterpProb
                Else
                    XVal2 = InterpXVal
                    Prob2 = InterpProb
                End If
                InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
                InterpProb = Distrib.CumulativeDistribution(InterpXVal)
                AbsProbError = Math.Abs(Probability - InterpProb)
            End While
            Return InterpXVal
        End If

    End Function

    'Private Function FindStableInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindStableInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Stable distribution Inverse CDF value at the specified probability.
        'The Stable distribution is defined over the X axis range: -inf to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        'Debug.Print("Running FindLaplaceInvCDF")

        'Dim Distrib As New MathNet.Numerics.Distributions.Stable(Params(0), Params(1), Params(2), Params(3))

        'XValue range: -inf to +inf.
        '    Min -inf or Mu if Alpha lt 1 and Beta eq 1
        '    Max +inf or Mu if Alpha lt 1 and Beta eq -1

        'The Mean and StdDev may not be defined - dont use these in the search.

        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        XVal1 = Params(3) 'The Location parameter - start searching from here.
        Prob1 = Distrib.CumulativeDistribution(XVal1)

        If Probability <= Prob1 Then 'InvCDF lies between -Inf and Location parameter
            'Debug.Print("Probability <= LocationProb")
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 - Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            XVal2 = XVal1
            Prob2 = Prob1
            While BoundingValFound = False
                If Probability > TryBoundingProb Then
                    BoundingValFound = True
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                Else
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal -= Increment 'Try a lower bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
        Else 'InvCDF is > Location parameter
            'Debug.Print("InvCDF > Location parameter")
            'Find a value interval that spans Probability
            Dim Increment As Double = 1
            Dim BoundingValFound As Boolean = False
            Dim TryBoundingVal As Double = XVal1 + Increment
            Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
            While BoundingValFound = False
                If Probability <= TryBoundingProb Then
                    BoundingValFound = True
                    XVal2 = TryBoundingVal
                    Prob2 = TryBoundingProb
                Else
                    XVal1 = TryBoundingVal
                    Prob1 = TryBoundingProb
                    Increment *= 2 'Double the size of the increment
                    TryBoundingVal += Increment 'Try a higher bounding value
                    TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                End If
            End While
            'Debug.Print("Bounding values found: XVal1 = " & XVal1 & " Prob1 = " & Prob1 & "   XVal2 = " & XVal2 & " Prob2 = " & Prob2)
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal
    End Function

    'Private Function FindWeibullInvCDF(Probability As Double, Params() As Double, Tolerance As Double) As Double
    Private Function FindWeibullInvCDF(Probability As Double, Tolerance As Double) As Double
        'Search for the Weibull distribution Inverse CDF value at the specified probability.
        'The Weibull distribution is defined over the X axis range: 0 to +inf
        'The search will end when the interpolated value changes by less than the Tolance amount between interations.

        'Dim Distrib As New MathNet.Numerics.Distributions.Weibull(Params(0), Params(1))

        'XValue range: 0 to +inf
        Dim MeanVal As Double = Distrib.Mean
        Dim MeanProb As Double = Distrib.CumulativeDistribution(MeanVal)
        Dim StdDev As Double = Distrib.StdDev
        Dim XVal1 As Double 'Lower interpolation X value
        Dim Prob1 As Double 'Lower interpolation Probability value
        Dim XVal2 As Double 'Upper interpolation X value
        Dim Prob2 As Double 'Upper interpolation Probability value
        Dim InterpXVal As Double 'Interpolated X Value
        Dim InterpProb As Double 'The CDF probability corresponding to InterpXVal
        Dim AbsProbError As Double  'The error between the specified Probability and InterpProb. - The search will end when Abs(ProbError) < Tolerance.

        If Probability <= MeanProb Then 'InvCDF lies between 0 and MeanVal
            Dim StdDevNeg1Val As Double = MeanVal - StdDev
            If StdDevNeg1Val < 0 Then 'InvCDF lies between 0 and MeanVal
                XVal1 = 0
                XVal2 = MeanVal
            Else
                Dim StdDevNeg1Prob As Double = Distrib.CumulativeDistribution(StdDevNeg1Val)
                If Probability <= StdDevNeg1Prob Then 'InvCDF lies between 0 and StdDevNeg1Val
                    XVal1 = 0
                    XVal2 = StdDevNeg1Val
                Else 'InvCDF lies between StdDevNeg1Val and MeanVal
                    XVal1 = StdDevNeg1Val
                    XVal2 = MeanVal
                End If
            End If
            Prob1 = Distrib.CumulativeDistribution(XVal1)
            Prob2 = Distrib.CumulativeDistribution(XVal2)
        Else 'InvCDF is > MeanProb
            Dim StdDevPos1Val As Double = MeanVal + StdDev
            Dim StdDevPos1Prob As Double = Distrib.CumulativeDistribution(StdDevPos1Val)
            If Probability <= StdDevPos1Prob Then 'InvCDF lies between MeanVal and StdDevPos1Val
                XVal1 = MeanVal
                Prob1 = MeanProb
                XVal2 = StdDevPos1Val
                Prob2 = StdDevPos1Prob
            Else 'InvCDF > StdDevPos1Val
                'Find a value interval that spans Probability
                Dim Increment As Double = 2 * StdDev
                Dim BoundingValFound As Boolean = False
                Dim TryBoundingVal As Double = StdDevPos1Val + Increment
                Dim TryBoundingProb As Double = Distrib.CumulativeDistribution(TryBoundingVal)
                XVal1 = StdDevPos1Val
                Prob1 = StdDevPos1Prob
                While BoundingValFound = False
                    If Probability <= TryBoundingProb Then
                        BoundingValFound = True
                        XVal2 = TryBoundingVal
                        Prob2 = TryBoundingProb
                    Else
                        XVal1 = TryBoundingVal
                        Prob1 = TryBoundingProb
                        Increment *= 2 'Double the size of the increment
                        TryBoundingVal += Increment 'Try a higher bounding value
                        TryBoundingProb = Distrib.CumulativeDistribution(TryBoundingVal)
                    End If
                End While
            End If
        End If

        InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
        InterpProb = Distrib.CumulativeDistribution(InterpXVal)
        AbsProbError = Math.Abs(Probability - InterpProb)
        While AbsProbError > Tolerance
            If Probability > InterpProb Then
                XVal1 = InterpXVal
                Prob1 = InterpProb
            Else
                XVal2 = InterpXVal
                Prob2 = InterpProb
            End If
            InterpXVal = LinInterpX(XVal1, Prob1, XVal2, Prob2, Probability)
            InterpProb = Distrib.CumulativeDistribution(InterpXVal)
            AbsProbError = Math.Abs(Probability - InterpProb)
        End While
        Return InterpXVal

    End Function

    'Private Function LinInterpY(X1 As Double, Y1 As Double, X2 As Double, Y2 As Double, X As Double) As Double
    '    'Linear interpolation of Y at given X location given two points X1, Y1 and X2, Y2.
    '    Return Y1 + (X - X1) * (Y2 - Y1) / (X2 - X1)
    'End Function

    Private Function LinInterpX(X1 As Double, Y1 As Double, X2 As Double, Y2 As Double, Y As Double) As Double
        'Linear interpolation of X at given Y location given two points X1, Y1 and X2, Y2.
        Return X1 + (Y - Y1) * (X2 - X1) / (Y2 - Y1)
    End Function


    Private Sub ParamEst_ErrorMessage(Msg As String) Handles ParamEst.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Private Sub ParamEst_Message(Msg As String) Handles ParamEst.Message
        RaiseEvent Message(Msg)
    End Sub

    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a message.

End Class 'DistributionInfo

Public Class SeriesDisplay
    'The parameters used to display a series in a chart.

    Private _markerFill As String = "Yes" 'If Yes, the marker will be filled with the specified color.
    Property MarkerFill As String
        Get
            Return _markerFill
        End Get
        Set(value As String)
            _markerFill = value
        End Set
    End Property

    Private _markerColor As Color = Color.Red 'The color of the marker fill.
    Property MarkerColor As Color
        Get
            Return _markerColor
        End Get
        Set(value As Color)
            _markerColor = value
        End Set
    End Property

    Private _borderColor As Color = Color.Black 'The color of the marker border.
    Property BorderColor As Color
        Get
            Return _borderColor
        End Get
        Set(value As Color)
            _borderColor = value
        End Set
    End Property

    Private _borderWidth As Integer = 1 'The width of the marker border.
    Property BorderWidth As Integer
        Get
            Return _borderWidth
        End Get
        Set(value As Integer)
            _borderWidth = value
        End Set
    End Property

    Private _markerStyle As String = "Circle" 'The style of the marker.
    Property MarkerStyle As String
        Get
            Return _markerStyle
        End Get
        Set(value As String)
            _markerStyle = value
        End Set
    End Property

    Private _markerSize As Integer = 6 'The size of the marker.
    Property MarkerSize As Integer
        Get
            Return _markerSize
        End Get
        Set(value As Integer)
            _markerSize = value
        End Set
    End Property

    Private _markerStep As Integer = 1 'The ratio of series values that are represented by a marker.
    Property MarkerStep As Integer
        Get
            Return _markerStep
        End Get
        Set(value As Integer)
            _markerStep = value
        End Set
    End Property

    Private _lineColor As Color = Color.Blue 'The color of the line joining the markers.
    Property LineColor As Color
        Get
            Return _lineColor
        End Get
        Set(value As Color)
            _lineColor = value
        End Set
    End Property

    Private _lineWidth As Integer = 1 'The width of the line joining the markers.
    Property LineWidth As Integer
        Get
            Return _lineWidth
        End Get
        Set(value As Integer)
            _lineWidth = value
        End Set
    End Property

End Class 'SeriesDisplay

Public Class DistribRange
    'The random variable range of a probability distribution.

    Private _minimum As Double = Double.NegativeInfinity 'The minimum random variable value of the probability distribution
    Property Minimum As Double
        Get
            Return _minimum
        End Get
        Set(value As Double)
            _minimum = value
        End Set
    End Property

    Private _minInclusive As Boolean = True ' If True, the minimum random variable value is >= Minimum, else the minimum value is > Minimum.
    Property MinInclusive As Boolean
        Get
            Return _minInclusive
        End Get
        Set(value As Boolean)
            _minInclusive = value
        End Set
    End Property

    Private _maximum As Double = Double.NegativeInfinity 'The maximum random variable value of the probability distribution
    Property Maximum As Double
        Get
            Return _maximum
        End Get
        Set(value As Double)
            _maximum = value
        End Set
    End Property

    Private _maxInclusive As Boolean = True ' If True, the maximum random variable value is <= Maximum, else the maximum value is < Maximum.
    Property MaxInclusive As Boolean
        Get
            Return _maxInclusive
        End Get
        Set(value As Boolean)
            _maxInclusive = value
        End Set
    End Property
End Class

Public Class clsParamEstimation
    'Probability Distribution Parameter Estimation. NEW VERSION.

#Region " Variable Declarations - All the variables used in this class." '=====================================================================================================================

    Public SourceData As DataSet 'Reference to the DataSet contain the source samples
    Public Data As New DataSet  'Dataset used to hold the data values

    Public XmlList As Xml.Linq.XDocument 'A list of distributions

    Public Distribution As DistributionInfo 'Reference to a DistributionInfo object. The parameters in this distriubtion will be fitted to the data samples.

    Dim Samps() As Double 'Array of distribution samples. This is a copy of the distribution samples - used for fast calculations.
    Dim LogLikely() As Double 'Array of distribution log likelihood values corresponding to Samps.

#End Region 'Variable Declarations ------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Properties" '========================================================================================================================================================================

    Private _sourceTable As String = "" 'THe name of the table in SourceData that contains the data samples to be fitted.
    Property SourceTable As String
        Get
            Return _sourceTable
        End Get
        Set(value As String)
            _sourceTable = value
        End Set
    End Property

    Private _sourceColumn As String = "" 'The name of the column in SourceTable that contins the data samples to be fitted.
    Property SourceColumn As String
        Get
            Return _sourceColumn
        End Get
        Set(value As String)
            _sourceColumn = value
            CopySamplesToModelFitting()
        End Set
    End Property

    'Private _distributionName As String = "" 'The name of the distribution.
    'Property DistributionName As String
    '    Get
    '        Return _distributionName
    '    End Get
    '    Set(value As String)
    '        _distributionName = value
    '    End Set
    'End Property


#End Region 'Properties -----------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Methods" '===========================================================================================================================================================================

    Public Sub New()

        ''Set up the Tables in the Data dataset.
        'Data.Tables.Add("Samples") 'Create the Samples table. 
        'Data.Tables("Samples").Columns.Add("Value", System.Type.GetType("System.Double")) 'Add the Value field - this will contain the set of samples.

        Data.Tables.Add("Model_Fitting") 'Create the distribution model fitting table. 
        Data.Tables("Model_Fitting").Columns.Add("Value", System.Type.GetType("System.Double")) 'Add the Value field - this will contain the sorted set of samples.
        Data.Tables("Model_Fitting").Columns.Add("eCDF", System.Type.GetType("System.Double")) 'Add the eCDF field - this will contain the Empirical Cumulative Density Function values calculated from the sorted values.
        Data.Tables("Model_Fitting").Columns.Add("Reverse_eCDF", System.Type.GetType("System.Double")) 'Add the Reverse_eCDF field - this will contain the Reverse Empirical Cumulative Density Function values calculated from the sorted values.
        Data.Tables("Model_Fitting").Columns.Add("Model_CDF", System.Type.GetType("System.Double")) 'Add the Model_CDF field - this will contain the Model Cumulative Density Function values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Model_Rev_CDF", System.Type.GetType("System.Double")) 'Add the Model_Rev_CDF field - this will contain the Model Reverse Cumulative Density Function values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Model_Prob_Dens", System.Type.GetType("System.Double")) 'Add the Model_Prob_Dens field - this will contain the Model Probability Density values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Ln_Model_Prob_Dens", System.Type.GetType("System.Double")) 'Add the Ln_Model_Prob_Dens field - this will contain the natural logarithm of the Model Probability Density values calculated for each sample value using the selected distribution model parameters.

        'Data.Tables.Add("Histogram") 'Create the Histogram table. 
        'Data.Tables("Histogram").Columns.Add("Mid_Interval", System.Type.GetType("System.Double")) 'Add the Mid_Interval field - this is the mid-point value of each interval used to generate the histogram.
        'Data.Tables("Histogram").Columns.Add("Count", System.Type.GetType("System.Int32")) 'Add the Count field - this is the count of sample values in each interval.
        'Data.Tables("Histogram").Columns.Add("Probability", System.Type.GetType("System.Double")) 'Add the Count field - this is the probability of a sample value lying within each interval.
        'Data.Tables("Histogram").Columns.Add("Prob_Density", System.Type.GetType("System.Double")) 'Add the Count field - this is the probability density of each interval.

    End Sub

    Public Sub CopySamplesToModelFitting()
        'Çopy the Distribution Samples to the Model_Fitting table.

        'If Data.Tables.Contains("Samples") Then
        If SourceData.Tables.Contains(SourceTable) Then
            If SourceData.Tables(SourceTable).Columns.Contains(SourceColumn) Then
                If Data.Tables.Contains("Model_Fitting") Then
                    Data.Tables("Model_Fitting").Rows.Clear()
                    'For Each Row As DataRow In Data.Tables("Samples").Rows
                    'For Each Row As DataRow In Data.Tables(SourceTable).Rows
                    For Each Row As DataRow In SourceData.Tables(SourceTable).Rows
                        'Data.Tables("Model_Fitting").Rows.Add(Row.Item(0))
                        Data.Tables("Model_Fitting").Rows.Add(Row.Item(SourceColumn))
                    Next

                    Data.Tables("Model_Fitting").DefaultView.Sort = "Value" & " ASC" 'Sort the Samples column

                    'Generate the eCDF and Reverse_eCDF values:
                    Dim NValues As Integer = Data.Tables("Model_Fitting").Rows.Count
                    ReDim Samps(0 To NValues - 1) 'This array is used to rapidly generate a new Log Likelihood value.
                    ReDim LogLikely(0 To NValues - 1) 'The Log Likelihood
                    Dim I As Integer
                    For I = 1 To NValues
                        Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("eCDF") = I / NValues 'Calculate each eCDF value (empirical CDF)
                        Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("Reverse_eCDF") = 1 - (I / NValues) 'Calculate each Reverse_eCDF value
                        Samps(I - 1) = Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("Value") 'Copy the samples to Samps() - This array is used to rapidly generate a new Log Likelihood Function value.
                    Next
                Else
                    RaiseEvent ErrorMessage("Parameter Estimation error: The Model_Fitting table is missing." & vbCrLf)
                End If
            Else
                RaiseEvent ErrorMessage("Parameter Estimation error: The source data column is missing: " & SourceColumn & vbCrLf)
            End If
        Else
            RaiseEvent ErrorMessage("Parameter Estimation error: The source data table is missing: " & SourceTable & vbCrLf)
        End If
    End Sub

    Public Sub UpdateModelTableDistribValues()
        'Update the Model_CDF, Model_Rev_CDF, Model_Prob_Dens & Ln_Model_Prob_Dens values in the Model_Fitting table.

        Dim I As Integer
        Dim SampleVal As Double
        Select Case Distribution.Name
            Case "Beta"
                For I = 0 To Samps.Length - 1
                    SampleVal = Data.Tables("Model_Fitting").Rows(I).Item("Value")
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_CDF") = MathNet.Numerics.Distributions.Beta.CDF(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_Rev_CDF") = 1 - Data.Tables("Model_Fitting").Rows(I).Item("Model_CDF")
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_Prob_Dens") = MathNet.Numerics.Distributions.Beta.PDF(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    Data.Tables("Model_Fitting").Rows(I).Item("Ln_Model_Prob_Dens") = MathNet.Numerics.Distributions.Beta.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    'LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Beta Scaled"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Samps(I))
                Next
            Case "Cauchy"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Cauchy.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Chi Squared"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Continuous Uniform"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Exponential"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Exponential.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Fisher-Snedecor"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Gamma"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Gamma.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Inverse Gaussian"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Log Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.LogNormal.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Normal"
                For I = 0 To Samps.Length - 1
                    SampleVal = Data.Tables("Model_Fitting").Rows(I).Item("Value")
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_CDF") = MathNet.Numerics.Distributions.Normal.CDF(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_Rev_CDF") = 1 - Data.Tables("Model_Fitting").Rows(I).Item("Model_CDF")
                    Data.Tables("Model_Fitting").Rows(I).Item("Model_Prob_Dens") = MathNet.Numerics.Distributions.Normal.PDF(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    Data.Tables("Model_Fitting").Rows(I).Item("Ln_Model_Prob_Dens") = MathNet.Numerics.Distributions.Normal.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, SampleVal)
                    'LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Pareto.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Rayleigh"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Skewed Generalized Error"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Samps(I))
                Next
            Case "Skewed Generalized T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Distribution.ParamE.Value, Samps(I))
                Next
            Case "Student's T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.StudentT.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Triangular"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Triangular.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Truncated Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Bernoulli" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Bernoulli.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Binomial.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Categorical" 'Discrete
                'For I = 0 To Samps.Length - 1
                '    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                'Next
            Case "Conway-Maxwell-Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Discrete Uniform" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Geometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Geometric.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Hypergeometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Negative Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Poisson.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Zipf" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Zipf.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case Else

        End Select
    End Sub


    Public Function LogLikelihoodFn() As Double
        'Returns the Log Likelihood Function.

        'Samps() contains a set of samples from a distribution.
        'ParamA, ParamB, ParamC, ParamD & ParamE contains the selected distribution parameters. (The number of parameters is between 1 and 5 so not all of the parameter variables many be used.)
        'LogLikely() will contain the natural log of the PDF or PMF value corrensonding to the sample value in Samps().

        ''Update the LogLikely values:
        'Dim NSamps = Samps.Length
        'For Each Value As Double In Samps

        'Next


        'Update the LogLikely values:
        Dim I As Integer
        'Select Case DistributionName
        Select Case Distribution.Name
            Case "Beta"
                For I = 0 To Samps.Length - 1
                    'LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                    LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Beta Scaled"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Samps(I))
                Next
            Case "Cauchy"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Cauchy.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Chi Squared"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Continuous Uniform"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Exponential"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Exponential.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Fisher-Snedecor"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Gamma"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Gamma.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Inverse Gaussian"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Log Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.LogNormal.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Pareto.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Rayleigh"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Skewed Generalized Error"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Samps(I))
                Next
            Case "Skewed Generalized T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Distribution.ParamD.Value, Distribution.ParamE.Value, Samps(I))
                Next
            Case "Student's T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.StudentT.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Triangular"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Triangular.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Truncated Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Bernoulli" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Bernoulli.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Binomial.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Categorical" 'Discrete
                'For I = 0 To Samps.Length - 1
                '    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                'Next
            Case "Conway-Maxwell-Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Discrete Uniform" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Geometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Geometric.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Hypergeometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Distribution.ParamC.Value, Samps(I))
                Next
            Case "Negative Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case "Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Poisson.PMFLn(Distribution.ParamA.Value, Samps(I))
                Next
            Case "Zipf" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Zipf.PMFLn(Distribution.ParamA.Value, Distribution.ParamB.Value, Samps(I))
                Next
            Case Else

        End Select

        Return LogLikely.Sum

    End Function

    'Public Sub RefineParams(MinAdjustPct As Double, ByRef ParameterA As Double, ByRef ParameterB As Double, ByRef ParameterC As Double, ByRef ParameterD As Double, ByRef ParameterE As Double)
    Public Sub RefineParams(MinAdjustPct As Double)
        'Refine the distribution parameters to match the set of data samples.
        'The parameters will be adjusted until the percent change in the Log Likelihood is below the MinAdjustPct value.

        'Refined distribution parameter estimates:
        Dim RefinedA As Double
        Dim RefinedB As Double
        Dim RefinedC As Double
        Dim RefinedD As Double
        Dim RefinedE As Double

        'Increments used to adjust the refined parameters:
        Dim IncrA As Double
        Dim IncrB As Double
        Dim IncrC As Double
        Dim IncrD As Double
        Dim IncrE As Double

        Dim NParams As Integer = Distribution.NParams

        'Read the initial parameter values and parameter increments 
        RefinedA = Distribution.ParamA.Value
        IncrA = Distribution.ParamA.Increment
        If NParams > 1 Then
            RefinedB = Distribution.ParamB.Value
            IncrB = Distribution.ParamB.Increment
            If NParams > 2 Then
                RefinedC = Distribution.ParamC.Value
                IncrC = Distribution.ParamC.Increment
                If NParams > 3 Then
                    RefinedD = Distribution.ParamD.Value
                    IncrD = Distribution.ParamD.Increment
                    If NParams > 4 Then
                        RefinedE = Distribution.ParamE.Value
                        IncrE = Distribution.ParamE.Increment
                    End If
                End If
            End If
        End If

        Dim AdjustPct As Double 'The percent change in the Log Likelihood resulting from the latest set of parameter adjustments.
        Dim P1 As Double 'Parameter Value 1
        Dim L1 As Double 'Log Likelihood of Parameter Value 1
        Dim P2 As Double 'Parameter Value 2
        Dim L2 As Double 'Log Likelihood of Parameter Value 2
        Dim P3 As Double 'Parameter Value 3
        Dim L3 As Double 'Log Likelihood of Parameter Value 3
        Dim LogLike As Double 'The Log Likelihood before refinement
        Dim RefinedLogLike As Double  'The Log Likelihood after refinement.
        LogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
        Do
            SelectP1P2P3(RefinedA, P1, P2, P3, IncrA, 0.001, Distribution.ParamA)
            L1 = LogLikelihoodFn(P1, RefinedB, RefinedC, RefinedD, RefinedE)
            L2 = LogLikelihoodFn(P2, RefinedB, RefinedC, RefinedD, RefinedE)
            L3 = LogLikelihoodFn(P3, RefinedB, RefinedC, RefinedD, RefinedE)
            RefinedA = FindMax(P1, L1, P2, L2, P3, L3, IncrA, 0.001, Distribution.ParamA)
            If NParams > 1 Then
                SelectP1P2P3(RefinedB, P1, P2, P3, IncrB, 0.001, Distribution.ParamB)
                L1 = LogLikelihoodFn(RefinedA, P1, RefinedC, RefinedD, RefinedE)
                L2 = LogLikelihoodFn(RefinedA, P2, RefinedC, RefinedD, RefinedE)
                L3 = LogLikelihoodFn(RefinedA, P3, RefinedC, RefinedD, RefinedE)
                RefinedB = FindMax(P1, L1, P2, L2, P3, L3, IncrB, 0.001, Distribution.ParamB)
                If NParams > 2 Then
                    SelectP1P2P3(RefinedC, P1, P2, P3, IncrC, 0.001, Distribution.ParamC)
                    L1 = LogLikelihoodFn(RefinedA, RefinedB, P1, RefinedD, RefinedE)
                    L2 = LogLikelihoodFn(RefinedA, RefinedB, P2, RefinedD, RefinedE)
                    L3 = LogLikelihoodFn(RefinedA, RefinedB, P3, RefinedD, RefinedE)
                    RefinedC = FindMax(P1, L1, P2, L2, P3, L3, IncrC, 0.001, Distribution.ParamC)
                    If NParams > 3 Then
                        SelectP1P2P3(RefinedD, P1, P2, P3, IncrD, 0.001, Distribution.ParamD)
                        L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P1, RefinedE)
                        L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        RefinedD = FindMax(P1, L1, P2, L2, P3, L3, IncrD, 0.001, Distribution.ParamD)
                        If NParams > 4 Then
                            SelectP1P2P3(RefinedE, P1, P2, P3, IncrE, 0.001, Distribution.ParamE)
                            L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P1)
                            L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P2)
                            L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P3)
                            RefinedE = FindMax(P1, L1, P2, L2, P3, L3, IncrE, 0.001, Distribution.ParamE)
                        End If
                    End If
                End If
            End If
            RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
            AdjustPct = Math.Abs((LogLike - RefinedLogLike) / LogLike * 100)
            LogLike = RefinedLogLike
        Loop Until AdjustPct <= MinAdjustPct Or Double.IsNaN(AdjustPct)

        'Debug.Print("Completed ----------------------------------------------------------------")

        'The new parameters are RefinedA, RefinedB, RefinedC, RefinedD and RefinedE.
        'Update the parameter values:
        'ParameterA = RefinedA
        Distribution.ParamA.Value = RefinedA
        If NParams > 1 Then
            'ParameterB = RefinedB
            Distribution.ParamB.Value = RefinedB
            If NParams > 2 Then
                'ParameterC = RefinedC
                Distribution.ParamC.Value = RefinedC
                If NParams > 3 Then
                    'ParameterD = RefinedD
                    Distribution.ParamD.Value = RefinedD
                    If NParams > 4 Then
                        'ParameterE = RefinedE
                        Distribution.ParamE.Value = RefinedE
                    End If
                End If
            End If
        End If

    End Sub

    Public Function LogLikelihoodFn(PA As Double, PB As Double, PC As Double, PD As Double, PE As Double) As Double
        'Returns the Log Likelihood Function.
        'This version uses the distribution parameter areguments.

        'Update the LogLikely values:
        Dim I As Integer
        'Select Case DistributionName
        Select Case Distribution.Name
            Case "Beta"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(PA, PB, Samps(I))
                Next
            Case "Beta Scaled"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(PA, PB, PC, PD, Samps(I))
                Next
            Case "Cauchy"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Cauchy.PDFLn(PA, PB, Samps(I))
                Next
            Case "Chi Squared"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(PA, Samps(I))
                Next
            Case "Continuous Uniform"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(PA, PB, Samps(I))
                Next
            Case "Exponential"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Exponential.PDFLn(PA, Samps(I))
                Next
            Case "Fisher-Snedecor"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(PA, PB, Samps(I))
                Next
            Case "Gamma"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Gamma.PDFLn(PA, PB, Samps(I))
                Next
            Case "Inverse Gaussian"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(PA, PB, Samps(I))
                Next
            Case "Log Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.LogNormal.PDFLn(PA, PB, Samps(I))
                Next
            Case "Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(PA, PB, Samps(I))
                Next
            Case "Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Pareto.PDFLn(PA, PB, Samps(I))
                Next
            Case "Rayleigh"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(PA, Samps(I))
                Next
            Case "Skewed Generalized Error"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(PA, PB, PC, PD, Samps(I))
                Next
            Case "Skewed Generalized T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(PA, PB, PC, PD, PE, Samps(I))
                Next
            Case "Student's T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.StudentT.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Triangular"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Triangular.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Truncated Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Bernoulli" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Bernoulli.PMFLn(PA, Samps(I))
                Next
            Case "Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Binomial.PMFLn(PA, PB, Samps(I))
                Next
            Case "Categorical" 'Discrete
                'For I = 0 To Samps.Length - 1
                '    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                'Next
            Case "Conway-Maxwell-Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(PA, PB, Samps(I))
                Next
            Case "Discrete Uniform" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(PA, PB, Samps(I))
                Next
            Case "Geometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Geometric.PMFLn(PA, Samps(I))
                Next
            Case "Hypergeometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(PA, PB, PC, Samps(I))
                Next
            Case "Negative Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(PA, PB, Samps(I))
                Next
            Case "Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Poisson.PMFLn(PA, Samps(I))
                Next
            Case "Zipf" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Zipf.PMFLn(PA, PB, Samps(I))
                Next
            Case Else

        End Select

        Return LogLikely.Sum

    End Function

    Private Sub SelectP1P2P3(Estimate As Double, ByRef P1 As Double, ByRef P2 As Double, ByRef P3 As Double, Incr As Double, MinInc As Double, ByRef Param As ParamInfo)
        'Select suitable P1, P2 and P3 values used to obtain the refined parameter value.

        'P2 = Param.Value
        P2 = Estimate 'The last estimated parameter value
        P1 = P2 - Incr
        P3 = P2 + Incr

        'Check that P1 is within the valid parameter range.
        Select Case Param.Minimum
            Case ""
                'Continue - check Max constraint.
            Case "-Inf"
                 'Continue - check Max constraint.
            Case "-inf"
                 'Continue - check Max constraint.
            Case "0"
                If P1 < 0 Then P1 = 0
            Case "gt 0"
                If P1 <= 0 Then P1 = MinInc
            Case "a"
                Dim A As Double = ParamValue("a")
                If P1 < A Then P1 = A
            Case "gt -1"
                If P1 <= -1 Then P1 = -1 + MinInc
            Case "-1"
                If P1 < -1 Then P1 = -1
            Case "gt lower"
                Dim Lower As Double = ParamValue("lower")
                If P1 <= Lower Then P1 = Lower + MinInc
            Case "gt xm"
                Dim Xm As Double = ParamValue("xm")
                If P1 <= Xm Then P1 = Xm + MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown minimum: " & Param.Minimum & vbCrLf)
        End Select

        'Check that P3 is within the valid parameter range.
        Select Case Param.Maximum
            Case ""
                'Continue
            Case "+Inf"
                'Continue
            Case "+inf"
                'Continue
            Case "1"
                If P3 > 1 Then P3 = 1
            Case "population"
                Dim Population As Double = ParamValue("population")
                If P3 > Population Then P3 = Population
            Case "lt 1"
                If P3 >= 1 Then P3 = 1 - MinInc
            Case "lt upper"
                Dim Upper As Double = ParamValue("upper")
                If P3 >= Upper Then P3 = Upper - MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown maximum: " & Param.Maximum & vbCrLf)
        End Select

        'Check that P2 lies midway between P1 and P3:
        P2 = (P1 + P3) / 2
    End Sub

    Public Function ParamValue(ParamName As String) As Double
        'Returns the value of the parameter.
        'If ParamA.Name = ParamName Then
        If Distribution.ParamA.Name = ParamName Then
            Return Distribution.ParamA.Value
        ElseIf Distribution.ParamB.Name = ParamName Then
            Return Distribution.ParamB.Value
        ElseIf Distribution.ParamC.Name = ParamName Then
            Return Distribution.ParamC.Value
        ElseIf Distribution.ParamD.Name = ParamName Then
            Return Distribution.ParamD.Value
        ElseIf Distribution.ParamE.Name = ParamName Then
            Return Distribution.ParamE.Value
        Else
            RaiseEvent ErrorMessage("Unknown parameter name: " & ParamName & vbCrLf)
            Return Double.NaN
        End If
    End Function

    Public Function FindMax(P1 As Double, L1 As Double, P2 As Double, L2 As Double, P3 As Double, L3 As Double, ByRef Incr As Double, MinInc As Double, ByRef Param As ParamInfo) As Double
        'Find the P value with the maximum L from three P, L pairs.
        'A parabola is fitted to the three points. This is used to estimate the P value corresponding to the maximum L (or Likelihood) - this is the P value of the apex of the parabola.

        'https://stackoverflow.com/questions/717762/how-to-calculate-the-vertex-of-a-parabola-given-three-points

        Dim Denom As Double = (P1 - P2) * (P1 - P3) * (P2 - P3)
        Dim A As Double = (P3 * (L2 - L1) + P2 * (L1 - L3) + P1 * (L3 - L2)) / Denom
        Dim B As Double = (P3 ^ 2 * (L1 - L2) + P2 ^ 2 * (L3 - L1) + P1 ^ 2 * (L2 - L3)) / Denom
        Dim C As Double = (P2 * P3 * (P2 - P3) * L1 + P3 * P1 * (P3 - P1) * L2 + P1 * P2 * (P1 - P2) * L3) / Denom
        Dim Max As Double

        If A < 0 Then
            Incr = Incr / 2 'Decrease the increment
            Max = -B / (2 * A)
        Else 'Parabola is concave up!
            'Return the P value corresponding to the minimum L value.
            'Leave the Increment unchanged
            Max = P1
            If L2 > L1 Then
                Max = P2
                If L3 > L2 Then
                    Max = P3
                End If
            Else
                If L3 > L1 Then
                    Max = P3
                End If
            End If
        End If

        'Check that Max is within the valid parameter range.
        Select Case Param.Minimum
            Case ""
                'Continue - check Max constraint.
            Case "-Inf"
                 'Continue - check Max constraint.
            Case "-inf"
                 'Continue - check Max constraint.
            Case "0"
                If Max < 0 Then Max = 0
            Case "gt 0"
                If Max <= 0 Then Max = MinInc
            Case "a"
                Dim Aval As Double = ParamValue("a")
                If Max < Aval Then Max = Aval
            Case "gt -1"
                If Max <= -1 Then Max = -1 + MinInc
            Case "-1"
                If Max < -1 Then Max = -1
            Case "gt lower"
                Dim Lower As Double = ParamValue("lower")
                If Max <= Lower Then Max = Lower + MinInc
            Case "gt xm"
                Dim Xm As Double = ParamValue("xm")
                If Max <= Xm Then Max = Xm + MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown minimum: " & Param.Minimum & vbCrLf)
        End Select

        'Check that Max is within the valid parameter range.
        Select Case Param.Maximum
            Case ""
                'Continue
            Case "+Inf"
                'Continue
            Case "+inf"
                'Continue
            Case "1"
                If Max > 1 Then Max = 1
            Case "population"
                Dim Population As Double = ParamValue("population")
                If Max > Population Then Max = Population
            Case "lt 1"
                If Max >= 1 Then Max = 1 - MinInc
            Case "lt upper"
                Dim Upper As Double = ParamValue("upper")
                If Max >= Upper Then Max = Upper - MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown maximum: " & Param.Maximum & vbCrLf)
        End Select
        Return Max
    End Function


#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Events" '============================================================================================================================================================================

    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a message

#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class

Public Class clsParamEst
    'Probability Distribution Parameter Estimation.
    '
    'A set of measured sample values is stored in the Samples table in the Value field.
    '
    'The Model_Fitting table stores the sorted sample values in the Value field.
    '  Empirical Cumulative Distribution Function (eCDF) values are calculated from the sorted sample values.
    '  Reverse eCDF (Reverse_eCDF) values are also calculated from the sorted sample values.
    '  A model probability distribution is defined by a distribution name and set of parameters.
    '  The model distribution is used to generate Model_CDF, Model_Rev_CDF, Model_Prob_Dens values for each sample value.
    '  The natural log of the Model_Prob_Dens value is calculated and stored in the Ln_Model_Prob_Dens field.
    '  The Log Joint Probability Density value is calculated by summing the Ln_Model_Prob_Dens values. 
    '  The parameters of the model distribution are adjusted to maximise the Log Joint Probability Density value.
    '  
    '  https://www.statisticshowto.com/log-likelihood-function/

#Region " Variable Declarations - All the variables used in this class." '=====================================================================================================================

    Public Data As New DataSet  'Dataset used to hold the data values
    'This dataset will contain the following tables:
    '  Samples (Value) - the set of data sample values. The distribution parameters will be matched to these samples.
    '  Model_Fitting (Value, eCDF, Reverse_eCDF, Model_CDF, Model_Rev_CDF, Model_Prob_Dens, Ln_Model_Prob_Dens) - the model fitting calculations.
    '  Histogram (Mid_Interval, Count, Probability, Prob_Density) - the PDF histogram calculations.

    'These are references to the corresponding ParamInfo objects in DistributionInfo
    Public ParamA As ParamInfo
    Public ParamB As ParamInfo
    Public ParamC As ParamInfo
    Public ParamD As ParamInfo
    Public ParamE As ParamInfo

    Dim Samps() As Double 'Array of distribution samples. This is a copy of the distribution samples - used for fast calculations.
    Dim LogLikely() As Double 'Array of distribution log likelihood values corresponding to Samps.

    'Refined distribution parameter estimates:
    Public RefinedA As Double
    Public RefinedB As Double
    Public RefinedC As Double
    Public RefinedD As Double
    Public RefinedE As Double

    'Increments used to adjust the refined parameters:
    Public IncrA As Double
    Public IncrB As Double
    Public IncrC As Double
    Public IncrD As Double
    Public IncrE As Double


#End Region 'Variable Declarations ------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Properties" '========================================================================================================================================================================

    'Private _name As String = "" 'The name of the distribution.
    Private _sampleSetName As String = "" 'The name of the sample set. The estimated distribution parameters will be based on the data samples.
    'Property Name As String
    Property SampleSetName As String
        Get
            Return _sampleSetName
        End Get
        Set(value As String)
            _sampleSetName = value
        End Set
    End Property

    Private _sampleSetLabel As String = "" 'A label for the sample set.
    'Property Name As String
    Property SampleSetLabel As String
        Get
            Return _sampleSetLabel
        End Get
        Set(value As String)
            _sampleSetLabel = value
        End Set
    End Property

    Private _sampleSetUnits As String = "" 'The units of the sample set values.
    'Property Name As String
    Property SampleSetUnits As String
        Get
            Return _sampleSetUnits
        End Get
        Set(value As String)
            _sampleSetUnits = value
        End Set
    End Property

    Private _sampleSetDescription As String = "" 'A description of the sample set.
    'Property Name As String
    Property SampleSetDescription As String
        Get
            Return _sampleSetDescription
        End Get
        Set(value As String)
            _sampleSetDescription = value
        End Set
    End Property

    'NOTE: The ParamEst class is not part of the DistributionInfo class, which contains a distribution.
    'Private _distributionNo As Integer = -1 'The Distribution number in the Distribution Model being analysed. If this number is -1, it is not in the Distribution Model list.
    'Property DistributionNo As Integer
    '    Get
    '        Return _distributionNo
    '    End Get
    '    Set(value As Integer)
    '        _distributionNo = value
    '    End Set
    'End Property

    'Private _name As String = "" 'The name of the distribution.
    Private _distributionName As String = "" 'The name of the distribution.
    'Property Name As String
    Property DistributionName As String
        Get
            Return _distributionName
        End Get
        Set(value As String)
            _distributionName = value 'This is automatically updated by the corresponding property in DistributionInfo when it is changed.
        End Set
    End Property

    Private _continuity As String = "" 'The continuity of the distribution. (Continuous or Discrete)
    Property Continuity As String
        Get
            Return _continuity
        End Get
        Set(value As String)
            _continuity = value 'This is automatically updated by the corresponding property in DistributionInfo when it is changed.
        End Set
    End Property

    Private _nParams As Integer = 1 'The number of parameters used to specify the distribution. 
    Property NParams As Integer
        Get
            Return _nParams
        End Get
        Set(value As Integer)
            _nParams = value 'This is automatically updated by the corresponding property in DistributionInfo when it is changed.
        End Set
    End Property

    'NOTE: References to the DistributionInfo parameters are now used.
    'Private _paramA As Double = 1 'The value of distribution parameter ParamA. 
    'Property ParamA As Double
    '    Get
    '        Return _paramA
    '    End Get
    '    Set(value As Double)
    '        _paramA = value
    '    End Set
    'End Property

    'Private _paramB As Double = 1 'The value of distribution parameter ParamB. 
    'Property ParamB As Double
    '    Get
    '        Return _paramB
    '    End Get
    '    Set(value As Double)
    '        _paramB = value
    '    End Set
    'End Property

    'Private _paramC As Double = 1 'The value of distribution parameter ParamC. 
    'Property ParamC As Double
    '    Get
    '        Return _paramC
    '    End Get
    '    Set(value As Double)
    '        _paramC = value
    '    End Set
    'End Property

    'Private _paramD As Double = 1 'The value of distribution parameter ParamD. 
    'Property ParamD As Double
    '    Get
    '        Return _paramD
    '    End Get
    '    Set(value As Double)
    '        _paramD = value
    '    End Set
    'End Property

    'Private _paramE As Double = 1 'The value of distribution parameter ParamE. 

    'Property ParamE As Double
    '    Get
    '        Return _paramE
    '    End Get
    '    Set(value As Double)
    '        _paramE = value
    '    End Set
    'End Property


#End Region 'Properties -----------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Methods" '===========================================================================================================================================================================

    Public Sub New()

        'Set up the Tables in the Data dataset.
        Data.Tables.Add("Samples") 'Create the Samples table. 
        Data.Tables("Samples").Columns.Add("Value", System.Type.GetType("System.Double")) 'Add the Value field - this will contain the set of samples.

        Data.Tables.Add("Model_Fitting") 'Create the distribution model fitting table. 
        Data.Tables("Model_Fitting").Columns.Add("Value", System.Type.GetType("System.Double")) 'Add the Value field - this will contain the sorted set of samples.
        Data.Tables("Model_Fitting").Columns.Add("eCDF", System.Type.GetType("System.Double")) 'Add the eCDF field - this will contain the Empirical Cumulative Density Function values calculated from the sorted values.
        Data.Tables("Model_Fitting").Columns.Add("Reverse_eCDF", System.Type.GetType("System.Double")) 'Add the Reverse_eCDF field - this will contain the Reverse Empirical Cumulative Density Function values calculated from the sorted values.
        Data.Tables("Model_Fitting").Columns.Add("Model_CDF", System.Type.GetType("System.Double")) 'Add the Model_CDF field - this will contain the Model Cumulative Density Function values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Model_Rev_CDF", System.Type.GetType("System.Double")) 'Add the Model_Rev_CDF field - this will contain the Model Reverse Cumulative Density Function values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Model_Prob_Dens", System.Type.GetType("System.Double")) 'Add the Model_Prob_Dens field - this will contain the Model Probability Density values calculated for each sample value using the selected distribution model parameters.
        Data.Tables("Model_Fitting").Columns.Add("Ln_Model_Prob_Dens", System.Type.GetType("System.Double")) 'Add the Ln_Model_Prob_Dens field - this will contain the natural logarithm of the Model Probability Density values calculated for each sample value using the selected distribution model parameters.

        Data.Tables.Add("Histogram") 'Create the Histogram table. 
        Data.Tables("Histogram").Columns.Add("Mid_Interval", System.Type.GetType("System.Double")) 'Add the Mid_Interval field - this is the mid-point value of each interval used to generate the histogram.
        Data.Tables("Histogram").Columns.Add("Count", System.Type.GetType("System.Int32")) 'Add the Count field - this is the count of sample values in each interval.
        Data.Tables("Histogram").Columns.Add("Probability", System.Type.GetType("System.Double")) 'Add the Count field - this is the probability of a sample value lying within each interval.
        Data.Tables("Histogram").Columns.Add("Prob_Density", System.Type.GetType("System.Double")) 'Add the Count field - this is the probability density of each interval.

    End Sub

    Public Function SampleValuesToXDoc() As System.Xml.Linq.XDocument
        'Return the set of sample values used in the parameter estimation in an XDocument.

        Dim decl As New XDeclaration("1.0", "utf-8", "yes")
        Dim doc As New XDocument(decl, Nothing) 'Create an XDocument 
        Dim Samples As New XElement("SampleValues")
        Dim Name As New XElement("Name", SampleSetName)
        Samples.Add(Name)
        Dim Label As New XElement("Label", SampleSetLabel)
        Samples.Add(Label)
        Dim Units As New XElement("Units", SampleSetUnits)
        Samples.Add(Units)
        Dim Description As New XElement("Description", SampleSetDescription)
        Samples.Add(Description)
        Dim SampleData As New XElement("Data")

        Dim ValsPerLine As Integer = 10 'Write 10 values per line
        Dim ValString As String = "" 'String containing the sample values
        Dim I As Integer = 0 'Row index
        Dim myTable As DataTable = Data.Tables("Samples")

        For Each myRow As DataRow In myTable.Rows
            I += 1
            If I Mod ValsPerLine = 0 Then
                'ValString &= myRow.Item(0) & vbCrLf
                ValString &= myRow.Item(0) & " " & vbLf
            Else
                ValString &= myRow.Item(0) & " "
            End If
        Next

        Dim Values As New XCData(ValString)
        'Samples.Add(Values)
        SampleData.Add(Values)
        Samples.Add(SampleData)
        doc.Add(Samples)

        Return doc

    End Function

    Public Sub CopySamplesToModelFitting()
        'Çopy the Distribution Samples to the Model_Fitting table.

        If Data.Tables.Contains("Samples") Then
            If Data.Tables.Contains("Model_Fitting") Then
                Data.Tables("Model_Fitting").Rows.Clear()
                For Each Row As DataRow In Data.Tables("Samples").Rows
                    Data.Tables("Model_Fitting").Rows.Add(Row.Item(0))
                Next

                Data.Tables("Model_Fitting").DefaultView.Sort = "Value" & " ASC" 'Sort the Samples column

                'Generate the eCDF and Reverse_eCDF values:
                Dim NValues As Integer = Data.Tables("Model_Fitting").Rows.Count
                ReDim Samps(0 To NValues - 1) 'This array is used to rapidly generate a new Log Likelihood value.
                ReDim LogLikely(0 To NValues - 1) 'The Log Likelihood
                Dim I As Integer
                For I = 1 To NValues
                    Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("eCDF") = I / NValues 'Calculate each eCDF value (empirical CDF)
                    Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("Reverse_eCDF") = 1 - (I / NValues) 'Calculate each Reverse_eCDF value
                    Samps(I - 1) = Data.Tables("Model_Fitting").DefaultView.Item(I - 1).Item("Value") 'Copy the samples to Samps() - This array is used to rapidly generate a new Log Likelihood Function value.
                Next

            Else
                RaiseEvent ErrorMessage("Parameter Estimation error: The Model_Fitting table is missing." & vbCrLf)
            End If
        Else
            RaiseEvent ErrorMessage("Parameter Estimation error: The Samples table is missing." & vbCrLf)
        End If
    End Sub

    Public Function LogLikelihoodFn() As Double
        'Returns the Log Likelihood Function.

        'Samps() contains a set of samples from a distribution.
        'ParamA, ParamB, ParamC, ParamD & ParamE contains the selected distribution parameters. (The number of parameters is between 1 and 5 so not all of the parameter variables many be used.)
        'LogLikely() will contain the natural log of the PDF or PMF value corrensonding to the sample value in Samps().

        ''Update the LogLikely values:
        'Dim NSamps = Samps.Length
        'For Each Value As Double In Samps

        'Next


        'Update the LogLikely values:
        Dim I As Integer
        Select Case DistributionName
            Case "Beta"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Beta Scaled"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value, Samps(I))
                Next
            Case "Cauchy"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Cauchy.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Chi Squared"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(ParamA.Value, Samps(I))
                Next
            Case "Continuous Uniform"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Exponential"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Exponential.PDFLn(ParamA.Value, Samps(I))
                Next
            Case "Fisher-Snedecor"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Gamma"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Gamma.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Inverse Gaussian"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Log Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.LogNormal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Pareto.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Rayleigh"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(ParamA.Value, Samps(I))
                Next
            Case "Skewed Generalized Error"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value, Samps(I))
                Next
            Case "Skewed Generalized T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, ParamD.Value, ParamE.Value, Samps(I))
                Next
            Case "Student's T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.StudentT.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, Samps(I))
                Next
            Case "Triangular"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Triangular.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, Samps(I))
                Next
            Case "Truncated Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(ParamA.Value, ParamB.Value, ParamC.Value, Samps(I))
                Next
            Case "Bernoulli" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Bernoulli.PMFLn(ParamA.Value, Samps(I))
                Next
            Case "Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Binomial.PMFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Categorical" 'Discrete
                'For I = 0 To Samps.Length - 1
                '    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                'Next
            Case "Conway-Maxwell-Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Discrete Uniform" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Geometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Geometric.PMFLn(ParamA.Value, Samps(I))
                Next
            Case "Hypergeometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(ParamA.Value, ParamB.Value, ParamC.Value, Samps(I))
                Next
            Case "Negative Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case "Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Poisson.PMFLn(ParamA.Value, Samps(I))
                Next
            Case "Zipf" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Zipf.PMFLn(ParamA.Value, ParamB.Value, Samps(I))
                Next
            Case Else

        End Select

        Return LogLikely.Sum

    End Function


    Public Sub RefineParams(MinAdjustPct As Double)
        'Refine the distribution parameters to match the set of data samples.
        'The parameters will be adjusted until the percent change in the Log Likelihood is below the MinAdjustPct value.

        'Read the initial paramter values and parameter increments 
        RefinedA = ParamA.Value
        IncrA = ParamA.Increment
        If NParams > 1 Then
            RefinedB = ParamB.Value
            IncrB = ParamB.Increment
            If NParams > 2 Then
                RefinedC = ParamC.Value
                IncrC = ParamC.Increment
                If NParams > 3 Then
                    RefinedD = ParamD.Value
                    IncrD = ParamD.Increment
                    If NParams > 4 Then
                        RefinedE = ParamE.Value
                        IncrE = ParamE.Increment
                    End If
                End If
            End If
        End If

        Dim AdjustPct As Double 'The percent change in the Log Likelihood resulting from the latest set of parameter adjustments.
        Dim P1 As Double 'Parameter Value 1
        Dim L1 As Double 'Log Likelihood of Parameter Value 1
        Dim P2 As Double 'Parameter Value 2
        Dim L2 As Double 'Log Likelihood of Parameter Value 2
        Dim P3 As Double 'Parameter Value 3
        Dim L3 As Double 'Log Likelihood of Parameter Value 3
        Dim LogLike As Double 'The Log Likelihood before refinement
        Dim RefinedLogLike As Double  'The Log Likelihood after refinement.
        LogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
        Do
            'LogLike = RefinedLogLike
            SelectP1P2P3(RefinedA, P1, P2, P3, IncrA, 0.001, ParamA)
            'IncrA = IncrA / 2
            'Debug.Print("IncrA = " & IncrA)
            L1 = LogLikelihoodFn(P1, RefinedB, RefinedC, RefinedD, RefinedE)
            L2 = LogLikelihoodFn(P2, RefinedB, RefinedC, RefinedD, RefinedE)
            L3 = LogLikelihoodFn(P3, RefinedB, RefinedC, RefinedD, RefinedE)
            'LogLike = L2 'Save the value of the Log Likelihood before the next refinement iteration.
            RefinedA = FindMax(P1, L1, P2, L2, P3, L3, IncrA, 0.001, ParamA)
            Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrA = " & IncrA)
            Debug.Print("RefinedA = " & RefinedA)
            'RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
            If NParams > 1 Then
                SelectP1P2P3(RefinedB, P1, P2, P3, IncrB, 0.001, ParamB)
                'IncrB = IncrB / 2
                'Debug.Print("IncrB = " & IncrB)
                L1 = LogLikelihoodFn(RefinedA, P1, RefinedC, RefinedD, RefinedE)
                L2 = LogLikelihoodFn(RefinedA, P2, RefinedC, RefinedD, RefinedE)
                L3 = LogLikelihoodFn(RefinedA, P3, RefinedC, RefinedD, RefinedE)
                'LogLike = L2 'Save the valie of the Log Likelihood before the next refinement iteration.
                RefinedB = FindMax(P1, L1, P2, L2, P3, L3, IncrB, 0.001, ParamB)
                Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrB = " & IncrB)
                Debug.Print("RefinedB = " & RefinedB)
                'RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
                If NParams > 2 Then
                    SelectP1P2P3(RefinedC, P1, P2, P3, IncrC, 0.001, ParamC)
                    'IncrC = IncrC / 2
                    'Debug.Print("IncrC = " & IncrC)
                    L1 = LogLikelihoodFn(RefinedA, RefinedB, P1, RefinedD, RefinedE)
                    L2 = LogLikelihoodFn(RefinedA, RefinedB, P2, RefinedD, RefinedE)
                    L3 = LogLikelihoodFn(RefinedA, RefinedB, P3, RefinedD, RefinedE)
                    RefinedC = FindMax(P1, L1, P2, L2, P3, L3, IncrC, 0.001, ParamC)
                    Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrC = " & IncrC)
                    Debug.Print("RefinedC = " & RefinedC)
                    If NParams > 3 Then
                        SelectP1P2P3(RefinedD, P1, P2, P3, IncrD, 0.001, ParamD)
                        'IncrD = IncrD / 2
                        'Debug.Print("IncrD = " & IncrD)
                        L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P1, RefinedE)
                        L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        RefinedD = FindMax(P1, L1, P2, L2, P3, L3, IncrD, 0.001, ParamD)
                        Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrCD = " & IncrD)
                        Debug.Print("RefinedD = " & RefinedD)
                        If NParams > 4 Then
                            SelectP1P2P3(RefinedE, P1, P2, P3, IncrE, 0.001, ParamE)
                            'IncrE = IncrE / 2
                            'Debug.Print("IncrE = " & IncrE)
                            L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P1)
                            L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P2)
                            L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P3)
                            RefinedE = FindMax(P1, L1, P2, L2, P3, L3, IncrE, 0.001, ParamE)
                            Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrE = " & IncrE)
                            Debug.Print("RefinedE = " & RefinedE)
                        End If
                    End If
                End If
            End If
            RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
            Debug.Print("LogLike = " & LogLike)
            Debug.Print("RefinedLogLike = " & RefinedLogLike)
            'AdjustPct = (RefinedLogLike - LogLike) / LogLike * 100
            AdjustPct = Math.Abs((LogLike - RefinedLogLike) / LogLike * 100)
            Debug.Print("AdjustPct = " & AdjustPct)
            LogLike = RefinedLogLike
        Loop Until AdjustPct <= MinAdjustPct

        Debug.Print("Completed ----------------------------------------------------------------")

        'The new parameters are RefinedA, RefinedB, RefinedC, RefinedD and RefinedE.

        'Update the parameter values:
        ParamA.Value = RefinedA
        If NParams > 1 Then
            ParamB.Value = RefinedB
            If NParams > 2 Then
                ParamC.Value = RefinedC
                If NParams > 3 Then
                    ParamD.Value = RefinedD
                    If NParams > 4 Then
                        ParamE.Value = RefinedE
                    End If
                End If
            End If
        End If

    End Sub

    Public Sub RefineParams(MinAdjustPct As Double, ByRef ParameterA As Double, ByRef ParameterB As Double, ByRef ParameterC As Double, ByRef ParameterD As Double, ByRef ParameterE As Double)
        'Refine the distribution parameters to match the set of data samples.
        'The parameters will be adjusted until the percent change in the Log Likelihood is below the MinAdjustPct value.
        'This version of the method returns the referenced parameters but does not generate the data values.

        'Read the initial paramter values and parameter increments 
        RefinedA = ParamA.Value
        IncrA = ParamA.Increment
        If NParams > 1 Then
            RefinedB = ParamB.Value
            IncrB = ParamB.Increment
            If NParams > 2 Then
                RefinedC = ParamC.Value
                IncrC = ParamC.Increment
                If NParams > 3 Then
                    RefinedD = ParamD.Value
                    IncrD = ParamD.Increment
                    If NParams > 4 Then
                        RefinedE = ParamE.Value
                        IncrE = ParamE.Increment
                    End If
                End If
            End If
        End If

        Dim AdjustPct As Double 'The percent change in the Log Likelihood resulting from the latest set of parameter adjustments.
        Dim P1 As Double 'Parameter Value 1
        Dim L1 As Double 'Log Likelihood of Parameter Value 1
        Dim P2 As Double 'Parameter Value 2
        Dim L2 As Double 'Log Likelihood of Parameter Value 2
        Dim P3 As Double 'Parameter Value 3
        Dim L3 As Double 'Log Likelihood of Parameter Value 3
        Dim LogLike As Double 'The Log Likelihood before refinement
        Dim RefinedLogLike As Double  'The Log Likelihood after refinement.
        LogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
        Do
            'LogLike = RefinedLogLike
            SelectP1P2P3(RefinedA, P1, P2, P3, IncrA, 0.001, ParamA)
            'IncrA = IncrA / 2
            'Debug.Print("IncrA = " & IncrA)
            L1 = LogLikelihoodFn(P1, RefinedB, RefinedC, RefinedD, RefinedE)
            L2 = LogLikelihoodFn(P2, RefinedB, RefinedC, RefinedD, RefinedE)
            L3 = LogLikelihoodFn(P3, RefinedB, RefinedC, RefinedD, RefinedE)
            'LogLike = L2 'Save the value of the Log Likelihood before the next refinement iteration.
            RefinedA = FindMax(P1, L1, P2, L2, P3, L3, IncrA, 0.001, ParamA)
            'Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrA = " & IncrA)
            'Debug.Print("RefinedA = " & RefinedA)
            'RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
            If NParams > 1 Then
                SelectP1P2P3(RefinedB, P1, P2, P3, IncrB, 0.001, ParamB)
                'IncrB = IncrB / 2
                'Debug.Print("IncrB = " & IncrB)
                L1 = LogLikelihoodFn(RefinedA, P1, RefinedC, RefinedD, RefinedE)
                L2 = LogLikelihoodFn(RefinedA, P2, RefinedC, RefinedD, RefinedE)
                L3 = LogLikelihoodFn(RefinedA, P3, RefinedC, RefinedD, RefinedE)
                'LogLike = L2 'Save the valie of the Log Likelihood before the next refinement iteration.
                RefinedB = FindMax(P1, L1, P2, L2, P3, L3, IncrB, 0.001, ParamB)
                'Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrB = " & IncrB)
                'Debug.Print("RefinedB = " & RefinedB)
                'RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
                If NParams > 2 Then
                    SelectP1P2P3(RefinedC, P1, P2, P3, IncrC, 0.001, ParamC)
                    'IncrC = IncrC / 2
                    'Debug.Print("IncrC = " & IncrC)
                    L1 = LogLikelihoodFn(RefinedA, RefinedB, P1, RefinedD, RefinedE)
                    L2 = LogLikelihoodFn(RefinedA, RefinedB, P2, RefinedD, RefinedE)
                    L3 = LogLikelihoodFn(RefinedA, RefinedB, P3, RefinedD, RefinedE)
                    RefinedC = FindMax(P1, L1, P2, L2, P3, L3, IncrC, 0.001, ParamC)
                    'Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrC = " & IncrC)
                    'Debug.Print("RefinedC = " & RefinedC)
                    If NParams > 3 Then
                        SelectP1P2P3(RefinedD, P1, P2, P3, IncrD, 0.001, ParamD)
                        'IncrD = IncrD / 2
                        'Debug.Print("IncrD = " & IncrD)
                        L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P1, RefinedE)
                        L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, P2, RefinedE)
                        RefinedD = FindMax(P1, L1, P2, L2, P3, L3, IncrD, 0.001, ParamD)
                        'Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrCD = " & IncrD)
                        'Debug.Print("RefinedD = " & RefinedD)
                        If NParams > 4 Then
                            SelectP1P2P3(RefinedE, P1, P2, P3, IncrE, 0.001, ParamE)
                            'IncrE = IncrE / 2
                            'Debug.Print("IncrE = " & IncrE)
                            L1 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P1)
                            L2 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P2)
                            L3 = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, P3)
                            RefinedE = FindMax(P1, L1, P2, L2, P3, L3, IncrE, 0.001, ParamE)
                            'Debug.Print("P1 = " & P1 & "  L1 = " & Format(L1, "N4") & "  P2 = " & P2 & "  L2 = " & Format(L2, "N4") & "  P3 = " & P3 & "  L3 = " & Format(L3, "N4") & "  IncrE = " & IncrE)
                            'Debug.Print("RefinedE = " & RefinedE)
                        End If
                    End If
                End If
            End If
            RefinedLogLike = LogLikelihoodFn(RefinedA, RefinedB, RefinedC, RefinedD, RefinedE)
            'Debug.Print("LogLike = " & LogLike)
            'Debug.Print("RefinedLogLike = " & RefinedLogLike)
            'AdjustPct = (RefinedLogLike - LogLike) / LogLike * 100
            AdjustPct = Math.Abs((LogLike - RefinedLogLike) / LogLike * 100)
            'Debug.Print("AdjustPct = " & AdjustPct)
            LogLike = RefinedLogLike
            'Loop Until AdjustPct <= MinAdjustPct
            'Loop Until AdjustPct <= MinAdjustPct Or AdjustPct = Double.NaN
        Loop Until AdjustPct <= MinAdjustPct Or Double.IsNaN(AdjustPct)

        'Debug.Print("Completed ----------------------------------------------------------------")

        'The new parameters are RefinedA, RefinedB, RefinedC, RefinedD and RefinedE.

        'Update the parameter values:
        ParameterA = RefinedA
        If NParams > 1 Then
            ParameterB = RefinedB
            If NParams > 2 Then
                ParameterC = RefinedC
                If NParams > 3 Then
                    ParameterD = RefinedD
                    If NParams > 4 Then
                        ParameterE = RefinedE
                    End If
                End If
            End If
        End If

    End Sub



    Private Sub SelectP1P2P3(Estimate As Double, ByRef P1 As Double, ByRef P2 As Double, ByRef P3 As Double, Incr As Double, MinInc As Double, ByRef Param As ParamInfo)
        'Select suitable P1, P2 and P3 values used to obtain the refined parameter value.

        'P2 = Param.Value
        P2 = Estimate 'The last estimated parameter value
        P1 = P2 - Incr
        P3 = P2 + Incr

        'Check that P1 is within the valid parameter range.
        Select Case Param.Minimum
            Case ""
                'Continue - check Max constraint.
            Case "-Inf"
                 'Continue - check Max constraint.
            Case "-inf"
                 'Continue - check Max constraint.
            Case "0"
                If P1 < 0 Then P1 = 0
            Case "gt 0"
                If P1 <= 0 Then P1 = MinInc
            Case "a"
                Dim A As Double = ParamValue("a")
                If P1 < A Then P1 = A
            Case "gt -1"
                If P1 <= -1 Then P1 = -1 + MinInc
            Case "-1"
                If P1 < -1 Then P1 = -1
            Case "gt lower"
                Dim Lower As Double = ParamValue("lower")
                If P1 <= Lower Then P1 = Lower + MinInc
            Case "gt xm"
                Dim Xm As Double = ParamValue("xm")
                If P1 <= Xm Then P1 = Xm + MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown minimum: " & Param.Minimum & vbCrLf)
        End Select

        'Check that P3 is within the valid parameter range.
        Select Case Param.Maximum
            Case ""
                'Continue
            Case "+Inf"
                'Continue
            Case "+inf"
                'Continue
            Case "1"
                If P3 > 1 Then P3 = 1
            Case "population"
                Dim Population As Double = ParamValue("population")
                If P3 > Population Then P3 = Population
            Case "lt 1"
                If P3 >= 1 Then P3 = 1 - MinInc
            Case "lt upper"
                Dim Upper As Double = ParamValue("upper")
                If P3 >= Upper Then P3 = Upper - MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown maximum: " & Param.Maximum & vbCrLf)
        End Select

        'Check that P2 lies midway between P1 and P3:
        P2 = (P1 + P3) / 2


    End Sub

    Public Function ParamValue(ParamName As String) As Double
        'Returns the value of the parameter.
        If ParamA.Name = ParamName Then
            Return ParamA.Value
        ElseIf ParamB.Name = ParamName Then
            Return ParamB.Value
        ElseIf ParamC.Name = ParamName Then
            Return ParamC.Value
        ElseIf ParamD.Name = ParamName Then
            Return ParamD.Value
        ElseIf ParamE.Name = ParamName Then
            Return ParamE.Value
        Else
            RaiseEvent ErrorMessage("Unknown parameter name: " & ParamName & vbCrLf)
            Return Double.NaN
        End If
    End Function

    'Public Function FindMax(P1 As Double, L1 As Double, P2 As Double, L2 As Double, P3 As Double, L3 As Double) As Double
    Public Function FindMax(P1 As Double, L1 As Double, P2 As Double, L2 As Double, P3 As Double, L3 As Double, ByRef Incr As Double, MinInc As Double, ByRef Param As ParamInfo) As Double
        'Find the P value with the maximum L from three P, L pairs.
        'A parabola is fitted to the three points. This is used to estimate the P value corresponding to the maximum L (or Likelihood) - this is the P value of the apex of the parabola.

        'https://stackoverflow.com/questions/717762/how-to-calculate-the-vertex-of-a-parabola-given-three-points

        Dim Denom As Double = (P1 - P2) * (P1 - P3) * (P2 - P3)
        Dim A As Double = (P3 * (L2 - L1) + P2 * (L1 - L3) + P1 * (L3 - L2)) / Denom
        Dim B As Double = (P3 ^ 2 * (L1 - L2) + P2 ^ 2 * (L3 - L1) + P1 ^ 2 * (L2 - L3)) / Denom
        Dim C As Double = (P2 * P3 * (P2 - P3) * L1 + P3 * P1 * (P3 - P1) * L2 + P1 * P2 * (P1 - P2) * L3) / Denom
        Dim Max As Double

        If A < 0 Then
            Incr = Incr / 2 'Decrease the increment
            'Return -B / (2 * A)
            Max = -B / (2 * A)
        Else 'Parabola is concave up!
            'Return the P value corresponding to the minimum L value.
            'Leave the Increment unchanged
            'Return Double.NaN
            'Dim BestVal As Double = P1
            'Incr = Incr * 2 'Increase the increment THIS DOES NOT WORK!!!
            Max = P1
            If L2 > L1 Then
                'BestVal = P2
                Max = P2
                If L3 > L2 Then
                    'BestVal = P3
                    Max = P3
                End If
            Else
                'L2 <= L1
                If L3 > L1 Then
                    'BestVal = P3
                    Max = P3
                End If
            End If
            'Return BestVal
        End If

        'Check that Max is within the valid parameter range.
        Select Case Param.Minimum
            Case ""
                'Continue - check Max constraint.
            Case "-Inf"
                 'Continue - check Max constraint.
            Case "-inf"
                 'Continue - check Max constraint.
            Case "0"
                If Max < 0 Then Max = 0
            Case "gt 0"
                If Max <= 0 Then Max = MinInc
            Case "a"
                Dim Aval As Double = ParamValue("a")
                If Max < Aval Then Max = Aval
            Case "gt -1"
                If Max <= -1 Then Max = -1 + MinInc
            Case "-1"
                If Max < -1 Then Max = -1
            Case "gt lower"
                Dim Lower As Double = ParamValue("lower")
                If Max <= Lower Then Max = Lower + MinInc
            Case "gt xm"
                Dim Xm As Double = ParamValue("xm")
                If Max <= Xm Then Max = Xm + MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown minimum: " & Param.Minimum & vbCrLf)
        End Select

        'Check that Max is within the valid parameter range.
        Select Case Param.Maximum
            Case ""
                'Continue
            Case "+Inf"
                'Continue
            Case "+inf"
                'Continue
            Case "1"
                If Max > 1 Then Max = 1
            Case "population"
                Dim Population As Double = ParamValue("population")
                If Max > Population Then Max = Population
            Case "lt 1"
                If Max >= 1 Then Max = 1 - MinInc
            Case "lt upper"
                Dim Upper As Double = ParamValue("upper")
                If Max >= Upper Then Max = Upper - MinInc
            Case Else
                RaiseEvent ErrorMessage("Unknown maximum: " & Param.Maximum & vbCrLf)
        End Select

        Return Max

    End Function

    Public Function FindMax_Old2(P1 As Double, L1 As Double, P2 As Double, L2 As Double, P3 As Double, L3 As Double) As Double
        'Find the P value with the maximum L from three P, L pairs.
        'A circle is fitted to the three points. This is used to estimate the P value corresponding to the maximum L (or Likelihood) - this is the P value of the circle centre.

        'http://www.vb-helper.com/howto_circle_points.html

        'Find the bisector of the first two points:
        Dim X1 As Double = (P1 + P2) / 2
        Dim Y1 As Double = (L1 + L2) / 2
        Dim DX1 As Double = L1 - L2
        Dim DY1 As Double = P2 - P1

        'Find the bisector of the second two points:
        Dim X2 As Double = (P2 + P3) / 2
        Dim Y2 As Double = (L2 + L3) / 2
        Dim DX2 As Double = L2 - L3
        Dim DY2 As Double = P3 - P2

        'http://www.vb-helper.com/howto_intersect_lines.html
        'TO CHECK!!!

        'Find the intersection of the bisectors:
        Dim X As Double = (Y1 * DX1 * DX2 + X2 * DX1 * DY2 - X1 * DY1 * DX2 - Y2 * DX1 * DX2) / (DX1 * DY2 - DY1 * DX2)
        Dim Y As Double = (X - X1) * DY1 / DX1 + Y1

        Return X

    End Function

    Public Function FindMax_Old(P1 As Double, L1 As Double, P2 As Double, L2 As Double, P3 As Double, L3 As Double) As Double
        'Find the P value with the maximum L from three P, L pairs.
        'A circle is fitted to the three points. This is used to estimate the P value corresponding to the maximum L (or Likelihood) - this is the P value of the circle centre.

        'https://math.stackexchange.com/questions/213658/get-the-equation-of-a-circle-when-given-3-points
        'Equation of a circle = (X - Xc)^2 + (Y - Yc)^2 - R^2 = 0
        'https://www.vbforums.com/showthread.php?830221-Find-center-of-circle-given-3-points

        Dim T As Double = P2 ^ 2 + L2 ^ 2
        Dim B As Double = (P1 ^ 2 + L1 ^ 2 - T) / 2
        Dim C As Double = (T - P3 ^ 2 - L3 ^ 2) / 2
        Dim D As Double = 1 / ((P1 - P2) * (L2 - L3) - (P2 - P3) * (L1 - L2))
        Dim P As Double = (B * (L2 - L3) - C * (L1 - L2)) * D
        Dim L As Double = ((P1 - P2) * C - (P2 - P3) * B) * D

        If L > L2 Then RaiseEvent ErrorMessage("The 3 points can not be used to estimate a maximum likelihood - they are not concave down." & vbCrLf)
        Return P

    End Function


    Public Function LogLikelihoodFn(PA As Double, PB As Double, PC As Double, PD As Double, PE As Double) As Double
        'Returns the Log Likelihood Function.
        'This version uses the distribution parameter areguments.

        'Samps() contains a set of samples from a distribution.
        'ParamA, ParamB, ParamC, ParamD & ParamE contains the selected distribution parameters. (The number of parameters is between 1 and 5 so not all of the parameter variables many be used.)
        'LogLikely() will contain the natural log of the PDF or PMF value corrensonding to the sample value in Samps().

        ''Update the LogLikely values:
        'Dim NSamps = Samps.Length
        'For Each Value As Double In Samps

        'Next


        'Update the LogLikely values:
        Dim I As Integer
        Select Case DistributionName
            Case "Beta"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Beta.PDFLn(PA, PB, Samps(I))
                Next
            Case "Beta Scaled"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.BetaScaled.PDFLn(PA, PB, PC, PD, Samps(I))
                Next
            Case "Cauchy"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Cauchy.PDFLn(PA, PB, Samps(I))
                Next
            Case "Chi Squared"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ChiSquared.PDFLn(PA, Samps(I))
                Next
            Case "Continuous Uniform"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(PA, PB, Samps(I))
                Next
            Case "Exponential"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Exponential.PDFLn(PA, Samps(I))
                Next
            Case "Fisher-Snedecor"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(PA, PB, Samps(I))
                Next
            Case "Gamma"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Gamma.PDFLn(PA, PB, Samps(I))
                Next
            Case "Inverse Gaussian"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.InverseGaussian.PDFLn(PA, PB, Samps(I))
                Next
            Case "Log Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.LogNormal.PDFLn(PA, PB, Samps(I))
                Next
            Case "Normal"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(PA, PB, Samps(I))
                Next
            Case "Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Pareto.PDFLn(PA, PB, Samps(I))
                Next
            Case "Rayleigh"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Rayleigh.PDFLn(PA, Samps(I))
                Next
            Case "Skewed Generalized Error"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedError.PDFLn(PA, PB, PC, PD, Samps(I))
                Next
            Case "Skewed Generalized T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.SkewedGeneralizedT.PDFLn(PA, PB, PC, PD, PE, Samps(I))
                Next
            Case "Student's T"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.StudentT.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Triangular"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Triangular.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Truncated Pareto"
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.TruncatedPareto.PDFLn(PA, PB, PC, Samps(I))
                Next
            Case "Bernoulli" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Bernoulli.PMFLn(PA, Samps(I))
                Next
            Case "Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Binomial.PMFLn(PA, PB, Samps(I))
                Next
            Case "Categorical" 'Discrete
                'For I = 0 To Samps.Length - 1
                '    LogLikely(I) = MathNet.Numerics.Distributions.Normal.PDFLn(ParamA.Value, ParamB.Value, Samps(I))
                'Next
            Case "Conway-Maxwell-Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(PA, PB, Samps(I))
                Next
            Case "Discrete Uniform" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(PA, PB, Samps(I))
                Next
            Case "Geometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Geometric.PMFLn(PA, Samps(I))
                Next
            Case "Hypergeometric" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Hypergeometric.PMFLn(PA, PB, PC, Samps(I))
                Next
            Case "Negative Binomial" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(PA, PB, Samps(I))
                Next
            Case "Poisson" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Poisson.PMFLn(PA, Samps(I))
                Next
            Case "Zipf" 'Discrete
                For I = 0 To Samps.Length - 1
                    LogLikely(I) = MathNet.Numerics.Distributions.Zipf.PMFLn(PA, PB, Samps(I))
                Next
            Case Else

        End Select

        Return LogLikely.Sum

    End Function

#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a message

End Class 'ParamEst
